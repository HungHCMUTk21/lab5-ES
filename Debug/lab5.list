
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003038  08007a50  08007a50  00008a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa88  0800aa88  0000c014  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa88  0800aa88  0000ba88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa90  0800aa90  0000c014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa90  0800aa90  0000ba90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aa94  0800aa94  0000ba94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800aa98  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c014  2**0
                  CONTENTS
 10 .bss          00000208  20000014  20000014  0000c014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000021c  2000021c  0000c014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c014  2**0
                  CONTENTS, READONLY
 13 .debug_info   000174b1  00000000  00000000  0000c044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c1d  00000000  00000000  000234f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001548  00000000  00000000  00027118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000108d  00000000  00000000  00028660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241a9  00000000  00000000  000296ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce17  00000000  00000000  0004d896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3689  00000000  00000000  0006a6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013dd36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057f4  00000000  00000000  0013dd7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00143570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a38 	.word	0x08007a38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08007a38 	.word	0x08007a38

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004bc:	2201      	movs	r2, #1
 80004be:	2108      	movs	r1, #8
 80004c0:	4802      	ldr	r0, [pc, #8]	@ (80004cc <button_init+0x14>)
 80004c2:	f003 f8cb 	bl	800365c <HAL_GPIO_WritePin>
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40020c00 	.word	0x40020c00

080004d0 <button_Scan>:

void button_Scan(){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2108      	movs	r1, #8
 80004da:	482f      	ldr	r0, [pc, #188]	@ (8000598 <button_Scan+0xc8>)
 80004dc:	f003 f8be 	bl	800365c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2108      	movs	r1, #8
 80004e4:	482c      	ldr	r0, [pc, #176]	@ (8000598 <button_Scan+0xc8>)
 80004e6:	f003 f8b9 	bl	800365c <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 80004ea:	230a      	movs	r3, #10
 80004ec:	2202      	movs	r2, #2
 80004ee:	492b      	ldr	r1, [pc, #172]	@ (800059c <button_Scan+0xcc>)
 80004f0:	482b      	ldr	r0, [pc, #172]	@ (80005a0 <button_Scan+0xd0>)
 80004f2:	f005 f884 	bl	80055fe <HAL_SPI_Receive>
	  int button_index = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80004fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004fe:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000500:	2300      	movs	r3, #0
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	e03f      	b.n	8000586 <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	2b00      	cmp	r3, #0
 800050a:	db06      	blt.n	800051a <button_Scan+0x4a>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	2b03      	cmp	r3, #3
 8000510:	dc03      	bgt.n	800051a <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3304      	adds	r3, #4
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	e018      	b.n	800054c <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2b03      	cmp	r3, #3
 800051e:	dd07      	ble.n	8000530 <button_Scan+0x60>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b07      	cmp	r3, #7
 8000524:	dc04      	bgt.n	8000530 <button_Scan+0x60>
			  button_index = 7 - i;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f1c3 0307 	rsb	r3, r3, #7
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	e00d      	b.n	800054c <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b07      	cmp	r3, #7
 8000534:	dd06      	ble.n	8000544 <button_Scan+0x74>
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2b0b      	cmp	r3, #11
 800053a:	dc03      	bgt.n	8000544 <button_Scan+0x74>
			  button_index = i + 4;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3304      	adds	r3, #4
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	e003      	b.n	800054c <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f1c3 0317 	rsb	r3, r3, #23
 800054a:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 800054c:	4b13      	ldr	r3, [pc, #76]	@ (800059c <button_Scan+0xcc>)
 800054e:	881a      	ldrh	r2, [r3, #0]
 8000550:	897b      	ldrh	r3, [r7, #10]
 8000552:	4013      	ands	r3, r2
 8000554:	b29b      	uxth	r3, r3
 8000556:	2b00      	cmp	r3, #0
 8000558:	d005      	beq.n	8000566 <button_Scan+0x96>
 800055a:	4a12      	ldr	r2, [pc, #72]	@ (80005a4 <button_Scan+0xd4>)
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	2100      	movs	r1, #0
 8000560:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000564:	e009      	b.n	800057a <button_Scan+0xaa>
		  else button_count[button_index]++;
 8000566:	4a0f      	ldr	r2, [pc, #60]	@ (80005a4 <button_Scan+0xd4>)
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800056e:	3301      	adds	r3, #1
 8000570:	b299      	uxth	r1, r3
 8000572:	4a0c      	ldr	r2, [pc, #48]	@ (80005a4 <button_Scan+0xd4>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 800057a:	897b      	ldrh	r3, [r7, #10]
 800057c:	085b      	lsrs	r3, r3, #1
 800057e:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	3301      	adds	r3, #1
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	ddbc      	ble.n	8000506 <button_Scan+0x36>
	  }
}
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020c00 	.word	0x40020c00
 800059c:	20000050 	.word	0x20000050
 80005a0:	2000012c 	.word	0x2000012c
 80005a4:	20000030 	.word	0x20000030

080005a8 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(0); //second
 80005ac:	2000      	movs	r0, #0
 80005ae:	f002 fc31 	bl	8002e14 <DEC2BCD>
 80005b2:	4603      	mov	r3, r0
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000628 <ds3231_init+0x80>)
 80005b8:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(10); //minute
 80005ba:	200a      	movs	r0, #10
 80005bc:	f002 fc2a 	bl	8002e14 <DEC2BCD>
 80005c0:	4603      	mov	r3, r0
 80005c2:	461a      	mov	r2, r3
 80005c4:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <ds3231_init+0x80>)
 80005c6:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(9); //hour
 80005c8:	2009      	movs	r0, #9
 80005ca:	f002 fc23 	bl	8002e14 <DEC2BCD>
 80005ce:	4603      	mov	r3, r0
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <ds3231_init+0x80>)
 80005d4:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 80005d6:	2006      	movs	r0, #6
 80005d8:	f002 fc1c 	bl	8002e14 <DEC2BCD>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	4b11      	ldr	r3, [pc, #68]	@ (8000628 <ds3231_init+0x80>)
 80005e2:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(29); //date
 80005e4:	201d      	movs	r0, #29
 80005e6:	f002 fc15 	bl	8002e14 <DEC2BCD>
 80005ea:	4603      	mov	r3, r0
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000628 <ds3231_init+0x80>)
 80005f0:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(11);  //month
 80005f2:	200b      	movs	r0, #11
 80005f4:	f002 fc0e 	bl	8002e14 <DEC2BCD>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <ds3231_init+0x80>)
 80005fe:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(24); //year
 8000600:	2018      	movs	r0, #24
 8000602:	f002 fc07 	bl	8002e14 <DEC2BCD>
 8000606:	4603      	mov	r3, r0
 8000608:	461a      	mov	r2, r3
 800060a:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <ds3231_init+0x80>)
 800060c:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 800060e:	2332      	movs	r3, #50	@ 0x32
 8000610:	2203      	movs	r2, #3
 8000612:	21d0      	movs	r1, #208	@ 0xd0
 8000614:	4805      	ldr	r0, [pc, #20]	@ (800062c <ds3231_init+0x84>)
 8000616:	f003 fcab 	bl	8003f70 <HAL_I2C_IsDeviceReady>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <ds3231_init+0x7c>
		while(1);
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <ds3231_init+0x78>
	};
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000054 	.word	0x20000054
 800062c:	200000b8 	.word	0x200000b8

08000630 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 8000630:	b580      	push	{r7, lr}
 8000632:	b088      	sub	sp, #32
 8000634:	af04      	add	r7, sp, #16
 8000636:	4603      	mov	r3, r0
 8000638:	460a      	mov	r2, r1
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	4613      	mov	r3, r2
 800063e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	4618      	mov	r0, r3
 8000644:	f002 fbe6 	bl	8002e14 <DEC2BCD>
 8000648:	4603      	mov	r3, r0
 800064a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 800064c:	79fb      	ldrb	r3, [r7, #7]
 800064e:	b29a      	uxth	r2, r3
 8000650:	230a      	movs	r3, #10
 8000652:	9302      	str	r3, [sp, #8]
 8000654:	2301      	movs	r3, #1
 8000656:	9301      	str	r3, [sp, #4]
 8000658:	f107 030f 	add.w	r3, r7, #15
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2301      	movs	r3, #1
 8000660:	21d0      	movs	r1, #208	@ 0xd0
 8000662:	4803      	ldr	r0, [pc, #12]	@ (8000670 <ds3231_Write+0x40>)
 8000664:	f003 f958 	bl	8003918 <HAL_I2C_Mem_Write>
}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200000b8 	.word	0x200000b8

08000674 <ds3231_ReadTime>:

void ds3231_ReadTime(){
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 800067a:	230a      	movs	r3, #10
 800067c:	9302      	str	r3, [sp, #8]
 800067e:	2307      	movs	r3, #7
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	4b25      	ldr	r3, [pc, #148]	@ (8000718 <ds3231_ReadTime+0xa4>)
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2301      	movs	r3, #1
 8000688:	2200      	movs	r2, #0
 800068a:	21d0      	movs	r1, #208	@ 0xd0
 800068c:	4823      	ldr	r0, [pc, #140]	@ (800071c <ds3231_ReadTime+0xa8>)
 800068e:	f003 fa3d 	bl	8003b0c <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 8000692:	4b21      	ldr	r3, [pc, #132]	@ (8000718 <ds3231_ReadTime+0xa4>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	4618      	mov	r0, r3
 8000698:	f002 fba2 	bl	8002de0 <BCD2DEC>
 800069c:	4603      	mov	r3, r0
 800069e:	461a      	mov	r2, r3
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <ds3231_ReadTime+0xac>)
 80006a2:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 80006a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <ds3231_ReadTime+0xa4>)
 80006a6:	785b      	ldrb	r3, [r3, #1]
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fb99 	bl	8002de0 <BCD2DEC>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <ds3231_ReadTime+0xb0>)
 80006b4:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 80006b6:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <ds3231_ReadTime+0xa4>)
 80006b8:	789b      	ldrb	r3, [r3, #2]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fb90 	bl	8002de0 <BCD2DEC>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <ds3231_ReadTime+0xb4>)
 80006c6:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 80006c8:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <ds3231_ReadTime+0xa4>)
 80006ca:	78db      	ldrb	r3, [r3, #3]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f002 fb87 	bl	8002de0 <BCD2DEC>
 80006d2:	4603      	mov	r3, r0
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b15      	ldr	r3, [pc, #84]	@ (800072c <ds3231_ReadTime+0xb8>)
 80006d8:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 80006da:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <ds3231_ReadTime+0xa4>)
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fb7e 	bl	8002de0 <BCD2DEC>
 80006e4:	4603      	mov	r3, r0
 80006e6:	461a      	mov	r2, r3
 80006e8:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <ds3231_ReadTime+0xbc>)
 80006ea:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <ds3231_ReadTime+0xa4>)
 80006ee:	795b      	ldrb	r3, [r3, #5]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f002 fb75 	bl	8002de0 <BCD2DEC>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <ds3231_ReadTime+0xc0>)
 80006fc:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80006fe:	4b06      	ldr	r3, [pc, #24]	@ (8000718 <ds3231_ReadTime+0xa4>)
 8000700:	799b      	ldrb	r3, [r3, #6]
 8000702:	4618      	mov	r0, r3
 8000704:	f002 fb6c 	bl	8002de0 <BCD2DEC>
 8000708:	4603      	mov	r3, r0
 800070a:	461a      	mov	r2, r3
 800070c:	4b0a      	ldr	r3, [pc, #40]	@ (8000738 <ds3231_ReadTime+0xc4>)
 800070e:	701a      	strb	r2, [r3, #0]
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000054 	.word	0x20000054
 800071c:	200000b8 	.word	0x200000b8
 8000720:	2000005d 	.word	0x2000005d
 8000724:	2000005c 	.word	0x2000005c
 8000728:	2000005b 	.word	0x2000005b
 800072c:	2000005f 	.word	0x2000005f
 8000730:	2000005e 	.word	0x2000005e
 8000734:	20000060 	.word	0x20000060
 8000738:	20000061 	.word	0x20000061

0800073c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08e      	sub	sp, #56	@ 0x38
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
 8000764:	615a      	str	r2, [r3, #20]
 8000766:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000768:	4b2f      	ldr	r3, [pc, #188]	@ (8000828 <MX_FSMC_Init+0xec>)
 800076a:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800076e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000770:	4b2d      	ldr	r3, [pc, #180]	@ (8000828 <MX_FSMC_Init+0xec>)
 8000772:	4a2e      	ldr	r2, [pc, #184]	@ (800082c <MX_FSMC_Init+0xf0>)
 8000774:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000776:	4b2c      	ldr	r3, [pc, #176]	@ (8000828 <MX_FSMC_Init+0xec>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800077c:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <MX_FSMC_Init+0xec>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000782:	4b29      	ldr	r3, [pc, #164]	@ (8000828 <MX_FSMC_Init+0xec>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000788:	4b27      	ldr	r3, [pc, #156]	@ (8000828 <MX_FSMC_Init+0xec>)
 800078a:	2210      	movs	r2, #16
 800078c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800078e:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <MX_FSMC_Init+0xec>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000794:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <MX_FSMC_Init+0xec>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800079a:	4b23      	ldr	r3, [pc, #140]	@ (8000828 <MX_FSMC_Init+0xec>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007a0:	4b21      	ldr	r3, [pc, #132]	@ (8000828 <MX_FSMC_Init+0xec>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007a6:	4b20      	ldr	r3, [pc, #128]	@ (8000828 <MX_FSMC_Init+0xec>)
 80007a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80007ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000828 <MX_FSMC_Init+0xec>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	@ (8000828 <MX_FSMC_Init+0xec>)
 80007b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_FSMC_Init+0xec>)
 80007be:	2200      	movs	r2, #0
 80007c0:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <MX_FSMC_Init+0xec>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_FSMC_Init+0xec>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007ce:	230f      	movs	r3, #15
 80007d0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007d2:	230f      	movs	r3, #15
 80007d4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007d6:	233c      	movs	r3, #60	@ 0x3c
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 80007de:	2310      	movs	r3, #16
 80007e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 80007e2:	2311      	movs	r3, #17
 80007e4:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007ea:	2308      	movs	r3, #8
 80007ec:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80007ee:	230f      	movs	r3, #15
 80007f0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80007f2:	2309      	movs	r3, #9
 80007f4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80007fa:	2310      	movs	r3, #16
 80007fc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80007fe:	2311      	movs	r3, #17
 8000800:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000806:	463a      	mov	r2, r7
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	@ (8000828 <MX_FSMC_Init+0xec>)
 8000810:	f005 fafa 	bl	8005e08 <HAL_SRAM_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800081a:	f002 f885 	bl	8002928 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800081e:	bf00      	nop
 8000820:	3738      	adds	r7, #56	@ 0x38
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000064 	.word	0x20000064
 800082c:	a0000104 	.word	0xa0000104

08000830 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000844:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <HAL_FSMC_MspInit+0x88>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d131      	bne.n	80008b0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800084c:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <HAL_FSMC_MspInit+0x88>)
 800084e:	2201      	movs	r2, #1
 8000850:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <HAL_FSMC_MspInit+0x8c>)
 8000858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800085a:	4a18      	ldr	r2, [pc, #96]	@ (80008bc <HAL_FSMC_MspInit+0x8c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6393      	str	r3, [r2, #56]	@ 0x38
 8000862:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <HAL_FSMC_MspInit+0x8c>)
 8000864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800086e:	f64f 7388 	movw	r3, #65416	@ 0xff88
 8000872:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000880:	230c      	movs	r3, #12
 8000882:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	480d      	ldr	r0, [pc, #52]	@ (80008c0 <HAL_FSMC_MspInit+0x90>)
 800088a:	f002 fd4b 	bl	8003324 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800088e:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 8000892:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008a0:	230c      	movs	r3, #12
 80008a2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4619      	mov	r1, r3
 80008a8:	4806      	ldr	r0, [pc, #24]	@ (80008c4 <HAL_FSMC_MspInit+0x94>)
 80008aa:	f002 fd3b 	bl	8003324 <HAL_GPIO_Init>
 80008ae:	e000      	b.n	80008b2 <HAL_FSMC_MspInit+0x82>
    return;
 80008b0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200000b4 	.word	0x200000b4
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40020c00 	.word	0x40020c00

080008c8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008d0:	f7ff ffae 	bl	8000830 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
 80008f6:	4b6f      	ldr	r3, [pc, #444]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a6e      	ldr	r2, [pc, #440]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b6c      	ldr	r3, [pc, #432]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	4b68      	ldr	r3, [pc, #416]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	4a67      	ldr	r2, [pc, #412]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	@ 0x30
 800091e:	4b65      	ldr	r3, [pc, #404]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b61      	ldr	r3, [pc, #388]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a60      	ldr	r2, [pc, #384]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b5e      	ldr	r3, [pc, #376]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a59      	ldr	r2, [pc, #356]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b57      	ldr	r3, [pc, #348]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b53      	ldr	r3, [pc, #332]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a52      	ldr	r2, [pc, #328]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b50      	ldr	r3, [pc, #320]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b4c      	ldr	r3, [pc, #304]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a4b      	ldr	r2, [pc, #300]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 8000988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b49      	ldr	r3, [pc, #292]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	4b45      	ldr	r3, [pc, #276]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a44      	ldr	r2, [pc, #272]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 80009a4:	f043 0302 	orr.w	r3, r3, #2
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b42      	ldr	r3, [pc, #264]	@ (8000ab4 <MX_GPIO_Init+0x1d8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2170      	movs	r1, #112	@ 0x70
 80009ba:	483f      	ldr	r0, [pc, #252]	@ (8000ab8 <MX_GPIO_Init+0x1dc>)
 80009bc:	f002 fe4e 	bl	800365c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009c6:	483d      	ldr	r0, [pc, #244]	@ (8000abc <MX_GPIO_Init+0x1e0>)
 80009c8:	f002 fe48 	bl	800365c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2140      	movs	r1, #64	@ 0x40
 80009d0:	483b      	ldr	r0, [pc, #236]	@ (8000ac0 <MX_GPIO_Init+0x1e4>)
 80009d2:	f002 fe43 	bl	800365c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009dc:	4839      	ldr	r0, [pc, #228]	@ (8000ac4 <MX_GPIO_Init+0x1e8>)
 80009de:	f002 fe3d 	bl	800365c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2108      	movs	r1, #8
 80009e6:	4838      	ldr	r0, [pc, #224]	@ (8000ac8 <MX_GPIO_Init+0x1ec>)
 80009e8:	f002 fe38 	bl	800365c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80009ec:	2370      	movs	r3, #112	@ 0x70
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	482d      	ldr	r0, [pc, #180]	@ (8000ab8 <MX_GPIO_Init+0x1dc>)
 8000a04:	f002 fc8e 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000a08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4826      	ldr	r0, [pc, #152]	@ (8000abc <MX_GPIO_Init+0x1e0>)
 8000a22:	f002 fc7f 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a26:	23c0      	movs	r3, #192	@ 0xc0
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4822      	ldr	r0, [pc, #136]	@ (8000ac4 <MX_GPIO_Init+0x1e8>)
 8000a3a:	f002 fc73 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000a3e:	2330      	movs	r3, #48	@ 0x30
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4a:	f107 031c 	add.w	r3, r7, #28
 8000a4e:	4619      	mov	r1, r3
 8000a50:	481a      	ldr	r0, [pc, #104]	@ (8000abc <MX_GPIO_Init+0x1e0>)
 8000a52:	f002 fc67 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000a56:	2340      	movs	r3, #64	@ 0x40
 8000a58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 031c 	add.w	r3, r7, #28
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4814      	ldr	r0, [pc, #80]	@ (8000ac0 <MX_GPIO_Init+0x1e4>)
 8000a6e:	f002 fc59 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000a72:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	480e      	ldr	r0, [pc, #56]	@ (8000ac4 <MX_GPIO_Init+0x1e8>)
 8000a8c:	f002 fc4a 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000a90:	2308      	movs	r3, #8
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4808      	ldr	r0, [pc, #32]	@ (8000ac8 <MX_GPIO_Init+0x1ec>)
 8000aa8:	f002 fc3c 	bl	8003324 <HAL_GPIO_Init>

}
 8000aac:	bf00      	nop
 8000aae:	3730      	adds	r7, #48	@ 0x30
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40021000 	.word	0x40021000
 8000abc:	40020800 	.word	0x40020800
 8000ac0:	40021800 	.word	0x40021800
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40020c00 	.word	0x40020c00

08000acc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000ad2:	4a13      	ldr	r2, [pc, #76]	@ (8000b20 <MX_I2C1_Init+0x54>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000ad8:	4a12      	ldr	r2, [pc, #72]	@ (8000b24 <MX_I2C1_Init+0x58>)
 8000ada:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000aea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afc:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	@ (8000b1c <MX_I2C1_Init+0x50>)
 8000b0a:	f002 fdc1 	bl	8003690 <HAL_I2C_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b14:	f001 ff08 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	200000b8 	.word	0x200000b8
 8000b20:	40005400 	.word	0x40005400
 8000b24:	000186a0 	.word	0x000186a0

08000b28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a19      	ldr	r2, [pc, #100]	@ (8000bac <HAL_I2C_MspInit+0x84>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d12b      	bne.n	8000ba2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a17      	ldr	r2, [pc, #92]	@ (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b15      	ldr	r3, [pc, #84]	@ (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b66:	23c0      	movs	r3, #192	@ 0xc0
 8000b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b6a:	2312      	movs	r3, #18
 8000b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b72:	2303      	movs	r3, #3
 8000b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b76:	2304      	movs	r3, #4
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <HAL_I2C_MspInit+0x8c>)
 8000b82:	f002 fbcf 	bl	8003324 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	4a08      	ldr	r2, [pc, #32]	@ (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_I2C_MspInit+0x88>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	@ 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40005400 	.word	0x40005400
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000bc2:	4a04      	ldr	r2, [pc, #16]	@ (8000bd4 <LCD_WR_REG+0x1c>)
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	8013      	strh	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	600ffffe 	.word	0x600ffffe

08000bd8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000be2:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <LCD_WR_DATA+0x1c>)
 8000be4:	88fb      	ldrh	r3, [r7, #6]
 8000be6:	8053      	strh	r3, [r2, #2]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	600ffffe 	.word	0x600ffffe

08000bf8 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <LCD_RD_DATA+0x20>)
 8000c00:	885b      	ldrh	r3, [r3, #2]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	b29b      	uxth	r3, r3
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	600ffffe 	.word	0x600ffffe

08000c1c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4604      	mov	r4, r0
 8000c24:	4608      	mov	r0, r1
 8000c26:	4611      	mov	r1, r2
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4623      	mov	r3, r4
 8000c2c:	80fb      	strh	r3, [r7, #6]
 8000c2e:	4603      	mov	r3, r0
 8000c30:	80bb      	strh	r3, [r7, #4]
 8000c32:	460b      	mov	r3, r1
 8000c34:	807b      	strh	r3, [r7, #2]
 8000c36:	4613      	mov	r3, r2
 8000c38:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000c3a:	202a      	movs	r0, #42	@ 0x2a
 8000c3c:	f7ff ffbc 	bl	8000bb8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000c40:	88fb      	ldrh	r3, [r7, #6]
 8000c42:	0a1b      	lsrs	r3, r3, #8
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ffc6 	bl	8000bd8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff ffc0 	bl	8000bd8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000c58:	887b      	ldrh	r3, [r7, #2]
 8000c5a:	0a1b      	lsrs	r3, r3, #8
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ffba 	bl	8000bd8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff ffb4 	bl	8000bd8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000c70:	202b      	movs	r0, #43	@ 0x2b
 8000c72:	f7ff ffa1 	bl	8000bb8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000c76:	88bb      	ldrh	r3, [r7, #4]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ffab 	bl	8000bd8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000c82:	88bb      	ldrh	r3, [r7, #4]
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f7ff ffa5 	bl	8000bd8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000c8e:	883b      	ldrh	r3, [r7, #0]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ff9f 	bl	8000bd8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000c9a:	883b      	ldrh	r3, [r7, #0]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff99 	bl	8000bd8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000ca6:	202c      	movs	r0, #44	@ 0x2c
 8000ca8:	f7ff ff86 	bl	8000bb8 <LCD_WR_REG>
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd90      	pop	{r4, r7, pc}

08000cb4 <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000cbe:	88fb      	ldrh	r3, [r7, #6]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000cc8:	88fb      	ldrh	r3, [r7, #6]
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <lcd_Clear+0x70>)
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <lcd_Clear+0x70>)
 8000cd8:	885b      	ldrh	r3, [r3, #2]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff ff9b 	bl	8000c1c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	81fb      	strh	r3, [r7, #14]
 8000cea:	e011      	b.n	8000d10 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	81bb      	strh	r3, [r7, #12]
 8000cf0:	e006      	b.n	8000d00 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff6f 	bl	8000bd8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000cfa:	89bb      	ldrh	r3, [r7, #12]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	81bb      	strh	r3, [r7, #12]
 8000d00:	4b08      	ldr	r3, [pc, #32]	@ (8000d24 <lcd_Clear+0x70>)
 8000d02:	885b      	ldrh	r3, [r3, #2]
 8000d04:	89ba      	ldrh	r2, [r7, #12]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d3f3      	bcc.n	8000cf2 <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000d0a:	89fb      	ldrh	r3, [r7, #14]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	81fb      	strh	r3, [r7, #14]
 8000d10:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <lcd_Clear+0x70>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	89fa      	ldrh	r2, [r7, #14]
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d3e8      	bcc.n	8000cec <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000d1a:	bf00      	nop
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2000010c 	.word	0x2000010c

08000d28 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4604      	mov	r4, r0
 8000d30:	4608      	mov	r0, r1
 8000d32:	4611      	mov	r1, r2
 8000d34:	461a      	mov	r2, r3
 8000d36:	4623      	mov	r3, r4
 8000d38:	80fb      	strh	r3, [r7, #6]
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	80bb      	strh	r3, [r7, #4]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	807b      	strh	r3, [r7, #2]
 8000d42:	4613      	mov	r3, r2
 8000d44:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000d46:	887b      	ldrh	r3, [r7, #2]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	883b      	ldrh	r3, [r7, #0]
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	88b9      	ldrh	r1, [r7, #4]
 8000d54:	88f8      	ldrh	r0, [r7, #6]
 8000d56:	f7ff ff61 	bl	8000c1c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000d5a:	88bb      	ldrh	r3, [r7, #4]
 8000d5c:	81fb      	strh	r3, [r7, #14]
 8000d5e:	e010      	b.n	8000d82 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	81bb      	strh	r3, [r7, #12]
 8000d64:	e006      	b.n	8000d74 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000d66:	8c3b      	ldrh	r3, [r7, #32]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff35 	bl	8000bd8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000d6e:	89bb      	ldrh	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	81bb      	strh	r3, [r7, #12]
 8000d74:	89ba      	ldrh	r2, [r7, #12]
 8000d76:	887b      	ldrh	r3, [r7, #2]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d3f4      	bcc.n	8000d66 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000d7c:	89fb      	ldrh	r3, [r7, #14]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	81fb      	strh	r3, [r7, #14]
 8000d82:	89fa      	ldrh	r2, [r7, #14]
 8000d84:	883b      	ldrh	r3, [r7, #0]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d3ea      	bcc.n	8000d60 <lcd_Fill+0x38>
		}
	}
}
 8000d8a:	bf00      	nop
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd90      	pop	{r4, r7, pc}

08000d94 <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	80bb      	strh	r3, [r7, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000da6:	88bb      	ldrh	r3, [r7, #4]
 8000da8:	88fa      	ldrh	r2, [r7, #6]
 8000daa:	88b9      	ldrh	r1, [r7, #4]
 8000dac:	88f8      	ldrh	r0, [r7, #6]
 8000dae:	f7ff ff35 	bl	8000c1c <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000db2:	887b      	ldrh	r3, [r7, #2]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ff0f 	bl	8000bd8 <LCD_WR_DATA>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4604      	mov	r4, r0
 8000dcc:	4608      	mov	r0, r1
 8000dce:	4611      	mov	r1, r2
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4623      	mov	r3, r4
 8000dd4:	80fb      	strh	r3, [r7, #6]
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	80bb      	strh	r3, [r7, #4]
 8000dda:	460b      	mov	r3, r1
 8000ddc:	70fb      	strb	r3, [r7, #3]
 8000dde:	4613      	mov	r3, r2
 8000de0:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000de6:	88fb      	ldrh	r3, [r7, #6]
 8000de8:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000dea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000dee:	085b      	lsrs	r3, r3, #1
 8000df0:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000df2:	7bfb      	ldrb	r3, [r7, #15]
 8000df4:	08db      	lsrs	r3, r3, #3
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	461a      	mov	r2, r3
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	f003 0307 	and.w	r3, r3, #7
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	bf14      	ite	ne
 8000e06:	2301      	movne	r3, #1
 8000e08:	2300      	moveq	r3, #0
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4413      	add	r3, r2
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	fb12 f303 	smulbb	r3, r2, r3
 8000e1a:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000e1c:	78fb      	ldrb	r3, [r7, #3]
 8000e1e:	3b20      	subs	r3, #32
 8000e20:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	88fb      	ldrh	r3, [r7, #6]
 8000e28:	4413      	add	r3, r2
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	3b01      	subs	r3, #1
 8000e2e:	b29c      	uxth	r4, r3
 8000e30:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	88bb      	ldrh	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	88b9      	ldrh	r1, [r7, #4]
 8000e42:	88f8      	ldrh	r0, [r7, #6]
 8000e44:	4622      	mov	r2, r4
 8000e46:	f7ff fee9 	bl	8000c1c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	827b      	strh	r3, [r7, #18]
 8000e4e:	e07a      	b.n	8000f46 <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000e50:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e54:	2b0c      	cmp	r3, #12
 8000e56:	d028      	beq.n	8000eaa <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000e58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e5c:	2b10      	cmp	r3, #16
 8000e5e:	d108      	bne.n	8000e72 <lcd_ShowChar+0xae>
 8000e60:	78fa      	ldrb	r2, [r7, #3]
 8000e62:	8a7b      	ldrh	r3, [r7, #18]
 8000e64:	493c      	ldr	r1, [pc, #240]	@ (8000f58 <lcd_ShowChar+0x194>)
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	440a      	add	r2, r1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	75fb      	strb	r3, [r7, #23]
 8000e70:	e01b      	b.n	8000eaa <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000e72:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e76:	2b18      	cmp	r3, #24
 8000e78:	d10b      	bne.n	8000e92 <lcd_ShowChar+0xce>
 8000e7a:	78fa      	ldrb	r2, [r7, #3]
 8000e7c:	8a79      	ldrh	r1, [r7, #18]
 8000e7e:	4837      	ldr	r0, [pc, #220]	@ (8000f5c <lcd_ShowChar+0x198>)
 8000e80:	4613      	mov	r3, r2
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	4403      	add	r3, r0
 8000e8a:	440b      	add	r3, r1
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	75fb      	strb	r3, [r7, #23]
 8000e90:	e00b      	b.n	8000eaa <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000e92:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e96:	2b20      	cmp	r3, #32
 8000e98:	d15a      	bne.n	8000f50 <lcd_ShowChar+0x18c>
 8000e9a:	78fa      	ldrb	r2, [r7, #3]
 8000e9c:	8a7b      	ldrh	r3, [r7, #18]
 8000e9e:	4930      	ldr	r1, [pc, #192]	@ (8000f60 <lcd_ShowChar+0x19c>)
 8000ea0:	0192      	lsls	r2, r2, #6
 8000ea2:	440a      	add	r2, r1
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	75bb      	strb	r3, [r7, #22]
 8000eae:	e044      	b.n	8000f3a <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000eb0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d120      	bne.n	8000efa <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000eb8:	7dfa      	ldrb	r2, [r7, #23]
 8000eba:	7dbb      	ldrb	r3, [r7, #22]
 8000ebc:	fa42 f303 	asr.w	r3, r2, r3
 8000ec0:	f003 0301 	and.w	r3, r3, #1
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d004      	beq.n	8000ed2 <lcd_ShowChar+0x10e>
 8000ec8:	883b      	ldrh	r3, [r7, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fe84 	bl	8000bd8 <LCD_WR_DATA>
 8000ed0:	e003      	b.n	8000eda <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000ed2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fe7f 	bl	8000bd8 <LCD_WR_DATA>
				m++;
 8000eda:	7d7b      	ldrb	r3, [r7, #21]
 8000edc:	3301      	adds	r3, #1
 8000ede:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000ee0:	7d7b      	ldrb	r3, [r7, #21]
 8000ee2:	7bfa      	ldrb	r2, [r7, #15]
 8000ee4:	fbb3 f1f2 	udiv	r1, r3, r2
 8000ee8:	fb01 f202 	mul.w	r2, r1, r2
 8000eec:	1a9b      	subs	r3, r3, r2
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d11f      	bne.n	8000f34 <lcd_ShowChar+0x170>
				{
					m=0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	757b      	strb	r3, [r7, #21]
					break;
 8000ef8:	e022      	b.n	8000f40 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000efa:	7dfa      	ldrb	r2, [r7, #23]
 8000efc:	7dbb      	ldrb	r3, [r7, #22]
 8000efe:	fa42 f303 	asr.w	r3, r2, r3
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d005      	beq.n	8000f16 <lcd_ShowChar+0x152>
 8000f0a:	883a      	ldrh	r2, [r7, #0]
 8000f0c:	88b9      	ldrh	r1, [r7, #4]
 8000f0e:	88fb      	ldrh	r3, [r7, #6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff3f 	bl	8000d94 <lcd_DrawPoint>
				x++;
 8000f16:	88fb      	ldrh	r3, [r7, #6]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000f1c:	88fa      	ldrh	r2, [r7, #6]
 8000f1e:	8a3b      	ldrh	r3, [r7, #16]
 8000f20:	1ad2      	subs	r2, r2, r3
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d105      	bne.n	8000f34 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000f28:	8a3b      	ldrh	r3, [r7, #16]
 8000f2a:	80fb      	strh	r3, [r7, #6]
					y++;
 8000f2c:	88bb      	ldrh	r3, [r7, #4]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	80bb      	strh	r3, [r7, #4]
					break;
 8000f32:	e005      	b.n	8000f40 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000f34:	7dbb      	ldrb	r3, [r7, #22]
 8000f36:	3301      	adds	r3, #1
 8000f38:	75bb      	strb	r3, [r7, #22]
 8000f3a:	7dbb      	ldrb	r3, [r7, #22]
 8000f3c:	2b07      	cmp	r3, #7
 8000f3e:	d9b7      	bls.n	8000eb0 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000f40:	8a7b      	ldrh	r3, [r7, #18]
 8000f42:	3301      	adds	r3, #1
 8000f44:	827b      	strh	r3, [r7, #18]
 8000f46:	8a7a      	ldrh	r2, [r7, #18]
 8000f48:	89bb      	ldrh	r3, [r7, #12]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d380      	bcc.n	8000e50 <lcd_ShowChar+0x8c>
 8000f4e:	e000      	b.n	8000f52 <lcd_ShowChar+0x18e>
		else return;
 8000f50:	bf00      	nop
				}
			}
		}
	}
}
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd90      	pop	{r4, r7, pc}
 8000f58:	08007af0 	.word	0x08007af0
 8000f5c:	080080e0 	.word	0x080080e0
 8000f60:	080092b0 	.word	0x080092b0

08000f64 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	460a      	mov	r2, r1
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	4613      	mov	r3, r2
 8000f72:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000f74:	2301      	movs	r3, #1
 8000f76:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000f78:	e004      	b.n	8000f84 <mypow+0x20>
 8000f7a:	79fa      	ldrb	r2, [r7, #7]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	fb02 f303 	mul.w	r3, r2, r3
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	79bb      	ldrb	r3, [r7, #6]
 8000f86:	1e5a      	subs	r2, r3, #1
 8000f88:	71ba      	strb	r2, [r7, #6]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d1f5      	bne.n	8000f7a <mypow+0x16>
	return result;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af04      	add	r7, sp, #16
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4623      	mov	r3, r4
 8000fac:	80fb      	strh	r3, [r7, #6]
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80bb      	strh	r3, [r7, #4]
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	807b      	strh	r3, [r7, #2]
 8000fb6:	4613      	mov	r3, r2
 8000fb8:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8000fbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000fc2:	085b      	lsrs	r3, r3, #1
 8000fc4:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	73fb      	strb	r3, [r7, #15]
 8000fca:	e059      	b.n	8001080 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8000fcc:	887c      	ldrh	r4, [r7, #2]
 8000fce:	787a      	ldrb	r2, [r7, #1]
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4619      	mov	r1, r3
 8000fdc:	200a      	movs	r0, #10
 8000fde:	f7ff ffc1 	bl	8000f64 <mypow>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	fbb4 f1f3 	udiv	r1, r4, r3
 8000fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8001094 <lcd_ShowIntNum+0xf8>)
 8000fea:	fba3 2301 	umull	r2, r3, r3, r1
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	4413      	add	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	1aca      	subs	r2, r1, r3
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d121      	bne.n	8001048 <lcd_ShowIntNum+0xac>
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	787b      	ldrb	r3, [r7, #1]
 8001008:	3b01      	subs	r3, #1
 800100a:	429a      	cmp	r2, r3
 800100c:	da1c      	bge.n	8001048 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 800100e:	7b3b      	ldrb	r3, [r7, #12]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d117      	bne.n	8001044 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	b29a      	uxth	r2, r3
 8001018:	7b7b      	ldrb	r3, [r7, #13]
 800101a:	b29b      	uxth	r3, r3
 800101c:	fb12 f303 	smulbb	r3, r2, r3
 8001020:	b29a      	uxth	r2, r3
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	4413      	add	r3, r2
 8001026:	b298      	uxth	r0, r3
 8001028:	8c3a      	ldrh	r2, [r7, #32]
 800102a:	88b9      	ldrh	r1, [r7, #4]
 800102c:	2300      	movs	r3, #0
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	4613      	mov	r3, r2
 800103c:	2220      	movs	r2, #32
 800103e:	f7ff fec1 	bl	8000dc4 <lcd_ShowChar>
				continue;
 8001042:	e01a      	b.n	800107a <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001044:	2301      	movs	r3, #1
 8001046:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	b29a      	uxth	r2, r3
 800104c:	7b7b      	ldrb	r3, [r7, #13]
 800104e:	b29b      	uxth	r3, r3
 8001050:	fb12 f303 	smulbb	r3, r2, r3
 8001054:	b29a      	uxth	r2, r3
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	4413      	add	r3, r2
 800105a:	b298      	uxth	r0, r3
 800105c:	7b3b      	ldrb	r3, [r7, #12]
 800105e:	3330      	adds	r3, #48	@ 0x30
 8001060:	b2da      	uxtb	r2, r3
 8001062:	8c3c      	ldrh	r4, [r7, #32]
 8001064:	88b9      	ldrh	r1, [r7, #4]
 8001066:	2300      	movs	r3, #0
 8001068:	9302      	str	r3, [sp, #8]
 800106a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	4623      	mov	r3, r4
 8001076:	f7ff fea5 	bl	8000dc4 <lcd_ShowChar>
	for(t=0;t<len;t++)
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	3301      	adds	r3, #1
 800107e:	73fb      	strb	r3, [r7, #15]
 8001080:	7bfa      	ldrb	r2, [r7, #15]
 8001082:	787b      	ldrb	r3, [r7, #1]
 8001084:	429a      	cmp	r2, r3
 8001086:	d3a1      	bcc.n	8000fcc <lcd_ShowIntNum+0x30>
	}
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	bd90      	pop	{r4, r7, pc}
 8001092:	bf00      	nop
 8001094:	cccccccd 	.word	0xcccccccd

08001098 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 80010b2:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <lcd_SetDir+0x44>)
 80010b4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010b8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80010ba:	4b08      	ldr	r3, [pc, #32]	@ (80010dc <lcd_SetDir+0x44>)
 80010bc:	22f0      	movs	r2, #240	@ 0xf0
 80010be:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 80010c0:	e006      	b.n	80010d0 <lcd_SetDir+0x38>
		lcddev.width=240;
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <lcd_SetDir+0x44>)
 80010c4:	22f0      	movs	r2, #240	@ 0xf0
 80010c6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80010c8:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <lcd_SetDir+0x44>)
 80010ca:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010ce:	805a      	strh	r2, [r3, #2]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	2000010c 	.word	0x2000010c

080010e0 <lcd_init>:


void lcd_init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010ea:	48aa      	ldr	r0, [pc, #680]	@ (8001394 <lcd_init+0x2b4>)
 80010ec:	f002 fab6 	bl	800365c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010f4:	f001 ff4e 	bl	8002f94 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010fe:	48a5      	ldr	r0, [pc, #660]	@ (8001394 <lcd_init+0x2b4>)
 8001100:	f002 faac 	bl	800365c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001104:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001108:	f001 ff44 	bl	8002f94 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff ffc3 	bl	8001098 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001112:	20d3      	movs	r0, #211	@ 0xd3
 8001114:	f7ff fd50 	bl	8000bb8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001118:	f7ff fd6e 	bl	8000bf8 <LCD_RD_DATA>
 800111c:	4603      	mov	r3, r0
 800111e:	461a      	mov	r2, r3
 8001120:	4b9d      	ldr	r3, [pc, #628]	@ (8001398 <lcd_init+0x2b8>)
 8001122:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001124:	f7ff fd68 	bl	8000bf8 <LCD_RD_DATA>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b9a      	ldr	r3, [pc, #616]	@ (8001398 <lcd_init+0x2b8>)
 800112e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001130:	f7ff fd62 	bl	8000bf8 <LCD_RD_DATA>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	4b97      	ldr	r3, [pc, #604]	@ (8001398 <lcd_init+0x2b8>)
 800113a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800113c:	4b96      	ldr	r3, [pc, #600]	@ (8001398 <lcd_init+0x2b8>)
 800113e:	889b      	ldrh	r3, [r3, #4]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b29a      	uxth	r2, r3
 8001144:	4b94      	ldr	r3, [pc, #592]	@ (8001398 <lcd_init+0x2b8>)
 8001146:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001148:	f7ff fd56 	bl	8000bf8 <LCD_RD_DATA>
 800114c:	4603      	mov	r3, r0
 800114e:	461a      	mov	r2, r3
 8001150:	4b91      	ldr	r3, [pc, #580]	@ (8001398 <lcd_init+0x2b8>)
 8001152:	889b      	ldrh	r3, [r3, #4]
 8001154:	4313      	orrs	r3, r2
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b8f      	ldr	r3, [pc, #572]	@ (8001398 <lcd_init+0x2b8>)
 800115a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 800115c:	20cf      	movs	r0, #207	@ 0xcf
 800115e:	f7ff fd2b 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff fd38 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001168:	20c1      	movs	r0, #193	@ 0xc1
 800116a:	f7ff fd35 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 800116e:	2030      	movs	r0, #48	@ 0x30
 8001170:	f7ff fd32 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001174:	20ed      	movs	r0, #237	@ 0xed
 8001176:	f7ff fd1f 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 800117a:	2064      	movs	r0, #100	@ 0x64
 800117c:	f7ff fd2c 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001180:	2003      	movs	r0, #3
 8001182:	f7ff fd29 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001186:	2012      	movs	r0, #18
 8001188:	f7ff fd26 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 800118c:	2081      	movs	r0, #129	@ 0x81
 800118e:	f7ff fd23 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001192:	20e8      	movs	r0, #232	@ 0xe8
 8001194:	f7ff fd10 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001198:	2085      	movs	r0, #133	@ 0x85
 800119a:	f7ff fd1d 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 800119e:	2010      	movs	r0, #16
 80011a0:	f7ff fd1a 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 80011a4:	207a      	movs	r0, #122	@ 0x7a
 80011a6:	f7ff fd17 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 80011aa:	20cb      	movs	r0, #203	@ 0xcb
 80011ac:	f7ff fd04 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 80011b0:	2039      	movs	r0, #57	@ 0x39
 80011b2:	f7ff fd11 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 80011b6:	202c      	movs	r0, #44	@ 0x2c
 80011b8:	f7ff fd0e 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fd0b 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 80011c2:	2034      	movs	r0, #52	@ 0x34
 80011c4:	f7ff fd08 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 80011c8:	2002      	movs	r0, #2
 80011ca:	f7ff fd05 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 80011ce:	20f7      	movs	r0, #247	@ 0xf7
 80011d0:	f7ff fcf2 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 80011d4:	2020      	movs	r0, #32
 80011d6:	f7ff fcff 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 80011da:	20ea      	movs	r0, #234	@ 0xea
 80011dc:	f7ff fcec 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011e0:	2000      	movs	r0, #0
 80011e2:	f7ff fcf9 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f7ff fcf6 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80011ec:	20c0      	movs	r0, #192	@ 0xc0
 80011ee:	f7ff fce3 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80011f2:	201b      	movs	r0, #27
 80011f4:	f7ff fcf0 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80011f8:	20c1      	movs	r0, #193	@ 0xc1
 80011fa:	f7ff fcdd 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80011fe:	2001      	movs	r0, #1
 8001200:	f7ff fcea 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001204:	20c5      	movs	r0, #197	@ 0xc5
 8001206:	f7ff fcd7 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 800120a:	2030      	movs	r0, #48	@ 0x30
 800120c:	f7ff fce4 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001210:	2030      	movs	r0, #48	@ 0x30
 8001212:	f7ff fce1 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001216:	20c7      	movs	r0, #199	@ 0xc7
 8001218:	f7ff fcce 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 800121c:	20b7      	movs	r0, #183	@ 0xb7
 800121e:	f7ff fcdb 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001222:	2036      	movs	r0, #54	@ 0x36
 8001224:	f7ff fcc8 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 8001228:	2008      	movs	r0, #8
 800122a:	f7ff fcd5 	bl	8000bd8 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 800122e:	203a      	movs	r0, #58	@ 0x3a
 8001230:	f7ff fcc2 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001234:	2055      	movs	r0, #85	@ 0x55
 8001236:	f7ff fccf 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 800123a:	20b1      	movs	r0, #177	@ 0xb1
 800123c:	f7ff fcbc 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff fcc9 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001246:	201a      	movs	r0, #26
 8001248:	f7ff fcc6 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 800124c:	20b6      	movs	r0, #182	@ 0xb6
 800124e:	f7ff fcb3 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001252:	200a      	movs	r0, #10
 8001254:	f7ff fcc0 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001258:	20a2      	movs	r0, #162	@ 0xa2
 800125a:	f7ff fcbd 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 800125e:	20f2      	movs	r0, #242	@ 0xf2
 8001260:	f7ff fcaa 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff fcb7 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 800126a:	2026      	movs	r0, #38	@ 0x26
 800126c:	f7ff fca4 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001270:	2001      	movs	r0, #1
 8001272:	f7ff fcb1 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001276:	20e0      	movs	r0, #224	@ 0xe0
 8001278:	f7ff fc9e 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 800127c:	200f      	movs	r0, #15
 800127e:	f7ff fcab 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001282:	202a      	movs	r0, #42	@ 0x2a
 8001284:	f7ff fca8 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001288:	2028      	movs	r0, #40	@ 0x28
 800128a:	f7ff fca5 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800128e:	2008      	movs	r0, #8
 8001290:	f7ff fca2 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001294:	200e      	movs	r0, #14
 8001296:	f7ff fc9f 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 800129a:	2008      	movs	r0, #8
 800129c:	f7ff fc9c 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 80012a0:	2054      	movs	r0, #84	@ 0x54
 80012a2:	f7ff fc99 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 80012a6:	20a9      	movs	r0, #169	@ 0xa9
 80012a8:	f7ff fc96 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 80012ac:	2043      	movs	r0, #67	@ 0x43
 80012ae:	f7ff fc93 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 80012b2:	200a      	movs	r0, #10
 80012b4:	f7ff fc90 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012b8:	200f      	movs	r0, #15
 80012ba:	f7ff fc8d 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012be:	2000      	movs	r0, #0
 80012c0:	f7ff fc8a 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fc87 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f7ff fc84 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012d0:	2000      	movs	r0, #0
 80012d2:	f7ff fc81 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 80012d6:	20e1      	movs	r0, #225	@ 0xe1
 80012d8:	f7ff fc6e 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff fc7b 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 80012e2:	2015      	movs	r0, #21
 80012e4:	f7ff fc78 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80012e8:	2017      	movs	r0, #23
 80012ea:	f7ff fc75 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80012ee:	2007      	movs	r0, #7
 80012f0:	f7ff fc72 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80012f4:	2011      	movs	r0, #17
 80012f6:	f7ff fc6f 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80012fa:	2006      	movs	r0, #6
 80012fc:	f7ff fc6c 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001300:	202b      	movs	r0, #43	@ 0x2b
 8001302:	f7ff fc69 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001306:	2056      	movs	r0, #86	@ 0x56
 8001308:	f7ff fc66 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 800130c:	203c      	movs	r0, #60	@ 0x3c
 800130e:	f7ff fc63 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001312:	2005      	movs	r0, #5
 8001314:	f7ff fc60 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001318:	2010      	movs	r0, #16
 800131a:	f7ff fc5d 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 800131e:	200f      	movs	r0, #15
 8001320:	f7ff fc5a 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001324:	203f      	movs	r0, #63	@ 0x3f
 8001326:	f7ff fc57 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 800132a:	203f      	movs	r0, #63	@ 0x3f
 800132c:	f7ff fc54 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001330:	200f      	movs	r0, #15
 8001332:	f7ff fc51 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001336:	202b      	movs	r0, #43	@ 0x2b
 8001338:	f7ff fc3e 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff fc4b 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001342:	2000      	movs	r0, #0
 8001344:	f7ff fc48 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff fc45 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 800134e:	203f      	movs	r0, #63	@ 0x3f
 8001350:	f7ff fc42 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001354:	202a      	movs	r0, #42	@ 0x2a
 8001356:	f7ff fc2f 	bl	8000bb8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fc3c 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fc39 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff fc36 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 800136c:	20ef      	movs	r0, #239	@ 0xef
 800136e:	f7ff fc33 	bl	8000bd8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001372:	2011      	movs	r0, #17
 8001374:	f7ff fc20 	bl	8000bb8 <LCD_WR_REG>
	HAL_Delay(120);
 8001378:	2078      	movs	r0, #120	@ 0x78
 800137a:	f001 fe0b 	bl	8002f94 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 800137e:	2029      	movs	r0, #41	@ 0x29
 8001380:	f7ff fc1a 	bl	8000bb8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001384:	2201      	movs	r2, #1
 8001386:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800138a:	4804      	ldr	r0, [pc, #16]	@ (800139c <lcd_init+0x2bc>)
 800138c:	f002 f966 	bl	800365c <HAL_GPIO_WritePin>
}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40020800 	.word	0x40020800
 8001398:	2000010c 	.word	0x2000010c
 800139c:	40020000 	.word	0x40020000

080013a0 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b08b      	sub	sp, #44	@ 0x2c
 80013a4:	af04      	add	r7, sp, #16
 80013a6:	60ba      	str	r2, [r7, #8]
 80013a8:	461a      	mov	r2, r3
 80013aa:	4603      	mov	r3, r0
 80013ac:	81fb      	strh	r3, [r7, #14]
 80013ae:	460b      	mov	r3, r1
 80013b0:	81bb      	strh	r3, [r7, #12]
 80013b2:	4613      	mov	r3, r2
 80013b4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80013be:	e048      	b.n	8001452 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d145      	bne.n	8001452 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80013c6:	89fa      	ldrh	r2, [r7, #14]
 80013c8:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <lcd_ShowStr+0xc4>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	4619      	mov	r1, r3
 80013ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013d2:	085b      	lsrs	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	1acb      	subs	r3, r1, r3
 80013d8:	429a      	cmp	r2, r3
 80013da:	dc3f      	bgt.n	800145c <lcd_ShowStr+0xbc>
 80013dc:	89ba      	ldrh	r2, [r7, #12]
 80013de:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <lcd_ShowStr+0xc4>)
 80013e0:	885b      	ldrh	r3, [r3, #2]
 80013e2:	4619      	mov	r1, r3
 80013e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013e8:	1acb      	subs	r3, r1, r3
 80013ea:	429a      	cmp	r2, r3
 80013ec:	dc36      	bgt.n	800145c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b80      	cmp	r3, #128	@ 0x80
 80013f4:	d902      	bls.n	80013fc <lcd_ShowStr+0x5c>
 80013f6:	2301      	movs	r3, #1
 80013f8:	75fb      	strb	r3, [r7, #23]
 80013fa:	e02a      	b.n	8001452 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b0d      	cmp	r3, #13
 8001402:	d10b      	bne.n	800141c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8001404:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001408:	b29a      	uxth	r2, r3
 800140a:	89bb      	ldrh	r3, [r7, #12]
 800140c:	4413      	add	r3, r2
 800140e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8001410:	8abb      	ldrh	r3, [r7, #20]
 8001412:	81fb      	strh	r3, [r7, #14]
					str++;
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	3301      	adds	r3, #1
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	e017      	b.n	800144c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	781a      	ldrb	r2, [r3, #0]
 8001420:	88fc      	ldrh	r4, [r7, #6]
 8001422:	89b9      	ldrh	r1, [r7, #12]
 8001424:	89f8      	ldrh	r0, [r7, #14]
 8001426:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	4623      	mov	r3, r4
 8001438:	f7ff fcc4 	bl	8000dc4 <lcd_ShowChar>
					x+=sizey/2;
 800143c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001440:	085b      	lsrs	r3, r3, #1
 8001442:	b2db      	uxtb	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	89fb      	ldrh	r3, [r7, #14]
 8001448:	4413      	add	r3, r2
 800144a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3301      	adds	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1b2      	bne.n	80013c0 <lcd_ShowStr+0x20>
 800145a:	e000      	b.n	800145e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800145c:	bf00      	nop
			}
		}
	}
}
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd90      	pop	{r4, r7, pc}
 8001464:	2000010c 	.word	0x2000010c

08001468 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800146c:	2201      	movs	r2, #1
 800146e:	2140      	movs	r1, #64	@ 0x40
 8001470:	4802      	ldr	r0, [pc, #8]	@ (800147c <led7_init+0x14>)
 8001472:	f002 f8f3 	bl	800365c <HAL_GPIO_WritePin>
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40021800 	.word	0x40021800

08001480 <led7_Scan>:

void led7_Scan(){
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001484:	4b3f      	ldr	r3, [pc, #252]	@ (8001584 <led7_Scan+0x104>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	b29a      	uxth	r2, r3
 800148c:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <led7_Scan+0x104>)
 800148e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001490:	4b3d      	ldr	r3, [pc, #244]	@ (8001588 <led7_Scan+0x108>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a3d      	ldr	r2, [pc, #244]	@ (800158c <led7_Scan+0x10c>)
 8001496:	5cd3      	ldrb	r3, [r2, r3]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b21a      	sxth	r2, r3
 800149c:	4b39      	ldr	r3, [pc, #228]	@ (8001584 <led7_Scan+0x104>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b21b      	sxth	r3, r3
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	4b36      	ldr	r3, [pc, #216]	@ (8001584 <led7_Scan+0x104>)
 80014aa:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 80014ac:	4b36      	ldr	r3, [pc, #216]	@ (8001588 <led7_Scan+0x108>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d847      	bhi.n	8001544 <led7_Scan+0xc4>
 80014b4:	a201      	add	r2, pc, #4	@ (adr r2, 80014bc <led7_Scan+0x3c>)
 80014b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ba:	bf00      	nop
 80014bc:	080014cd 	.word	0x080014cd
 80014c0:	080014eb 	.word	0x080014eb
 80014c4:	08001509 	.word	0x08001509
 80014c8:	08001527 	.word	0x08001527
	case 0:
		spi_buffer |= 0x00b0;
 80014cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001584 <led7_Scan+0x104>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001584 <led7_Scan+0x104>)
 80014d8:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 80014da:	4b2a      	ldr	r3, [pc, #168]	@ (8001584 <led7_Scan+0x104>)
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b27      	ldr	r3, [pc, #156]	@ (8001584 <led7_Scan+0x104>)
 80014e6:	801a      	strh	r2, [r3, #0]
		break;
 80014e8:	e02d      	b.n	8001546 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 80014ea:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <led7_Scan+0x104>)
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <led7_Scan+0x104>)
 80014f6:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80014f8:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <led7_Scan+0x104>)
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	f023 0320 	bic.w	r3, r3, #32
 8001500:	b29a      	uxth	r2, r3
 8001502:	4b20      	ldr	r3, [pc, #128]	@ (8001584 <led7_Scan+0x104>)
 8001504:	801a      	strh	r2, [r3, #0]
		break;
 8001506:	e01e      	b.n	8001546 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 8001508:	4b1e      	ldr	r3, [pc, #120]	@ (8001584 <led7_Scan+0x104>)
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8001510:	b29a      	uxth	r2, r3
 8001512:	4b1c      	ldr	r3, [pc, #112]	@ (8001584 <led7_Scan+0x104>)
 8001514:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 8001516:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <led7_Scan+0x104>)
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	f023 0310 	bic.w	r3, r3, #16
 800151e:	b29a      	uxth	r2, r3
 8001520:	4b18      	ldr	r3, [pc, #96]	@ (8001584 <led7_Scan+0x104>)
 8001522:	801a      	strh	r2, [r3, #0]
		break;
 8001524:	e00f      	b.n	8001546 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 8001526:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <led7_Scan+0x104>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800152e:	b29a      	uxth	r2, r3
 8001530:	4b14      	ldr	r3, [pc, #80]	@ (8001584 <led7_Scan+0x104>)
 8001532:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 8001534:	4b13      	ldr	r3, [pc, #76]	@ (8001584 <led7_Scan+0x104>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800153c:	b29a      	uxth	r2, r3
 800153e:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <led7_Scan+0x104>)
 8001540:	801a      	strh	r2, [r3, #0]
		break;
 8001542:	e000      	b.n	8001546 <led7_Scan+0xc6>
	default:
		break;
 8001544:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <led7_Scan+0x108>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	425a      	negs	r2, r3
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	f002 0203 	and.w	r2, r2, #3
 8001556:	bf58      	it	pl
 8001558:	4253      	negpl	r3, r2
 800155a:	4a0b      	ldr	r2, [pc, #44]	@ (8001588 <led7_Scan+0x108>)
 800155c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2140      	movs	r1, #64	@ 0x40
 8001562:	480b      	ldr	r0, [pc, #44]	@ (8001590 <led7_Scan+0x110>)
 8001564:	f002 f87a 	bl	800365c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001568:	2301      	movs	r3, #1
 800156a:	2202      	movs	r2, #2
 800156c:	4905      	ldr	r1, [pc, #20]	@ (8001584 <led7_Scan+0x104>)
 800156e:	4809      	ldr	r0, [pc, #36]	@ (8001594 <led7_Scan+0x114>)
 8001570:	f003 ff01 	bl	8005376 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001574:	2201      	movs	r2, #1
 8001576:	2140      	movs	r1, #64	@ 0x40
 8001578:	4805      	ldr	r0, [pc, #20]	@ (8001590 <led7_Scan+0x110>)
 800157a:	f002 f86f 	bl	800365c <HAL_GPIO_WritePin>
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000004 	.word	0x20000004
 8001588:	20000114 	.word	0x20000114
 800158c:	20000000 	.word	0x20000000
 8001590:	40021800 	.word	0x40021800
 8001594:	2000012c 	.word	0x2000012c

08001598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800159c:	f001 fc88 	bl	8002eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015a0:	f000 f824 	bl	80015ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015a4:	f7ff f99a 	bl	80008dc <MX_GPIO_Init>
  MX_TIM2_Init();
 80015a8:	f001 fb10 	bl	8002bcc <MX_TIM2_Init>
  MX_SPI1_Init();
 80015ac:	f001 fa12 	bl	80029d4 <MX_SPI1_Init>
  MX_FSMC_Init();
 80015b0:	f7ff f8c4 	bl	800073c <MX_FSMC_Init>
  MX_I2C1_Init();
 80015b4:	f7ff fa8a 	bl	8000acc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80015b8:	f001 fb98 	bl	8002cec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 80015bc:	f000 f880 	bl	80016c0 <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(BLACK);
 80015c0:	2000      	movs	r0, #0
 80015c2:	f7ff fb77 	bl	8000cb4 <lcd_Clear>
  updateTime();
 80015c6:	f000 f89d 	bl	8001704 <updateTime>
  while (1)
  {
    /* USER CODE END WHILE */
	  while(!flag_timer2);
 80015ca:	bf00      	nop
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <main+0x50>)
 80015ce:	881b      	ldrh	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d0fb      	beq.n	80015cc <main+0x34>
	  flag_timer2 = 0;
 80015d4:	4b04      	ldr	r3, [pc, #16]	@ (80015e8 <main+0x50>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 80015da:	f7fe ff79 	bl	80004d0 <button_Scan>
	  ds3231_ReadTime();
 80015de:	f7ff f849 	bl	8000674 <ds3231_ReadTime>

	  runSystem();
 80015e2:	f000 f8cf 	bl	8001784 <runSystem>
	  while(!flag_timer2);
 80015e6:	e7f0      	b.n	80015ca <main+0x32>
 80015e8:	20000124 	.word	0x20000124

080015ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b094      	sub	sp, #80	@ 0x50
 80015f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015f2:	f107 0320 	add.w	r3, r7, #32
 80015f6:	2230      	movs	r2, #48	@ 0x30
 80015f8:	2100      	movs	r1, #0
 80015fa:	4618      	mov	r0, r3
 80015fc:	f006 f9f0 	bl	80079e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001610:	2300      	movs	r3, #0
 8001612:	60bb      	str	r3, [r7, #8]
 8001614:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <SystemClock_Config+0xcc>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	4a27      	ldr	r2, [pc, #156]	@ (80016b8 <SystemClock_Config+0xcc>)
 800161a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800161e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001620:	4b25      	ldr	r3, [pc, #148]	@ (80016b8 <SystemClock_Config+0xcc>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]
 8001630:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <SystemClock_Config+0xd0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a21      	ldr	r2, [pc, #132]	@ (80016bc <SystemClock_Config+0xd0>)
 8001636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800163a:	6013      	str	r3, [r2, #0]
 800163c:	4b1f      	ldr	r3, [pc, #124]	@ (80016bc <SystemClock_Config+0xd0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001644:	607b      	str	r3, [r7, #4]
 8001646:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001648:	2302      	movs	r3, #2
 800164a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800164c:	2301      	movs	r3, #1
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001650:	2310      	movs	r3, #16
 8001652:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001654:	2302      	movs	r3, #2
 8001656:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001658:	2300      	movs	r3, #0
 800165a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800165c:	2308      	movs	r3, #8
 800165e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001660:	23a8      	movs	r3, #168	@ 0xa8
 8001662:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001664:	2302      	movs	r3, #2
 8001666:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001668:	2304      	movs	r3, #4
 800166a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166c:	f107 0320 	add.w	r3, r7, #32
 8001670:	4618      	mov	r0, r3
 8001672:	f003 f95f 	bl	8004934 <HAL_RCC_OscConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800167c:	f001 f954 	bl	8002928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001680:	230f      	movs	r3, #15
 8001682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001684:	2302      	movs	r3, #2
 8001686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800168c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001690:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001692:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001696:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	2105      	movs	r1, #5
 800169e:	4618      	mov	r0, r3
 80016a0:	f003 fbc0 	bl	8004e24 <HAL_RCC_ClockConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016aa:	f001 f93d 	bl	8002928 <Error_Handler>
  }
}
 80016ae:	bf00      	nop
 80016b0:	3750      	adds	r7, #80	@ 0x50
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40007000 	.word	0x40007000

080016c0 <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2120      	movs	r1, #32
 80016c8:	480d      	ldr	r0, [pc, #52]	@ (8001700 <system_init+0x40>)
 80016ca:	f001 ffc7 	bl	800365c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2140      	movs	r1, #64	@ 0x40
 80016d2:	480b      	ldr	r0, [pc, #44]	@ (8001700 <system_init+0x40>)
 80016d4:	f001 ffc2 	bl	800365c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2110      	movs	r1, #16
 80016dc:	4808      	ldr	r0, [pc, #32]	@ (8001700 <system_init+0x40>)
 80016de:	f001 ffbd 	bl	800365c <HAL_GPIO_WritePin>
	  timer_init();
 80016e2:	f001 f927 	bl	8002934 <timer_init>
	  led7_init();
 80016e6:	f7ff febf 	bl	8001468 <led7_init>
	  button_init();
 80016ea:	f7fe fee5 	bl	80004b8 <button_init>
	  lcd_init();
 80016ee:	f7ff fcf7 	bl	80010e0 <lcd_init>
	  ds3231_init();
 80016f2:	f7fe ff59 	bl	80005a8 <ds3231_init>
	  setTimer2(50);
 80016f6:	2032      	movs	r0, #50	@ 0x32
 80016f8:	f001 f926 	bl	8002948 <setTimer2>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40021000 	.word	0x40021000

08001704 <updateTime>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void updateTime(){
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 8001708:	2118      	movs	r1, #24
 800170a:	2006      	movs	r0, #6
 800170c:	f7fe ff90 	bl	8000630 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 8001710:	210b      	movs	r1, #11
 8001712:	2005      	movs	r0, #5
 8001714:	f7fe ff8c 	bl	8000630 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 29);
 8001718:	211d      	movs	r1, #29
 800171a:	2004      	movs	r0, #4
 800171c:	f7fe ff88 	bl	8000630 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8001720:	2106      	movs	r1, #6
 8001722:	2003      	movs	r0, #3
 8001724:	f7fe ff84 	bl	8000630 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 9);
 8001728:	2109      	movs	r1, #9
 800172a:	2002      	movs	r0, #2
 800172c:	f7fe ff80 	bl	8000630 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 10);
 8001730:	210a      	movs	r1, #10
 8001732:	2001      	movs	r0, #1
 8001734:	f7fe ff7c 	bl	8000630 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 00);
 8001738:	2100      	movs	r1, #0
 800173a:	2000      	movs	r0, #0
 800173c:	f7fe ff78 	bl	8000630 <ds3231_Write>
}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}

08001744 <isButtonUp>:

uint8_t isButtonUp()
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
    if (button_count[3] == 1)
 8001748:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <isButtonUp+0x1c>)
 800174a:	88db      	ldrh	r3, [r3, #6]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <isButtonUp+0x10>
        return 1;
 8001750:	2301      	movs	r3, #1
 8001752:	e000      	b.n	8001756 <isButtonUp+0x12>
    else
        return 0;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	20000030 	.word	0x20000030

08001764 <isButtonDown>:
uint8_t isButtonDown()
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
    if (button_count[7] == 1)
 8001768:	4b05      	ldr	r3, [pc, #20]	@ (8001780 <isButtonDown+0x1c>)
 800176a:	89db      	ldrh	r3, [r3, #14]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <isButtonDown+0x10>
        return 1;
 8001770:	2301      	movs	r3, #1
 8001772:	e000      	b.n	8001776 <isButtonDown+0x12>
    else
        return 0;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	20000030 	.word	0x20000030

08001784 <runSystem>:
//uint8_t systemState = 0; // 0: INIT, 1: NORMAL, 2: MODIFY, 3: ALARM
//uint8_t modifyState = 0; // 0: modify HOUR; 1: modify MIN, 2: modify SEC
//uint8_t count_blink = 0;
//uint8_t blink_state = 0;
uint8_t temp_time;
void runSystem(){
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af04      	add	r7, sp, #16
	switch(systemState){
 800178a:	4b77      	ldr	r3, [pc, #476]	@ (8001968 <runSystem+0x1e4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b08      	cmp	r3, #8
 8001790:	f201 8037 	bhi.w	8002802 <runSystem+0x107e>
 8001794:	a201      	add	r2, pc, #4	@ (adr r2, 800179c <runSystem+0x18>)
 8001796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179a:	bf00      	nop
 800179c:	080017c1 	.word	0x080017c1
 80017a0:	08001809 	.word	0x08001809
 80017a4:	080018e7 	.word	0x080018e7
 80017a8:	08001b8d 	.word	0x08001b8d
 80017ac:	08001e2d 	.word	0x08001e2d
 80017b0:	080020cb 	.word	0x080020cb
 80017b4:	08002371 	.word	0x08002371
 80017b8:	08002803 	.word	0x08002803
 80017bc:	08002609 	.word	0x08002609
	case INIT:
		ds3231_Write(ADDRESS_YEAR, 24);
 80017c0:	2118      	movs	r1, #24
 80017c2:	2006      	movs	r0, #6
 80017c4:	f7fe ff34 	bl	8000630 <ds3231_Write>
		ds3231_Write(ADDRESS_MONTH, 11);
 80017c8:	210b      	movs	r1, #11
 80017ca:	2005      	movs	r0, #5
 80017cc:	f7fe ff30 	bl	8000630 <ds3231_Write>
		ds3231_Write(ADDRESS_DATE, 28);
 80017d0:	211c      	movs	r1, #28
 80017d2:	2004      	movs	r0, #4
 80017d4:	f7fe ff2c 	bl	8000630 <ds3231_Write>
		ds3231_Write(ADDRESS_DAY, 5);
 80017d8:	2105      	movs	r1, #5
 80017da:	2003      	movs	r0, #3
 80017dc:	f7fe ff28 	bl	8000630 <ds3231_Write>
		ds3231_Write(ADDRESS_HOUR, 10);
 80017e0:	210a      	movs	r1, #10
 80017e2:	2002      	movs	r0, #2
 80017e4:	f7fe ff24 	bl	8000630 <ds3231_Write>
		ds3231_Write(ADDRESS_MIN, 47);
 80017e8:	212f      	movs	r1, #47	@ 0x2f
 80017ea:	2001      	movs	r0, #1
 80017ec:	f7fe ff20 	bl	8000630 <ds3231_Write>
		ds3231_Write(ADDRESS_SEC, 50);
 80017f0:	2132      	movs	r1, #50	@ 0x32
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7fe ff1c 	bl	8000630 <ds3231_Write>
		systemState = NORMAL;
 80017f8:	4b5b      	ldr	r3, [pc, #364]	@ (8001968 <runSystem+0x1e4>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff fa58 	bl	8000cb4 <lcd_Clear>
		break;
 8001804:	f000 bffd 	b.w	8002802 <runSystem+0x107e>
	case NORMAL:
		ds3231_ReadTime();
 8001808:	f7fe ff34 	bl	8000674 <ds3231_ReadTime>
		displayTime();
 800180c:	f001 f80e 	bl	800282c <displayTime>
		if(button_count[0] == 1){
 8001810:	4b56      	ldr	r3, [pc, #344]	@ (800196c <runSystem+0x1e8>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d109      	bne.n	800182c <runSystem+0xa8>
			systemState = MODIFY_HOUR;
 8001818:	4b53      	ldr	r3, [pc, #332]	@ (8001968 <runSystem+0x1e4>)
 800181a:	2202      	movs	r2, #2
 800181c:	601a      	str	r2, [r3, #0]
			temp_time = ds3231_hours;
 800181e:	4b54      	ldr	r3, [pc, #336]	@ (8001970 <runSystem+0x1ec>)
 8001820:	781a      	ldrb	r2, [r3, #0]
 8001822:	4b54      	ldr	r3, [pc, #336]	@ (8001974 <runSystem+0x1f0>)
 8001824:	701a      	strb	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001826:	2000      	movs	r0, #0
 8001828:	f7ff fa44 	bl	8000cb4 <lcd_Clear>
		}
		if(ds3231_hours == alarm_hour && ds3231_min == alarm_min && set_alarm_flag == 1){
 800182c:	4b50      	ldr	r3, [pc, #320]	@ (8001970 <runSystem+0x1ec>)
 800182e:	781a      	ldrb	r2, [r3, #0]
 8001830:	4b51      	ldr	r3, [pc, #324]	@ (8001978 <runSystem+0x1f4>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	f040 87d9 	bne.w	80027ec <runSystem+0x1068>
 800183a:	4b50      	ldr	r3, [pc, #320]	@ (800197c <runSystem+0x1f8>)
 800183c:	781a      	ldrb	r2, [r3, #0]
 800183e:	4b50      	ldr	r3, [pc, #320]	@ (8001980 <runSystem+0x1fc>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	f040 87d2 	bne.w	80027ec <runSystem+0x1068>
 8001848:	4b4e      	ldr	r3, [pc, #312]	@ (8001984 <runSystem+0x200>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	f040 87cd 	bne.w	80027ec <runSystem+0x1068>
			if(ds3231_sec >= 0 && ds3231_sec <= 15){
 8001852:	4b4d      	ldr	r3, [pc, #308]	@ (8001988 <runSystem+0x204>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b0f      	cmp	r3, #15
 8001858:	d838      	bhi.n	80018cc <runSystem+0x148>
				count_blink = count_blink + 1;
 800185a:	4b4c      	ldr	r3, [pc, #304]	@ (800198c <runSystem+0x208>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	3301      	adds	r3, #1
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4b4a      	ldr	r3, [pc, #296]	@ (800198c <runSystem+0x208>)
 8001864:	701a      	strb	r2, [r3, #0]
				if(count_blink % 10 == 0){
 8001866:	4b49      	ldr	r3, [pc, #292]	@ (800198c <runSystem+0x208>)
 8001868:	781a      	ldrb	r2, [r3, #0]
 800186a:	4b49      	ldr	r3, [pc, #292]	@ (8001990 <runSystem+0x20c>)
 800186c:	fba3 1302 	umull	r1, r3, r3, r2
 8001870:	08d9      	lsrs	r1, r3, #3
 8001872:	460b      	mov	r3, r1
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	f040 87b4 	bne.w	80027ec <runSystem+0x1068>
					if(blink_state == 0){
 8001884:	4b43      	ldr	r3, [pc, #268]	@ (8001994 <runSystem+0x210>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10c      	bne.n	80018a6 <runSystem+0x122>
						lcd_Fill(20, 30, 150, 100, BLACK);
 800188c:	2300      	movs	r3, #0
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2364      	movs	r3, #100	@ 0x64
 8001892:	2296      	movs	r2, #150	@ 0x96
 8001894:	211e      	movs	r1, #30
 8001896:	2014      	movs	r0, #20
 8001898:	f7ff fa46 	bl	8000d28 <lcd_Fill>
						blink_state = 1;
 800189c:	4b3d      	ldr	r3, [pc, #244]	@ (8001994 <runSystem+0x210>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
			}else{
				lcd_Fill(20, 30, 150, 100, BLACK);
				set_alarm_flag = 0;
			}
		}
		break;
 80018a2:	f000 bfa3 	b.w	80027ec <runSystem+0x1068>
						lcd_ShowStr(20, 30, "TIME UP!!!", WHITE, RED, 24, 0);
 80018a6:	2300      	movs	r3, #0
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	2318      	movs	r3, #24
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018b8:	4a37      	ldr	r2, [pc, #220]	@ (8001998 <runSystem+0x214>)
 80018ba:	211e      	movs	r1, #30
 80018bc:	2014      	movs	r0, #20
 80018be:	f7ff fd6f 	bl	80013a0 <lcd_ShowStr>
						blink_state = 0;
 80018c2:	4b34      	ldr	r3, [pc, #208]	@ (8001994 <runSystem+0x210>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
		break;
 80018c8:	f000 bf90 	b.w	80027ec <runSystem+0x1068>
				lcd_Fill(20, 30, 150, 100, BLACK);
 80018cc:	2300      	movs	r3, #0
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2364      	movs	r3, #100	@ 0x64
 80018d2:	2296      	movs	r2, #150	@ 0x96
 80018d4:	211e      	movs	r1, #30
 80018d6:	2014      	movs	r0, #20
 80018d8:	f7ff fa26 	bl	8000d28 <lcd_Fill>
				set_alarm_flag = 0;
 80018dc:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <runSystem+0x200>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
		break;
 80018e2:	f000 bf83 	b.w	80027ec <runSystem+0x1068>
	case MODIFY_HOUR:
		lcd_ShowStr(20, 30, "Modify HOUR", WHITE, BLUE, 24, 0);
 80018e6:	2300      	movs	r3, #0
 80018e8:	9302      	str	r3, [sp, #8]
 80018ea:	2318      	movs	r3, #24
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	231f      	movs	r3, #31
 80018f0:	9300      	str	r3, [sp, #0]
 80018f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018f6:	4a29      	ldr	r2, [pc, #164]	@ (800199c <runSystem+0x218>)
 80018f8:	211e      	movs	r1, #30
 80018fa:	2014      	movs	r0, #20
 80018fc:	f7ff fd50 	bl	80013a0 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001900:	4b21      	ldr	r3, [pc, #132]	@ (8001988 <runSystem+0x204>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	4619      	mov	r1, r3
 8001906:	2000      	movs	r0, #0
 8001908:	f7fe fe92 	bl	8000630 <ds3231_Write>
		count_blink = count_blink + 1;
 800190c:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <runSystem+0x208>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b1d      	ldr	r3, [pc, #116]	@ (800198c <runSystem+0x208>)
 8001916:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 8001918:	4b1c      	ldr	r3, [pc, #112]	@ (800198c <runSystem+0x208>)
 800191a:	781a      	ldrb	r2, [r3, #0]
 800191c:	4b1c      	ldr	r3, [pc, #112]	@ (8001990 <runSystem+0x20c>)
 800191e:	fba3 1302 	umull	r1, r3, r3, r2
 8001922:	08d9      	lsrs	r1, r3, #3
 8001924:	460b      	mov	r3, r1
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d106      	bne.n	8001942 <runSystem+0x1be>
			blink_state ^= 1;
 8001934:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <runSystem+0x210>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	f083 0301 	eor.w	r3, r3, #1
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <runSystem+0x210>)
 8001940:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 8001942:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <runSystem+0x210>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d12c      	bne.n	80019a4 <runSystem+0x220>
			lcd_ShowStr(70, 100, "  ", GREEN, BLACK, 24, 0);
 800194a:	2300      	movs	r3, #0
 800194c:	9302      	str	r3, [sp, #8]
 800194e:	2318      	movs	r3, #24
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	2300      	movs	r3, #0
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800195a:	4a11      	ldr	r2, [pc, #68]	@ (80019a0 <runSystem+0x21c>)
 800195c:	2164      	movs	r1, #100	@ 0x64
 800195e:	2046      	movs	r0, #70	@ 0x46
 8001960:	f7ff fd1e 	bl	80013a0 <lcd_ShowStr>
 8001964:	e02d      	b.n	80019c2 <runSystem+0x23e>
 8001966:	bf00      	nop
 8001968:	20000118 	.word	0x20000118
 800196c:	20000030 	.word	0x20000030
 8001970:	2000005b 	.word	0x2000005b
 8001974:	20000123 	.word	0x20000123
 8001978:	2000011c 	.word	0x2000011c
 800197c:	2000005c 	.word	0x2000005c
 8001980:	2000011d 	.word	0x2000011d
 8001984:	20000120 	.word	0x20000120
 8001988:	2000005d 	.word	0x2000005d
 800198c:	2000011e 	.word	0x2000011e
 8001990:	cccccccd 	.word	0xcccccccd
 8001994:	2000011f 	.word	0x2000011f
 8001998:	08007a50 	.word	0x08007a50
 800199c:	08007a5c 	.word	0x08007a5c
 80019a0:	08007a68 	.word	0x08007a68
		}else{
			lcd_ShowIntNum(70, 100, temp_time, 2, GREEN, BLACK, 24);
 80019a4:	4b99      	ldr	r3, [pc, #612]	@ (8001c0c <runSystem+0x488>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	2318      	movs	r3, #24
 80019ac:	9302      	str	r3, [sp, #8]
 80019ae:	2300      	movs	r3, #0
 80019b0:	9301      	str	r3, [sp, #4]
 80019b2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2302      	movs	r3, #2
 80019ba:	2164      	movs	r1, #100	@ 0x64
 80019bc:	2046      	movs	r0, #70	@ 0x46
 80019be:	f7ff faed 	bl	8000f9c <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80019c2:	4b93      	ldr	r3, [pc, #588]	@ (8001c10 <runSystem+0x48c>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	2318      	movs	r3, #24
 80019ca:	9302      	str	r3, [sp, #8]
 80019cc:	2300      	movs	r3, #0
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2302      	movs	r3, #2
 80019d8:	2164      	movs	r1, #100	@ 0x64
 80019da:	206e      	movs	r0, #110	@ 0x6e
 80019dc:	f7ff fade 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80019e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001c14 <runSystem+0x490>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	2318      	movs	r3, #24
 80019e8:	9302      	str	r3, [sp, #8]
 80019ea:	2300      	movs	r3, #0
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	2302      	movs	r3, #2
 80019f6:	2164      	movs	r1, #100	@ 0x64
 80019f8:	2096      	movs	r0, #150	@ 0x96
 80019fa:	f7ff facf 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 80019fe:	4b86      	ldr	r3, [pc, #536]	@ (8001c18 <runSystem+0x494>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	2318      	movs	r3, #24
 8001a06:	9302      	str	r3, [sp, #8]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a10:	9300      	str	r3, [sp, #0]
 8001a12:	2302      	movs	r3, #2
 8001a14:	2182      	movs	r1, #130	@ 0x82
 8001a16:	2014      	movs	r0, #20
 8001a18:	f7ff fac0 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001a1c:	4b7f      	ldr	r3, [pc, #508]	@ (8001c1c <runSystem+0x498>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	2318      	movs	r3, #24
 8001a24:	9302      	str	r3, [sp, #8]
 8001a26:	2300      	movs	r3, #0
 8001a28:	9301      	str	r3, [sp, #4]
 8001a2a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	2302      	movs	r3, #2
 8001a32:	2182      	movs	r1, #130	@ 0x82
 8001a34:	2046      	movs	r0, #70	@ 0x46
 8001a36:	f7ff fab1 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001a3a:	4b79      	ldr	r3, [pc, #484]	@ (8001c20 <runSystem+0x49c>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	2318      	movs	r3, #24
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	2300      	movs	r3, #0
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	2302      	movs	r3, #2
 8001a50:	2182      	movs	r1, #130	@ 0x82
 8001a52:	206e      	movs	r0, #110	@ 0x6e
 8001a54:	f7ff faa2 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001a58:	4b72      	ldr	r3, [pc, #456]	@ (8001c24 <runSystem+0x4a0>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2318      	movs	r3, #24
 8001a60:	9302      	str	r3, [sp, #8]
 8001a62:	2300      	movs	r3, #0
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	2302      	movs	r3, #2
 8001a6e:	2182      	movs	r1, #130	@ 0x82
 8001a70:	2096      	movs	r0, #150	@ 0x96
 8001a72:	f7ff fa93 	bl	8000f9c <lcd_ShowIntNum>
		if(isButtonUp()){
 8001a76:	f7ff fe65 	bl	8001744 <isButtonUp>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00c      	beq.n	8001a9a <runSystem+0x316>
			temp_time++;
 8001a80:	4b62      	ldr	r3, [pc, #392]	@ (8001c0c <runSystem+0x488>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	4b60      	ldr	r3, [pc, #384]	@ (8001c0c <runSystem+0x488>)
 8001a8a:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 24){
 8001a8c:	4b5f      	ldr	r3, [pc, #380]	@ (8001c0c <runSystem+0x488>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b17      	cmp	r3, #23
 8001a92:	d902      	bls.n	8001a9a <runSystem+0x316>
				temp_time = 0;
 8001a94:	4b5d      	ldr	r3, [pc, #372]	@ (8001c0c <runSystem+0x488>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 8001a9a:	f7ff fe63 	bl	8001764 <isButtonDown>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00c      	beq.n	8001abe <runSystem+0x33a>
			temp_time--;
 8001aa4:	4b59      	ldr	r3, [pc, #356]	@ (8001c0c <runSystem+0x488>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b57      	ldr	r3, [pc, #348]	@ (8001c0c <runSystem+0x488>)
 8001aae:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8001ab0:	4b56      	ldr	r3, [pc, #344]	@ (8001c0c <runSystem+0x488>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d102      	bne.n	8001abe <runSystem+0x33a>
				temp_time = 0;
 8001ab8:	4b54      	ldr	r3, [pc, #336]	@ (8001c0c <runSystem+0x488>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 8001abe:	4b5a      	ldr	r3, [pc, #360]	@ (8001c28 <runSystem+0x4a4>)
 8001ac0:	88db      	ldrh	r3, [r3, #6]
 8001ac2:	2b27      	cmp	r3, #39	@ 0x27
 8001ac4:	d916      	bls.n	8001af4 <runSystem+0x370>
 8001ac6:	4b59      	ldr	r3, [pc, #356]	@ (8001c2c <runSystem+0x4a8>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d10f      	bne.n	8001af4 <runSystem+0x370>
			temp_time++;
 8001ad4:	4b4d      	ldr	r3, [pc, #308]	@ (8001c0c <runSystem+0x488>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b4b      	ldr	r3, [pc, #300]	@ (8001c0c <runSystem+0x488>)
 8001ade:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 24){
 8001ae0:	4b4a      	ldr	r3, [pc, #296]	@ (8001c0c <runSystem+0x488>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b17      	cmp	r3, #23
 8001ae6:	d902      	bls.n	8001aee <runSystem+0x36a>
				temp_time = 0;
 8001ae8:	4b48      	ldr	r3, [pc, #288]	@ (8001c0c <runSystem+0x488>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8001aee:	4b50      	ldr	r3, [pc, #320]	@ (8001c30 <runSystem+0x4ac>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 8001af4:	4b4c      	ldr	r3, [pc, #304]	@ (8001c28 <runSystem+0x4a4>)
 8001af6:	89db      	ldrh	r3, [r3, #14]
 8001af8:	2b27      	cmp	r3, #39	@ 0x27
 8001afa:	d916      	bls.n	8001b2a <runSystem+0x3a6>
 8001afc:	4b4b      	ldr	r3, [pc, #300]	@ (8001c2c <runSystem+0x4a8>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10f      	bne.n	8001b2a <runSystem+0x3a6>
			temp_time--;
 8001b0a:	4b40      	ldr	r3, [pc, #256]	@ (8001c0c <runSystem+0x488>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b3e      	ldr	r3, [pc, #248]	@ (8001c0c <runSystem+0x488>)
 8001b14:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8001b16:	4b3d      	ldr	r3, [pc, #244]	@ (8001c0c <runSystem+0x488>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <runSystem+0x3a0>
				temp_time = 0;
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c0c <runSystem+0x488>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8001b24:	4b42      	ldr	r3, [pc, #264]	@ (8001c30 <runSystem+0x4ac>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
		}

		if(button_count[12] == 1){
 8001b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c28 <runSystem+0x4a4>)
 8001b2c:	8b1b      	ldrh	r3, [r3, #24]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d115      	bne.n	8001b5e <runSystem+0x3da>
			ds3231_Write(ADDRESS_HOUR, temp_time);
 8001b32:	4b36      	ldr	r3, [pc, #216]	@ (8001c0c <runSystem+0x488>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	4619      	mov	r1, r3
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f7fe fd79 	bl	8000630 <ds3231_Write>
			count_blink = 0;
 8001b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c2c <runSystem+0x4a8>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8001b44:	4b3a      	ldr	r3, [pc, #232]	@ (8001c30 <runSystem+0x4ac>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_min;
 8001b4a:	4b31      	ldr	r3, [pc, #196]	@ (8001c10 <runSystem+0x48c>)
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c0c <runSystem+0x488>)
 8001b50:	701a      	strb	r2, [r3, #0]
			systemState = MODIFY_MIN;
 8001b52:	4b38      	ldr	r3, [pc, #224]	@ (8001c34 <runSystem+0x4b0>)
 8001b54:	2203      	movs	r2, #3
 8001b56:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f7ff f8ab 	bl	8000cb4 <lcd_Clear>
		}
		if(button_count[0] == 1){
 8001b5e:	4b32      	ldr	r3, [pc, #200]	@ (8001c28 <runSystem+0x4a4>)
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	f040 8644 	bne.w	80027f0 <runSystem+0x106c>
			count_blink = 0;
 8001b68:	4b30      	ldr	r3, [pc, #192]	@ (8001c2c <runSystem+0x4a8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8001b6e:	4b30      	ldr	r3, [pc, #192]	@ (8001c30 <runSystem+0x4ac>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_min;
 8001b74:	4b26      	ldr	r3, [pc, #152]	@ (8001c10 <runSystem+0x48c>)
 8001b76:	781a      	ldrb	r2, [r3, #0]
 8001b78:	4b24      	ldr	r3, [pc, #144]	@ (8001c0c <runSystem+0x488>)
 8001b7a:	701a      	strb	r2, [r3, #0]
			systemState = MODIFY_MIN;
 8001b7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001c34 <runSystem+0x4b0>)
 8001b7e:	2203      	movs	r2, #3
 8001b80:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7ff f896 	bl	8000cb4 <lcd_Clear>
		}
		break;
 8001b88:	f000 be32 	b.w	80027f0 <runSystem+0x106c>
	case MODIFY_MIN:
		lcd_ShowStr(20, 30, "Modify MIN", WHITE, BLUE, 24, 0);
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9302      	str	r3, [sp, #8]
 8001b90:	2318      	movs	r3, #24
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	231f      	movs	r3, #31
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b9c:	4a26      	ldr	r2, [pc, #152]	@ (8001c38 <runSystem+0x4b4>)
 8001b9e:	211e      	movs	r1, #30
 8001ba0:	2014      	movs	r0, #20
 8001ba2:	f7ff fbfd 	bl	80013a0 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <runSystem+0x490>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	4619      	mov	r1, r3
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7fe fd3f 	bl	8000630 <ds3231_Write>
		count_blink = count_blink + 1;
 8001bb2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c2c <runSystem+0x4a8>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4b1c      	ldr	r3, [pc, #112]	@ (8001c2c <runSystem+0x4a8>)
 8001bbc:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <runSystem+0x4a8>)
 8001bc0:	781a      	ldrb	r2, [r3, #0]
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <runSystem+0x4b8>)
 8001bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8001bc8:	08d9      	lsrs	r1, r3, #3
 8001bca:	460b      	mov	r3, r1
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <runSystem+0x464>
			blink_state ^= 1;
 8001bda:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <runSystem+0x4ac>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	f083 0301 	eor.w	r3, r3, #1
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b12      	ldr	r3, [pc, #72]	@ (8001c30 <runSystem+0x4ac>)
 8001be6:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 8001be8:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <runSystem+0x4ac>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d129      	bne.n	8001c44 <runSystem+0x4c0>
			lcd_ShowStr(110, 100, "  ", GREEN, BLACK, 24, 0);
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	9302      	str	r3, [sp, #8]
 8001bf4:	2318      	movs	r3, #24
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001c00:	4a0f      	ldr	r2, [pc, #60]	@ (8001c40 <runSystem+0x4bc>)
 8001c02:	2164      	movs	r1, #100	@ 0x64
 8001c04:	206e      	movs	r0, #110	@ 0x6e
 8001c06:	f7ff fbcb 	bl	80013a0 <lcd_ShowStr>
 8001c0a:	e02a      	b.n	8001c62 <runSystem+0x4de>
 8001c0c:	20000123 	.word	0x20000123
 8001c10:	2000005c 	.word	0x2000005c
 8001c14:	2000005d 	.word	0x2000005d
 8001c18:	2000005f 	.word	0x2000005f
 8001c1c:	2000005e 	.word	0x2000005e
 8001c20:	20000060 	.word	0x20000060
 8001c24:	20000061 	.word	0x20000061
 8001c28:	20000030 	.word	0x20000030
 8001c2c:	2000011e 	.word	0x2000011e
 8001c30:	2000011f 	.word	0x2000011f
 8001c34:	20000118 	.word	0x20000118
 8001c38:	08007a6c 	.word	0x08007a6c
 8001c3c:	cccccccd 	.word	0xcccccccd
 8001c40:	08007a68 	.word	0x08007a68
		}else{
			lcd_ShowIntNum(110, 100, temp_time, 2, GREEN, BLACK, 24);
 8001c44:	4b99      	ldr	r3, [pc, #612]	@ (8001eac <runSystem+0x728>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2318      	movs	r3, #24
 8001c4c:	9302      	str	r3, [sp, #8]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	2302      	movs	r3, #2
 8001c5a:	2164      	movs	r1, #100	@ 0x64
 8001c5c:	206e      	movs	r0, #110	@ 0x6e
 8001c5e:	f7ff f99d 	bl	8000f9c <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001c62:	4b93      	ldr	r3, [pc, #588]	@ (8001eb0 <runSystem+0x72c>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	2318      	movs	r3, #24
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	9301      	str	r3, [sp, #4]
 8001c70:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2302      	movs	r3, #2
 8001c78:	2164      	movs	r1, #100	@ 0x64
 8001c7a:	2046      	movs	r0, #70	@ 0x46
 8001c7c:	f7ff f98e 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001c80:	4b8c      	ldr	r3, [pc, #560]	@ (8001eb4 <runSystem+0x730>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	2318      	movs	r3, #24
 8001c88:	9302      	str	r3, [sp, #8]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2302      	movs	r3, #2
 8001c96:	2164      	movs	r1, #100	@ 0x64
 8001c98:	2096      	movs	r0, #150	@ 0x96
 8001c9a:	f7ff f97f 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001c9e:	4b86      	ldr	r3, [pc, #536]	@ (8001eb8 <runSystem+0x734>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2318      	movs	r3, #24
 8001ca6:	9302      	str	r3, [sp, #8]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	2182      	movs	r1, #130	@ 0x82
 8001cb6:	2014      	movs	r0, #20
 8001cb8:	f7ff f970 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001cbc:	4b7f      	ldr	r3, [pc, #508]	@ (8001ebc <runSystem+0x738>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	2318      	movs	r3, #24
 8001cc4:	9302      	str	r3, [sp, #8]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	2182      	movs	r1, #130	@ 0x82
 8001cd4:	2046      	movs	r0, #70	@ 0x46
 8001cd6:	f7ff f961 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001cda:	4b79      	ldr	r3, [pc, #484]	@ (8001ec0 <runSystem+0x73c>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	2318      	movs	r3, #24
 8001ce2:	9302      	str	r3, [sp, #8]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	9301      	str	r3, [sp, #4]
 8001ce8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	2302      	movs	r3, #2
 8001cf0:	2182      	movs	r1, #130	@ 0x82
 8001cf2:	206e      	movs	r0, #110	@ 0x6e
 8001cf4:	f7ff f952 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001cf8:	4b72      	ldr	r3, [pc, #456]	@ (8001ec4 <runSystem+0x740>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2318      	movs	r3, #24
 8001d00:	9302      	str	r3, [sp, #8]
 8001d02:	2300      	movs	r3, #0
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	2182      	movs	r1, #130	@ 0x82
 8001d10:	2096      	movs	r0, #150	@ 0x96
 8001d12:	f7ff f943 	bl	8000f9c <lcd_ShowIntNum>
		if(isButtonUp()){
 8001d16:	f7ff fd15 	bl	8001744 <isButtonUp>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00c      	beq.n	8001d3a <runSystem+0x5b6>
			temp_time++;
 8001d20:	4b62      	ldr	r3, [pc, #392]	@ (8001eac <runSystem+0x728>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	4b60      	ldr	r3, [pc, #384]	@ (8001eac <runSystem+0x728>)
 8001d2a:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8001d2c:	4b5f      	ldr	r3, [pc, #380]	@ (8001eac <runSystem+0x728>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b3b      	cmp	r3, #59	@ 0x3b
 8001d32:	d902      	bls.n	8001d3a <runSystem+0x5b6>
				temp_time = 0;
 8001d34:	4b5d      	ldr	r3, [pc, #372]	@ (8001eac <runSystem+0x728>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 8001d3a:	f7ff fd13 	bl	8001764 <isButtonDown>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00c      	beq.n	8001d5e <runSystem+0x5da>
			temp_time--;
 8001d44:	4b59      	ldr	r3, [pc, #356]	@ (8001eac <runSystem+0x728>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	b2da      	uxtb	r2, r3
 8001d4c:	4b57      	ldr	r3, [pc, #348]	@ (8001eac <runSystem+0x728>)
 8001d4e:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8001d50:	4b56      	ldr	r3, [pc, #344]	@ (8001eac <runSystem+0x728>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d102      	bne.n	8001d5e <runSystem+0x5da>
				temp_time = 0;
 8001d58:	4b54      	ldr	r3, [pc, #336]	@ (8001eac <runSystem+0x728>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 8001d5e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ec8 <runSystem+0x744>)
 8001d60:	88db      	ldrh	r3, [r3, #6]
 8001d62:	2b27      	cmp	r3, #39	@ 0x27
 8001d64:	d916      	bls.n	8001d94 <runSystem+0x610>
 8001d66:	4b59      	ldr	r3, [pc, #356]	@ (8001ecc <runSystem+0x748>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d10f      	bne.n	8001d94 <runSystem+0x610>
			temp_time++;
 8001d74:	4b4d      	ldr	r3, [pc, #308]	@ (8001eac <runSystem+0x728>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001eac <runSystem+0x728>)
 8001d7e:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8001d80:	4b4a      	ldr	r3, [pc, #296]	@ (8001eac <runSystem+0x728>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b3b      	cmp	r3, #59	@ 0x3b
 8001d86:	d902      	bls.n	8001d8e <runSystem+0x60a>
				temp_time = 0;
 8001d88:	4b48      	ldr	r3, [pc, #288]	@ (8001eac <runSystem+0x728>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8001d8e:	4b50      	ldr	r3, [pc, #320]	@ (8001ed0 <runSystem+0x74c>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 8001d94:	4b4c      	ldr	r3, [pc, #304]	@ (8001ec8 <runSystem+0x744>)
 8001d96:	89db      	ldrh	r3, [r3, #14]
 8001d98:	2b27      	cmp	r3, #39	@ 0x27
 8001d9a:	d916      	bls.n	8001dca <runSystem+0x646>
 8001d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8001ecc <runSystem+0x748>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10f      	bne.n	8001dca <runSystem+0x646>
			temp_time--;
 8001daa:	4b40      	ldr	r3, [pc, #256]	@ (8001eac <runSystem+0x728>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b3e      	ldr	r3, [pc, #248]	@ (8001eac <runSystem+0x728>)
 8001db4:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8001db6:	4b3d      	ldr	r3, [pc, #244]	@ (8001eac <runSystem+0x728>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d102      	bne.n	8001dc4 <runSystem+0x640>
				temp_time = 0;
 8001dbe:	4b3b      	ldr	r3, [pc, #236]	@ (8001eac <runSystem+0x728>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8001dc4:	4b42      	ldr	r3, [pc, #264]	@ (8001ed0 <runSystem+0x74c>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 8001dca:	4b3f      	ldr	r3, [pc, #252]	@ (8001ec8 <runSystem+0x744>)
 8001dcc:	8b1b      	ldrh	r3, [r3, #24]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d115      	bne.n	8001dfe <runSystem+0x67a>
			ds3231_Write(ADDRESS_MIN, temp_time);
 8001dd2:	4b36      	ldr	r3, [pc, #216]	@ (8001eac <runSystem+0x728>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f7fe fc29 	bl	8000630 <ds3231_Write>
			count_blink = 0;
 8001dde:	4b3b      	ldr	r3, [pc, #236]	@ (8001ecc <runSystem+0x748>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8001de4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed0 <runSystem+0x74c>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_sec;
 8001dea:	4b32      	ldr	r3, [pc, #200]	@ (8001eb4 <runSystem+0x730>)
 8001dec:	781a      	ldrb	r2, [r3, #0]
 8001dee:	4b2f      	ldr	r3, [pc, #188]	@ (8001eac <runSystem+0x728>)
 8001df0:	701a      	strb	r2, [r3, #0]
			systemState = MODIFY_SEC;
 8001df2:	4b38      	ldr	r3, [pc, #224]	@ (8001ed4 <runSystem+0x750>)
 8001df4:	2204      	movs	r2, #4
 8001df6:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7fe ff5b 	bl	8000cb4 <lcd_Clear>
		}
		if(button_count[0] == 1){
 8001dfe:	4b32      	ldr	r3, [pc, #200]	@ (8001ec8 <runSystem+0x744>)
 8001e00:	881b      	ldrh	r3, [r3, #0]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	f040 84f6 	bne.w	80027f4 <runSystem+0x1070>
			count_blink = 0;
 8001e08:	4b30      	ldr	r3, [pc, #192]	@ (8001ecc <runSystem+0x748>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8001e0e:	4b30      	ldr	r3, [pc, #192]	@ (8001ed0 <runSystem+0x74c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_sec;
 8001e14:	4b27      	ldr	r3, [pc, #156]	@ (8001eb4 <runSystem+0x730>)
 8001e16:	781a      	ldrb	r2, [r3, #0]
 8001e18:	4b24      	ldr	r3, [pc, #144]	@ (8001eac <runSystem+0x728>)
 8001e1a:	701a      	strb	r2, [r3, #0]
			systemState = MODIFY_SEC;
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed4 <runSystem+0x750>)
 8001e1e:	2204      	movs	r2, #4
 8001e20:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f7fe ff46 	bl	8000cb4 <lcd_Clear>
		}
		break;
 8001e28:	f000 bce4 	b.w	80027f4 <runSystem+0x1070>
	case MODIFY_SEC:
		lcd_ShowStr(20, 30, "Modify SEC", WHITE, BLUE, 24, 0);
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9302      	str	r3, [sp, #8]
 8001e30:	2318      	movs	r3, #24
 8001e32:	9301      	str	r3, [sp, #4]
 8001e34:	231f      	movs	r3, #31
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001e3c:	4a26      	ldr	r2, [pc, #152]	@ (8001ed8 <runSystem+0x754>)
 8001e3e:	211e      	movs	r1, #30
 8001e40:	2014      	movs	r0, #20
 8001e42:	f7ff faad 	bl	80013a0 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001e46:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb4 <runSystem+0x730>)
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7fe fbef 	bl	8000630 <ds3231_Write>
		count_blink = count_blink + 1;
 8001e52:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <runSystem+0x748>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	3301      	adds	r3, #1
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001ecc <runSystem+0x748>)
 8001e5c:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <runSystem+0x748>)
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	4b1e      	ldr	r3, [pc, #120]	@ (8001edc <runSystem+0x758>)
 8001e64:	fba3 1302 	umull	r1, r3, r3, r2
 8001e68:	08d9      	lsrs	r1, r3, #3
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <runSystem+0x704>
			blink_state ^= 1;
 8001e7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <runSystem+0x74c>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	f083 0301 	eor.w	r3, r3, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <runSystem+0x74c>)
 8001e86:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 8001e88:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <runSystem+0x74c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d129      	bne.n	8001ee4 <runSystem+0x760>
			lcd_ShowStr(150, 100, "  ", GREEN, BLACK, 24, 0);
 8001e90:	2300      	movs	r3, #0
 8001e92:	9302      	str	r3, [sp, #8]
 8001e94:	2318      	movs	r3, #24
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee0 <runSystem+0x75c>)
 8001ea2:	2164      	movs	r1, #100	@ 0x64
 8001ea4:	2096      	movs	r0, #150	@ 0x96
 8001ea6:	f7ff fa7b 	bl	80013a0 <lcd_ShowStr>
 8001eaa:	e02a      	b.n	8001f02 <runSystem+0x77e>
 8001eac:	20000123 	.word	0x20000123
 8001eb0:	2000005b 	.word	0x2000005b
 8001eb4:	2000005d 	.word	0x2000005d
 8001eb8:	2000005f 	.word	0x2000005f
 8001ebc:	2000005e 	.word	0x2000005e
 8001ec0:	20000060 	.word	0x20000060
 8001ec4:	20000061 	.word	0x20000061
 8001ec8:	20000030 	.word	0x20000030
 8001ecc:	2000011e 	.word	0x2000011e
 8001ed0:	2000011f 	.word	0x2000011f
 8001ed4:	20000118 	.word	0x20000118
 8001ed8:	08007a78 	.word	0x08007a78
 8001edc:	cccccccd 	.word	0xcccccccd
 8001ee0:	08007a68 	.word	0x08007a68
		}else{
			lcd_ShowIntNum(150, 100, temp_time, 2, GREEN, BLACK, 24);
 8001ee4:	4b99      	ldr	r3, [pc, #612]	@ (800214c <runSystem+0x9c8>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2318      	movs	r3, #24
 8001eec:	9302      	str	r3, [sp, #8]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ef6:	9300      	str	r3, [sp, #0]
 8001ef8:	2302      	movs	r3, #2
 8001efa:	2164      	movs	r1, #100	@ 0x64
 8001efc:	2096      	movs	r0, #150	@ 0x96
 8001efe:	f7ff f84d 	bl	8000f9c <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001f02:	4b93      	ldr	r3, [pc, #588]	@ (8002150 <runSystem+0x9cc>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	2318      	movs	r3, #24
 8001f0a:	9302      	str	r3, [sp, #8]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	9301      	str	r3, [sp, #4]
 8001f10:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2302      	movs	r3, #2
 8001f18:	2164      	movs	r1, #100	@ 0x64
 8001f1a:	2046      	movs	r0, #70	@ 0x46
 8001f1c:	f7ff f83e 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001f20:	4b8c      	ldr	r3, [pc, #560]	@ (8002154 <runSystem+0x9d0>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	2318      	movs	r3, #24
 8001f28:	9302      	str	r3, [sp, #8]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	2302      	movs	r3, #2
 8001f36:	2164      	movs	r1, #100	@ 0x64
 8001f38:	206e      	movs	r0, #110	@ 0x6e
 8001f3a:	f7ff f82f 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001f3e:	4b86      	ldr	r3, [pc, #536]	@ (8002158 <runSystem+0x9d4>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	2318      	movs	r3, #24
 8001f46:	9302      	str	r3, [sp, #8]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	9301      	str	r3, [sp, #4]
 8001f4c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001f50:	9300      	str	r3, [sp, #0]
 8001f52:	2302      	movs	r3, #2
 8001f54:	2182      	movs	r1, #130	@ 0x82
 8001f56:	2014      	movs	r0, #20
 8001f58:	f7ff f820 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001f5c:	4b7f      	ldr	r3, [pc, #508]	@ (800215c <runSystem+0x9d8>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	2318      	movs	r3, #24
 8001f64:	9302      	str	r3, [sp, #8]
 8001f66:	2300      	movs	r3, #0
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2302      	movs	r3, #2
 8001f72:	2182      	movs	r1, #130	@ 0x82
 8001f74:	2046      	movs	r0, #70	@ 0x46
 8001f76:	f7ff f811 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001f7a:	4b79      	ldr	r3, [pc, #484]	@ (8002160 <runSystem+0x9dc>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2318      	movs	r3, #24
 8001f82:	9302      	str	r3, [sp, #8]
 8001f84:	2300      	movs	r3, #0
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	2302      	movs	r3, #2
 8001f90:	2182      	movs	r1, #130	@ 0x82
 8001f92:	206e      	movs	r0, #110	@ 0x6e
 8001f94:	f7ff f802 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001f98:	4b72      	ldr	r3, [pc, #456]	@ (8002164 <runSystem+0x9e0>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2318      	movs	r3, #24
 8001fa0:	9302      	str	r3, [sp, #8]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001faa:	9300      	str	r3, [sp, #0]
 8001fac:	2302      	movs	r3, #2
 8001fae:	2182      	movs	r1, #130	@ 0x82
 8001fb0:	2096      	movs	r0, #150	@ 0x96
 8001fb2:	f7fe fff3 	bl	8000f9c <lcd_ShowIntNum>
		if(isButtonUp()){
 8001fb6:	f7ff fbc5 	bl	8001744 <isButtonUp>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00c      	beq.n	8001fda <runSystem+0x856>
			temp_time++;
 8001fc0:	4b62      	ldr	r3, [pc, #392]	@ (800214c <runSystem+0x9c8>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	4b60      	ldr	r3, [pc, #384]	@ (800214c <runSystem+0x9c8>)
 8001fca:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8001fcc:	4b5f      	ldr	r3, [pc, #380]	@ (800214c <runSystem+0x9c8>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b3b      	cmp	r3, #59	@ 0x3b
 8001fd2:	d902      	bls.n	8001fda <runSystem+0x856>
				temp_time = 0;
 8001fd4:	4b5d      	ldr	r3, [pc, #372]	@ (800214c <runSystem+0x9c8>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 8001fda:	f7ff fbc3 	bl	8001764 <isButtonDown>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00c      	beq.n	8001ffe <runSystem+0x87a>
			temp_time--;
 8001fe4:	4b59      	ldr	r3, [pc, #356]	@ (800214c <runSystem+0x9c8>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	4b57      	ldr	r3, [pc, #348]	@ (800214c <runSystem+0x9c8>)
 8001fee:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8001ff0:	4b56      	ldr	r3, [pc, #344]	@ (800214c <runSystem+0x9c8>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <runSystem+0x87a>
				temp_time = 0;
 8001ff8:	4b54      	ldr	r3, [pc, #336]	@ (800214c <runSystem+0x9c8>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 8001ffe:	4b5a      	ldr	r3, [pc, #360]	@ (8002168 <runSystem+0x9e4>)
 8002000:	88db      	ldrh	r3, [r3, #6]
 8002002:	2b27      	cmp	r3, #39	@ 0x27
 8002004:	d916      	bls.n	8002034 <runSystem+0x8b0>
 8002006:	4b59      	ldr	r3, [pc, #356]	@ (800216c <runSystem+0x9e8>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10f      	bne.n	8002034 <runSystem+0x8b0>
			temp_time++;
 8002014:	4b4d      	ldr	r3, [pc, #308]	@ (800214c <runSystem+0x9c8>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b4b      	ldr	r3, [pc, #300]	@ (800214c <runSystem+0x9c8>)
 800201e:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8002020:	4b4a      	ldr	r3, [pc, #296]	@ (800214c <runSystem+0x9c8>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b3b      	cmp	r3, #59	@ 0x3b
 8002026:	d902      	bls.n	800202e <runSystem+0x8aa>
				temp_time = 0;
 8002028:	4b48      	ldr	r3, [pc, #288]	@ (800214c <runSystem+0x9c8>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 800202e:	4b50      	ldr	r3, [pc, #320]	@ (8002170 <runSystem+0x9ec>)
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 8002034:	4b4c      	ldr	r3, [pc, #304]	@ (8002168 <runSystem+0x9e4>)
 8002036:	89db      	ldrh	r3, [r3, #14]
 8002038:	2b27      	cmp	r3, #39	@ 0x27
 800203a:	d916      	bls.n	800206a <runSystem+0x8e6>
 800203c:	4b4b      	ldr	r3, [pc, #300]	@ (800216c <runSystem+0x9e8>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10f      	bne.n	800206a <runSystem+0x8e6>
			temp_time--;
 800204a:	4b40      	ldr	r3, [pc, #256]	@ (800214c <runSystem+0x9c8>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	3b01      	subs	r3, #1
 8002050:	b2da      	uxtb	r2, r3
 8002052:	4b3e      	ldr	r3, [pc, #248]	@ (800214c <runSystem+0x9c8>)
 8002054:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8002056:	4b3d      	ldr	r3, [pc, #244]	@ (800214c <runSystem+0x9c8>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d102      	bne.n	8002064 <runSystem+0x8e0>
				temp_time = 0;
 800205e:	4b3b      	ldr	r3, [pc, #236]	@ (800214c <runSystem+0x9c8>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8002064:	4b42      	ldr	r3, [pc, #264]	@ (8002170 <runSystem+0x9ec>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 800206a:	4b3f      	ldr	r3, [pc, #252]	@ (8002168 <runSystem+0x9e4>)
 800206c:	8b1b      	ldrh	r3, [r3, #24]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d115      	bne.n	800209e <runSystem+0x91a>
			ds3231_Write(ADDRESS_SEC, temp_time);
 8002072:	4b36      	ldr	r3, [pc, #216]	@ (800214c <runSystem+0x9c8>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	4619      	mov	r1, r3
 8002078:	2000      	movs	r0, #0
 800207a:	f7fe fad9 	bl	8000630 <ds3231_Write>
			count_blink = 0;
 800207e:	4b3b      	ldr	r3, [pc, #236]	@ (800216c <runSystem+0x9e8>)
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8002084:	4b3a      	ldr	r3, [pc, #232]	@ (8002170 <runSystem+0x9ec>)
 8002086:	2200      	movs	r2, #0
 8002088:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_hours;
 800208a:	4b31      	ldr	r3, [pc, #196]	@ (8002150 <runSystem+0x9cc>)
 800208c:	781a      	ldrb	r2, [r3, #0]
 800208e:	4b2f      	ldr	r3, [pc, #188]	@ (800214c <runSystem+0x9c8>)
 8002090:	701a      	strb	r2, [r3, #0]
			systemState = ALARM_HOUR;
 8002092:	4b38      	ldr	r3, [pc, #224]	@ (8002174 <runSystem+0x9f0>)
 8002094:	2205      	movs	r2, #5
 8002096:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8002098:	2000      	movs	r0, #0
 800209a:	f7fe fe0b 	bl	8000cb4 <lcd_Clear>
		}
		if(button_count[0] == 1){
 800209e:	4b32      	ldr	r3, [pc, #200]	@ (8002168 <runSystem+0x9e4>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	f040 83a8 	bne.w	80027f8 <runSystem+0x1074>
			count_blink = 0;
 80020a8:	4b30      	ldr	r3, [pc, #192]	@ (800216c <runSystem+0x9e8>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 80020ae:	4b30      	ldr	r3, [pc, #192]	@ (8002170 <runSystem+0x9ec>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_hours;
 80020b4:	4b26      	ldr	r3, [pc, #152]	@ (8002150 <runSystem+0x9cc>)
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	4b24      	ldr	r3, [pc, #144]	@ (800214c <runSystem+0x9c8>)
 80020ba:	701a      	strb	r2, [r3, #0]
			systemState = ALARM_HOUR;
 80020bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002174 <runSystem+0x9f0>)
 80020be:	2205      	movs	r2, #5
 80020c0:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f7fe fdf6 	bl	8000cb4 <lcd_Clear>
		}
		break;
 80020c8:	e396      	b.n	80027f8 <runSystem+0x1074>
	case ALARM_HOUR:
		lcd_ShowStr(20, 30, "set Alarm - HOUR", WHITE, BLUE, 24, 0);
 80020ca:	2300      	movs	r3, #0
 80020cc:	9302      	str	r3, [sp, #8]
 80020ce:	2318      	movs	r3, #24
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	231f      	movs	r3, #31
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80020da:	4a27      	ldr	r2, [pc, #156]	@ (8002178 <runSystem+0x9f4>)
 80020dc:	211e      	movs	r1, #30
 80020de:	2014      	movs	r0, #20
 80020e0:	f7ff f95e 	bl	80013a0 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 80020e4:	4b25      	ldr	r3, [pc, #148]	@ (800217c <runSystem+0x9f8>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4619      	mov	r1, r3
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7fe faa0 	bl	8000630 <ds3231_Write>
		count_blink = count_blink + 1;
 80020f0:	4b1e      	ldr	r3, [pc, #120]	@ (800216c <runSystem+0x9e8>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	3301      	adds	r3, #1
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	4b1c      	ldr	r3, [pc, #112]	@ (800216c <runSystem+0x9e8>)
 80020fa:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 80020fc:	4b1b      	ldr	r3, [pc, #108]	@ (800216c <runSystem+0x9e8>)
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	4b1f      	ldr	r3, [pc, #124]	@ (8002180 <runSystem+0x9fc>)
 8002102:	fba3 1302 	umull	r1, r3, r3, r2
 8002106:	08d9      	lsrs	r1, r3, #3
 8002108:	460b      	mov	r3, r1
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d106      	bne.n	8002126 <runSystem+0x9a2>
			blink_state ^= 1;
 8002118:	4b15      	ldr	r3, [pc, #84]	@ (8002170 <runSystem+0x9ec>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	f083 0301 	eor.w	r3, r3, #1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	4b13      	ldr	r3, [pc, #76]	@ (8002170 <runSystem+0x9ec>)
 8002124:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 8002126:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <runSystem+0x9ec>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d12c      	bne.n	8002188 <runSystem+0xa04>
			lcd_ShowStr(70, 100, "  ", GREEN, BLACK, 24, 0);
 800212e:	2300      	movs	r3, #0
 8002130:	9302      	str	r3, [sp, #8]
 8002132:	2318      	movs	r3, #24
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	2300      	movs	r3, #0
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800213e:	4a11      	ldr	r2, [pc, #68]	@ (8002184 <runSystem+0xa00>)
 8002140:	2164      	movs	r1, #100	@ 0x64
 8002142:	2046      	movs	r0, #70	@ 0x46
 8002144:	f7ff f92c 	bl	80013a0 <lcd_ShowStr>
 8002148:	e02d      	b.n	80021a6 <runSystem+0xa22>
 800214a:	bf00      	nop
 800214c:	20000123 	.word	0x20000123
 8002150:	2000005b 	.word	0x2000005b
 8002154:	2000005c 	.word	0x2000005c
 8002158:	2000005f 	.word	0x2000005f
 800215c:	2000005e 	.word	0x2000005e
 8002160:	20000060 	.word	0x20000060
 8002164:	20000061 	.word	0x20000061
 8002168:	20000030 	.word	0x20000030
 800216c:	2000011e 	.word	0x2000011e
 8002170:	2000011f 	.word	0x2000011f
 8002174:	20000118 	.word	0x20000118
 8002178:	08007a84 	.word	0x08007a84
 800217c:	2000005d 	.word	0x2000005d
 8002180:	cccccccd 	.word	0xcccccccd
 8002184:	08007a68 	.word	0x08007a68
		}else{
			lcd_ShowIntNum(70, 100, temp_time, 2, GREEN, BLACK, 24);
 8002188:	4b99      	ldr	r3, [pc, #612]	@ (80023f0 <runSystem+0xc6c>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	461a      	mov	r2, r3
 800218e:	2318      	movs	r3, #24
 8002190:	9302      	str	r3, [sp, #8]
 8002192:	2300      	movs	r3, #0
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	2302      	movs	r3, #2
 800219e:	2164      	movs	r1, #100	@ 0x64
 80021a0:	2046      	movs	r0, #70	@ 0x46
 80021a2:	f7fe fefb 	bl	8000f9c <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80021a6:	4b93      	ldr	r3, [pc, #588]	@ (80023f4 <runSystem+0xc70>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	2318      	movs	r3, #24
 80021ae:	9302      	str	r3, [sp, #8]
 80021b0:	2300      	movs	r3, #0
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	2302      	movs	r3, #2
 80021bc:	2164      	movs	r1, #100	@ 0x64
 80021be:	206e      	movs	r0, #110	@ 0x6e
 80021c0:	f7fe feec 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80021c4:	4b8c      	ldr	r3, [pc, #560]	@ (80023f8 <runSystem+0xc74>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	461a      	mov	r2, r3
 80021ca:	2318      	movs	r3, #24
 80021cc:	9302      	str	r3, [sp, #8]
 80021ce:	2300      	movs	r3, #0
 80021d0:	9301      	str	r3, [sp, #4]
 80021d2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	2302      	movs	r3, #2
 80021da:	2164      	movs	r1, #100	@ 0x64
 80021dc:	2096      	movs	r0, #150	@ 0x96
 80021de:	f7fe fedd 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 80021e2:	4b86      	ldr	r3, [pc, #536]	@ (80023fc <runSystem+0xc78>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	2318      	movs	r3, #24
 80021ea:	9302      	str	r3, [sp, #8]
 80021ec:	2300      	movs	r3, #0
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	2302      	movs	r3, #2
 80021f8:	2182      	movs	r1, #130	@ 0x82
 80021fa:	2014      	movs	r0, #20
 80021fc:	f7fe fece 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8002200:	4b7f      	ldr	r3, [pc, #508]	@ (8002400 <runSystem+0xc7c>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	2318      	movs	r3, #24
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	2300      	movs	r3, #0
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2302      	movs	r3, #2
 8002216:	2182      	movs	r1, #130	@ 0x82
 8002218:	2046      	movs	r0, #70	@ 0x46
 800221a:	f7fe febf 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 800221e:	4b79      	ldr	r3, [pc, #484]	@ (8002404 <runSystem+0xc80>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	2318      	movs	r3, #24
 8002226:	9302      	str	r3, [sp, #8]
 8002228:	2300      	movs	r3, #0
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2302      	movs	r3, #2
 8002234:	2182      	movs	r1, #130	@ 0x82
 8002236:	206e      	movs	r0, #110	@ 0x6e
 8002238:	f7fe feb0 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 800223c:	4b72      	ldr	r3, [pc, #456]	@ (8002408 <runSystem+0xc84>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	2318      	movs	r3, #24
 8002244:	9302      	str	r3, [sp, #8]
 8002246:	2300      	movs	r3, #0
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	2302      	movs	r3, #2
 8002252:	2182      	movs	r1, #130	@ 0x82
 8002254:	2096      	movs	r0, #150	@ 0x96
 8002256:	f7fe fea1 	bl	8000f9c <lcd_ShowIntNum>
		if(isButtonUp()){
 800225a:	f7ff fa73 	bl	8001744 <isButtonUp>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00c      	beq.n	800227e <runSystem+0xafa>
			temp_time++;
 8002264:	4b62      	ldr	r3, [pc, #392]	@ (80023f0 <runSystem+0xc6c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	b2da      	uxtb	r2, r3
 800226c:	4b60      	ldr	r3, [pc, #384]	@ (80023f0 <runSystem+0xc6c>)
 800226e:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 24){
 8002270:	4b5f      	ldr	r3, [pc, #380]	@ (80023f0 <runSystem+0xc6c>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b17      	cmp	r3, #23
 8002276:	d902      	bls.n	800227e <runSystem+0xafa>
				temp_time = 0;
 8002278:	4b5d      	ldr	r3, [pc, #372]	@ (80023f0 <runSystem+0xc6c>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 800227e:	f7ff fa71 	bl	8001764 <isButtonDown>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00c      	beq.n	80022a2 <runSystem+0xb1e>
			temp_time--;
 8002288:	4b59      	ldr	r3, [pc, #356]	@ (80023f0 <runSystem+0xc6c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	3b01      	subs	r3, #1
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b57      	ldr	r3, [pc, #348]	@ (80023f0 <runSystem+0xc6c>)
 8002292:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8002294:	4b56      	ldr	r3, [pc, #344]	@ (80023f0 <runSystem+0xc6c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d102      	bne.n	80022a2 <runSystem+0xb1e>
				temp_time = 0;
 800229c:	4b54      	ldr	r3, [pc, #336]	@ (80023f0 <runSystem+0xc6c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 80022a2:	4b5a      	ldr	r3, [pc, #360]	@ (800240c <runSystem+0xc88>)
 80022a4:	88db      	ldrh	r3, [r3, #6]
 80022a6:	2b27      	cmp	r3, #39	@ 0x27
 80022a8:	d916      	bls.n	80022d8 <runSystem+0xb54>
 80022aa:	4b59      	ldr	r3, [pc, #356]	@ (8002410 <runSystem+0xc8c>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10f      	bne.n	80022d8 <runSystem+0xb54>
			temp_time++;
 80022b8:	4b4d      	ldr	r3, [pc, #308]	@ (80023f0 <runSystem+0xc6c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	4b4b      	ldr	r3, [pc, #300]	@ (80023f0 <runSystem+0xc6c>)
 80022c2:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 24){
 80022c4:	4b4a      	ldr	r3, [pc, #296]	@ (80023f0 <runSystem+0xc6c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b17      	cmp	r3, #23
 80022ca:	d902      	bls.n	80022d2 <runSystem+0xb4e>
				temp_time = 0;
 80022cc:	4b48      	ldr	r3, [pc, #288]	@ (80023f0 <runSystem+0xc6c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 80022d2:	4b50      	ldr	r3, [pc, #320]	@ (8002414 <runSystem+0xc90>)
 80022d4:	2201      	movs	r2, #1
 80022d6:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 80022d8:	4b4c      	ldr	r3, [pc, #304]	@ (800240c <runSystem+0xc88>)
 80022da:	89db      	ldrh	r3, [r3, #14]
 80022dc:	2b27      	cmp	r3, #39	@ 0x27
 80022de:	d916      	bls.n	800230e <runSystem+0xb8a>
 80022e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002410 <runSystem+0xc8c>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	f003 0303 	and.w	r3, r3, #3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10f      	bne.n	800230e <runSystem+0xb8a>
			temp_time--;
 80022ee:	4b40      	ldr	r3, [pc, #256]	@ (80023f0 <runSystem+0xc6c>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b3e      	ldr	r3, [pc, #248]	@ (80023f0 <runSystem+0xc6c>)
 80022f8:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 80022fa:	4b3d      	ldr	r3, [pc, #244]	@ (80023f0 <runSystem+0xc6c>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d102      	bne.n	8002308 <runSystem+0xb84>
				temp_time = 0;
 8002302:	4b3b      	ldr	r3, [pc, #236]	@ (80023f0 <runSystem+0xc6c>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8002308:	4b42      	ldr	r3, [pc, #264]	@ (8002414 <runSystem+0xc90>)
 800230a:	2201      	movs	r2, #1
 800230c:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 800230e:	4b3f      	ldr	r3, [pc, #252]	@ (800240c <runSystem+0xc88>)
 8002310:	8b1b      	ldrh	r3, [r3, #24]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d116      	bne.n	8002344 <runSystem+0xbc0>
			alarm_hour = temp_time;
 8002316:	4b36      	ldr	r3, [pc, #216]	@ (80023f0 <runSystem+0xc6c>)
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	4b3f      	ldr	r3, [pc, #252]	@ (8002418 <runSystem+0xc94>)
 800231c:	701a      	strb	r2, [r3, #0]
			hour_alarm_flag = 1;
 800231e:	4b3f      	ldr	r3, [pc, #252]	@ (800241c <runSystem+0xc98>)
 8002320:	2201      	movs	r2, #1
 8002322:	701a      	strb	r2, [r3, #0]
			count_blink = 0;
 8002324:	4b3a      	ldr	r3, [pc, #232]	@ (8002410 <runSystem+0xc8c>)
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 800232a:	4b3a      	ldr	r3, [pc, #232]	@ (8002414 <runSystem+0xc90>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_min;
 8002330:	4b30      	ldr	r3, [pc, #192]	@ (80023f4 <runSystem+0xc70>)
 8002332:	781a      	ldrb	r2, [r3, #0]
 8002334:	4b2e      	ldr	r3, [pc, #184]	@ (80023f0 <runSystem+0xc6c>)
 8002336:	701a      	strb	r2, [r3, #0]
			systemState = ALARM_MIN;
 8002338:	4b39      	ldr	r3, [pc, #228]	@ (8002420 <runSystem+0xc9c>)
 800233a:	2206      	movs	r2, #6
 800233c:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 800233e:	2000      	movs	r0, #0
 8002340:	f7fe fcb8 	bl	8000cb4 <lcd_Clear>
		}
		if(button_count[0] == 1){
 8002344:	4b31      	ldr	r3, [pc, #196]	@ (800240c <runSystem+0xc88>)
 8002346:	881b      	ldrh	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	f040 8257 	bne.w	80027fc <runSystem+0x1078>
			count_blink = 0;
 800234e:	4b30      	ldr	r3, [pc, #192]	@ (8002410 <runSystem+0xc8c>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8002354:	4b2f      	ldr	r3, [pc, #188]	@ (8002414 <runSystem+0xc90>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_min;
 800235a:	4b26      	ldr	r3, [pc, #152]	@ (80023f4 <runSystem+0xc70>)
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	4b24      	ldr	r3, [pc, #144]	@ (80023f0 <runSystem+0xc6c>)
 8002360:	701a      	strb	r2, [r3, #0]
			systemState = ALARM_MIN;
 8002362:	4b2f      	ldr	r3, [pc, #188]	@ (8002420 <runSystem+0xc9c>)
 8002364:	2206      	movs	r2, #6
 8002366:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8002368:	2000      	movs	r0, #0
 800236a:	f7fe fca3 	bl	8000cb4 <lcd_Clear>
		}
		break;
 800236e:	e245      	b.n	80027fc <runSystem+0x1078>
	case ALARM_MIN:
		lcd_ShowStr(20, 30, "set Alarm - MIN", WHITE, BLUE, 24, 0);
 8002370:	2300      	movs	r3, #0
 8002372:	9302      	str	r3, [sp, #8]
 8002374:	2318      	movs	r3, #24
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	231f      	movs	r3, #31
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002380:	4a28      	ldr	r2, [pc, #160]	@ (8002424 <runSystem+0xca0>)
 8002382:	211e      	movs	r1, #30
 8002384:	2014      	movs	r0, #20
 8002386:	f7ff f80b 	bl	80013a0 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 800238a:	4b1b      	ldr	r3, [pc, #108]	@ (80023f8 <runSystem+0xc74>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	2000      	movs	r0, #0
 8002392:	f7fe f94d 	bl	8000630 <ds3231_Write>
		count_blink = count_blink + 1;
 8002396:	4b1e      	ldr	r3, [pc, #120]	@ (8002410 <runSystem+0xc8c>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b1c      	ldr	r3, [pc, #112]	@ (8002410 <runSystem+0xc8c>)
 80023a0:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 80023a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002410 <runSystem+0xc8c>)
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	4b20      	ldr	r3, [pc, #128]	@ (8002428 <runSystem+0xca4>)
 80023a8:	fba3 1302 	umull	r1, r3, r3, r2
 80023ac:	08d9      	lsrs	r1, r3, #3
 80023ae:	460b      	mov	r3, r1
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <runSystem+0xc48>
			blink_state ^= 1;
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <runSystem+0xc90>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	f083 0301 	eor.w	r3, r3, #1
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b12      	ldr	r3, [pc, #72]	@ (8002414 <runSystem+0xc90>)
 80023ca:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 80023cc:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <runSystem+0xc90>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d12d      	bne.n	8002430 <runSystem+0xcac>
			lcd_ShowStr(110, 100, "  ", GREEN, BLACK, 24, 0);
 80023d4:	2300      	movs	r3, #0
 80023d6:	9302      	str	r3, [sp, #8]
 80023d8:	2318      	movs	r3, #24
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	2300      	movs	r3, #0
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80023e4:	4a11      	ldr	r2, [pc, #68]	@ (800242c <runSystem+0xca8>)
 80023e6:	2164      	movs	r1, #100	@ 0x64
 80023e8:	206e      	movs	r0, #110	@ 0x6e
 80023ea:	f7fe ffd9 	bl	80013a0 <lcd_ShowStr>
 80023ee:	e02e      	b.n	800244e <runSystem+0xcca>
 80023f0:	20000123 	.word	0x20000123
 80023f4:	2000005c 	.word	0x2000005c
 80023f8:	2000005d 	.word	0x2000005d
 80023fc:	2000005f 	.word	0x2000005f
 8002400:	2000005e 	.word	0x2000005e
 8002404:	20000060 	.word	0x20000060
 8002408:	20000061 	.word	0x20000061
 800240c:	20000030 	.word	0x20000030
 8002410:	2000011e 	.word	0x2000011e
 8002414:	2000011f 	.word	0x2000011f
 8002418:	2000011c 	.word	0x2000011c
 800241c:	20000121 	.word	0x20000121
 8002420:	20000118 	.word	0x20000118
 8002424:	08007a98 	.word	0x08007a98
 8002428:	cccccccd 	.word	0xcccccccd
 800242c:	08007a68 	.word	0x08007a68
		}else{
			lcd_ShowIntNum(110, 100, temp_time, 2, GREEN, BLACK, 24);
 8002430:	4ba1      	ldr	r3, [pc, #644]	@ (80026b8 <runSystem+0xf34>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	461a      	mov	r2, r3
 8002436:	2318      	movs	r3, #24
 8002438:	9302      	str	r3, [sp, #8]
 800243a:	2300      	movs	r3, #0
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	2302      	movs	r3, #2
 8002446:	2164      	movs	r1, #100	@ 0x64
 8002448:	206e      	movs	r0, #110	@ 0x6e
 800244a:	f7fe fda7 	bl	8000f9c <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 800244e:	4b9b      	ldr	r3, [pc, #620]	@ (80026bc <runSystem+0xf38>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	2318      	movs	r3, #24
 8002456:	9302      	str	r3, [sp, #8]
 8002458:	2300      	movs	r3, #0
 800245a:	9301      	str	r3, [sp, #4]
 800245c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2302      	movs	r3, #2
 8002464:	2164      	movs	r1, #100	@ 0x64
 8002466:	2046      	movs	r0, #70	@ 0x46
 8002468:	f7fe fd98 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 800246c:	4b94      	ldr	r3, [pc, #592]	@ (80026c0 <runSystem+0xf3c>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	2318      	movs	r3, #24
 8002474:	9302      	str	r3, [sp, #8]
 8002476:	2300      	movs	r3, #0
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	2302      	movs	r3, #2
 8002482:	2164      	movs	r1, #100	@ 0x64
 8002484:	2096      	movs	r0, #150	@ 0x96
 8002486:	f7fe fd89 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 800248a:	4b8e      	ldr	r3, [pc, #568]	@ (80026c4 <runSystem+0xf40>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	461a      	mov	r2, r3
 8002490:	2318      	movs	r3, #24
 8002492:	9302      	str	r3, [sp, #8]
 8002494:	2300      	movs	r3, #0
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	2302      	movs	r3, #2
 80024a0:	2182      	movs	r1, #130	@ 0x82
 80024a2:	2014      	movs	r0, #20
 80024a4:	f7fe fd7a 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 80024a8:	4b87      	ldr	r3, [pc, #540]	@ (80026c8 <runSystem+0xf44>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	461a      	mov	r2, r3
 80024ae:	2318      	movs	r3, #24
 80024b0:	9302      	str	r3, [sp, #8]
 80024b2:	2300      	movs	r3, #0
 80024b4:	9301      	str	r3, [sp, #4]
 80024b6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2302      	movs	r3, #2
 80024be:	2182      	movs	r1, #130	@ 0x82
 80024c0:	2046      	movs	r0, #70	@ 0x46
 80024c2:	f7fe fd6b 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 80024c6:	4b81      	ldr	r3, [pc, #516]	@ (80026cc <runSystem+0xf48>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	2318      	movs	r3, #24
 80024ce:	9302      	str	r3, [sp, #8]
 80024d0:	2300      	movs	r3, #0
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	2302      	movs	r3, #2
 80024dc:	2182      	movs	r1, #130	@ 0x82
 80024de:	206e      	movs	r0, #110	@ 0x6e
 80024e0:	f7fe fd5c 	bl	8000f9c <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80024e4:	4b7a      	ldr	r3, [pc, #488]	@ (80026d0 <runSystem+0xf4c>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	2318      	movs	r3, #24
 80024ec:	9302      	str	r3, [sp, #8]
 80024ee:	2300      	movs	r3, #0
 80024f0:	9301      	str	r3, [sp, #4]
 80024f2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	2302      	movs	r3, #2
 80024fa:	2182      	movs	r1, #130	@ 0x82
 80024fc:	2096      	movs	r0, #150	@ 0x96
 80024fe:	f7fe fd4d 	bl	8000f9c <lcd_ShowIntNum>
		if(isButtonUp()){
 8002502:	f7ff f91f 	bl	8001744 <isButtonUp>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00c      	beq.n	8002526 <runSystem+0xda2>
			temp_time++;
 800250c:	4b6a      	ldr	r3, [pc, #424]	@ (80026b8 <runSystem+0xf34>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	b2da      	uxtb	r2, r3
 8002514:	4b68      	ldr	r3, [pc, #416]	@ (80026b8 <runSystem+0xf34>)
 8002516:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8002518:	4b67      	ldr	r3, [pc, #412]	@ (80026b8 <runSystem+0xf34>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b3b      	cmp	r3, #59	@ 0x3b
 800251e:	d902      	bls.n	8002526 <runSystem+0xda2>
				temp_time = 0;
 8002520:	4b65      	ldr	r3, [pc, #404]	@ (80026b8 <runSystem+0xf34>)
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 8002526:	f7ff f91d 	bl	8001764 <isButtonDown>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00c      	beq.n	800254a <runSystem+0xdc6>
			temp_time--;
 8002530:	4b61      	ldr	r3, [pc, #388]	@ (80026b8 <runSystem+0xf34>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	3b01      	subs	r3, #1
 8002536:	b2da      	uxtb	r2, r3
 8002538:	4b5f      	ldr	r3, [pc, #380]	@ (80026b8 <runSystem+0xf34>)
 800253a:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 800253c:	4b5e      	ldr	r3, [pc, #376]	@ (80026b8 <runSystem+0xf34>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d102      	bne.n	800254a <runSystem+0xdc6>
				temp_time = 0;
 8002544:	4b5c      	ldr	r3, [pc, #368]	@ (80026b8 <runSystem+0xf34>)
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 800254a:	4b62      	ldr	r3, [pc, #392]	@ (80026d4 <runSystem+0xf50>)
 800254c:	88db      	ldrh	r3, [r3, #6]
 800254e:	2b27      	cmp	r3, #39	@ 0x27
 8002550:	d916      	bls.n	8002580 <runSystem+0xdfc>
 8002552:	4b61      	ldr	r3, [pc, #388]	@ (80026d8 <runSystem+0xf54>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d10f      	bne.n	8002580 <runSystem+0xdfc>
			temp_time++;
 8002560:	4b55      	ldr	r3, [pc, #340]	@ (80026b8 <runSystem+0xf34>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	3301      	adds	r3, #1
 8002566:	b2da      	uxtb	r2, r3
 8002568:	4b53      	ldr	r3, [pc, #332]	@ (80026b8 <runSystem+0xf34>)
 800256a:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 800256c:	4b52      	ldr	r3, [pc, #328]	@ (80026b8 <runSystem+0xf34>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b3b      	cmp	r3, #59	@ 0x3b
 8002572:	d902      	bls.n	800257a <runSystem+0xdf6>
				temp_time = 0;
 8002574:	4b50      	ldr	r3, [pc, #320]	@ (80026b8 <runSystem+0xf34>)
 8002576:	2200      	movs	r2, #0
 8002578:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 800257a:	4b58      	ldr	r3, [pc, #352]	@ (80026dc <runSystem+0xf58>)
 800257c:	2201      	movs	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 8002580:	4b54      	ldr	r3, [pc, #336]	@ (80026d4 <runSystem+0xf50>)
 8002582:	89db      	ldrh	r3, [r3, #14]
 8002584:	2b27      	cmp	r3, #39	@ 0x27
 8002586:	d916      	bls.n	80025b6 <runSystem+0xe32>
 8002588:	4b53      	ldr	r3, [pc, #332]	@ (80026d8 <runSystem+0xf54>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	f003 0303 	and.w	r3, r3, #3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10f      	bne.n	80025b6 <runSystem+0xe32>
			temp_time--;
 8002596:	4b48      	ldr	r3, [pc, #288]	@ (80026b8 <runSystem+0xf34>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	3b01      	subs	r3, #1
 800259c:	b2da      	uxtb	r2, r3
 800259e:	4b46      	ldr	r3, [pc, #280]	@ (80026b8 <runSystem+0xf34>)
 80025a0:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 80025a2:	4b45      	ldr	r3, [pc, #276]	@ (80026b8 <runSystem+0xf34>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <runSystem+0xe2c>
				temp_time = 0;
 80025aa:	4b43      	ldr	r3, [pc, #268]	@ (80026b8 <runSystem+0xf34>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 80025b0:	4b4a      	ldr	r3, [pc, #296]	@ (80026dc <runSystem+0xf58>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 80025b6:	4b47      	ldr	r3, [pc, #284]	@ (80026d4 <runSystem+0xf50>)
 80025b8:	8b1b      	ldrh	r3, [r3, #24]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d112      	bne.n	80025e4 <runSystem+0xe60>
			alarm_min = temp_time;
 80025be:	4b3e      	ldr	r3, [pc, #248]	@ (80026b8 <runSystem+0xf34>)
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	4b47      	ldr	r3, [pc, #284]	@ (80026e0 <runSystem+0xf5c>)
 80025c4:	701a      	strb	r2, [r3, #0]
			min_alarm_flag = 1;
 80025c6:	4b47      	ldr	r3, [pc, #284]	@ (80026e4 <runSystem+0xf60>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
			count_blink = 0;
 80025cc:	4b42      	ldr	r3, [pc, #264]	@ (80026d8 <runSystem+0xf54>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 80025d2:	4b42      	ldr	r3, [pc, #264]	@ (80026dc <runSystem+0xf58>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	701a      	strb	r2, [r3, #0]
			systemState = CHECK_ALARM;
 80025d8:	4b43      	ldr	r3, [pc, #268]	@ (80026e8 <runSystem+0xf64>)
 80025da:	2208      	movs	r2, #8
 80025dc:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 80025de:	2000      	movs	r0, #0
 80025e0:	f7fe fb68 	bl	8000cb4 <lcd_Clear>
		}
		if(button_count[0] == 1){
 80025e4:	4b3b      	ldr	r3, [pc, #236]	@ (80026d4 <runSystem+0xf50>)
 80025e6:	881b      	ldrh	r3, [r3, #0]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	f040 8109 	bne.w	8002800 <runSystem+0x107c>
			count_blink = 0;
 80025ee:	4b3a      	ldr	r3, [pc, #232]	@ (80026d8 <runSystem+0xf54>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 80025f4:	4b39      	ldr	r3, [pc, #228]	@ (80026dc <runSystem+0xf58>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
			systemState = CHECK_ALARM;
 80025fa:	4b3b      	ldr	r3, [pc, #236]	@ (80026e8 <runSystem+0xf64>)
 80025fc:	2208      	movs	r2, #8
 80025fe:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8002600:	2000      	movs	r0, #0
 8002602:	f7fe fb57 	bl	8000cb4 <lcd_Clear>
		}
		break;
 8002606:	e0fb      	b.n	8002800 <runSystem+0x107c>
	case CHECK_ALARM:
		count_blink = count_blink + 1;
 8002608:	4b33      	ldr	r3, [pc, #204]	@ (80026d8 <runSystem+0xf54>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	3301      	adds	r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b31      	ldr	r3, [pc, #196]	@ (80026d8 <runSystem+0xf54>)
 8002612:	701a      	strb	r2, [r3, #0]
		if(hour_alarm_flag == 1 && min_alarm_flag == 1){
 8002614:	4b35      	ldr	r3, [pc, #212]	@ (80026ec <runSystem+0xf68>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d173      	bne.n	8002704 <runSystem+0xf80>
 800261c:	4b31      	ldr	r3, [pc, #196]	@ (80026e4 <runSystem+0xf60>)
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d16f      	bne.n	8002704 <runSystem+0xf80>
			lcd_ShowStr(20, 30, "set Alarm Success", WHITE, BLUE, 24, 0);
 8002624:	2300      	movs	r3, #0
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	2318      	movs	r3, #24
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	231f      	movs	r3, #31
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002634:	4a2e      	ldr	r2, [pc, #184]	@ (80026f0 <runSystem+0xf6c>)
 8002636:	211e      	movs	r1, #30
 8002638:	2014      	movs	r0, #20
 800263a:	f7fe feb1 	bl	80013a0 <lcd_ShowStr>
			lcd_ShowStr(20, 60, "HOUR: ", WHITE, BLACK, 24, 0);
 800263e:	2300      	movs	r3, #0
 8002640:	9302      	str	r3, [sp, #8]
 8002642:	2318      	movs	r3, #24
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	2300      	movs	r3, #0
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800264e:	4a29      	ldr	r2, [pc, #164]	@ (80026f4 <runSystem+0xf70>)
 8002650:	213c      	movs	r1, #60	@ 0x3c
 8002652:	2014      	movs	r0, #20
 8002654:	f7fe fea4 	bl	80013a0 <lcd_ShowStr>
			lcd_ShowIntNum(100, 60, alarm_hour, 2, GREEN, BLACK, 24);
 8002658:	4b27      	ldr	r3, [pc, #156]	@ (80026f8 <runSystem+0xf74>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	2318      	movs	r3, #24
 8002660:	9302      	str	r3, [sp, #8]
 8002662:	2300      	movs	r3, #0
 8002664:	9301      	str	r3, [sp, #4]
 8002666:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2302      	movs	r3, #2
 800266e:	213c      	movs	r1, #60	@ 0x3c
 8002670:	2064      	movs	r0, #100	@ 0x64
 8002672:	f7fe fc93 	bl	8000f9c <lcd_ShowIntNum>
			lcd_ShowStr(20, 90, "MIN: ", WHITE, BLACK, 24, 0);
 8002676:	2300      	movs	r3, #0
 8002678:	9302      	str	r3, [sp, #8]
 800267a:	2318      	movs	r3, #24
 800267c:	9301      	str	r3, [sp, #4]
 800267e:	2300      	movs	r3, #0
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002686:	4a1d      	ldr	r2, [pc, #116]	@ (80026fc <runSystem+0xf78>)
 8002688:	215a      	movs	r1, #90	@ 0x5a
 800268a:	2014      	movs	r0, #20
 800268c:	f7fe fe88 	bl	80013a0 <lcd_ShowStr>
			lcd_ShowIntNum(100, 90, alarm_min, 2, GREEN, BLACK, 24);
 8002690:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <runSystem+0xf5c>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	461a      	mov	r2, r3
 8002696:	2318      	movs	r3, #24
 8002698:	9302      	str	r3, [sp, #8]
 800269a:	2300      	movs	r3, #0
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2302      	movs	r3, #2
 80026a6:	215a      	movs	r1, #90	@ 0x5a
 80026a8:	2064      	movs	r0, #100	@ 0x64
 80026aa:	f7fe fc77 	bl	8000f9c <lcd_ShowIntNum>
			set_alarm_flag = 1;
 80026ae:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <runSystem+0xf7c>)
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]
 80026b4:	e079      	b.n	80027aa <runSystem+0x1026>
 80026b6:	bf00      	nop
 80026b8:	20000123 	.word	0x20000123
 80026bc:	2000005b 	.word	0x2000005b
 80026c0:	2000005d 	.word	0x2000005d
 80026c4:	2000005f 	.word	0x2000005f
 80026c8:	2000005e 	.word	0x2000005e
 80026cc:	20000060 	.word	0x20000060
 80026d0:	20000061 	.word	0x20000061
 80026d4:	20000030 	.word	0x20000030
 80026d8:	2000011e 	.word	0x2000011e
 80026dc:	2000011f 	.word	0x2000011f
 80026e0:	2000011d 	.word	0x2000011d
 80026e4:	20000122 	.word	0x20000122
 80026e8:	20000118 	.word	0x20000118
 80026ec:	20000121 	.word	0x20000121
 80026f0:	08007aa8 	.word	0x08007aa8
 80026f4:	08007abc 	.word	0x08007abc
 80026f8:	2000011c 	.word	0x2000011c
 80026fc:	08007ac4 	.word	0x08007ac4
 8002700:	20000120 	.word	0x20000120
		}else if(hour_alarm_flag == 0 && min_alarm_flag == 1){
 8002704:	4b40      	ldr	r3, [pc, #256]	@ (8002808 <runSystem+0x1084>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d11e      	bne.n	800274a <runSystem+0xfc6>
 800270c:	4b3f      	ldr	r3, [pc, #252]	@ (800280c <runSystem+0x1088>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d11a      	bne.n	800274a <runSystem+0xfc6>
			lcd_ShowStr(20, 30, "Not set alarm", WHITE, BLUE, 24, 0);
 8002714:	2300      	movs	r3, #0
 8002716:	9302      	str	r3, [sp, #8]
 8002718:	2318      	movs	r3, #24
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	231f      	movs	r3, #31
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002724:	4a3a      	ldr	r2, [pc, #232]	@ (8002810 <runSystem+0x108c>)
 8002726:	211e      	movs	r1, #30
 8002728:	2014      	movs	r0, #20
 800272a:	f7fe fe39 	bl	80013a0 <lcd_ShowStr>
			lcd_ShowStr(22, 60, "hour yet", WHITE, BLUE, 24, 0);
 800272e:	2300      	movs	r3, #0
 8002730:	9302      	str	r3, [sp, #8]
 8002732:	2318      	movs	r3, #24
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	231f      	movs	r3, #31
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800273e:	4a35      	ldr	r2, [pc, #212]	@ (8002814 <runSystem+0x1090>)
 8002740:	213c      	movs	r1, #60	@ 0x3c
 8002742:	2016      	movs	r0, #22
 8002744:	f7fe fe2c 	bl	80013a0 <lcd_ShowStr>
 8002748:	e02f      	b.n	80027aa <runSystem+0x1026>
		}else if(hour_alarm_flag == 1 && min_alarm_flag == 0){
 800274a:	4b2f      	ldr	r3, [pc, #188]	@ (8002808 <runSystem+0x1084>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d11e      	bne.n	8002790 <runSystem+0x100c>
 8002752:	4b2e      	ldr	r3, [pc, #184]	@ (800280c <runSystem+0x1088>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d11a      	bne.n	8002790 <runSystem+0x100c>
			lcd_ShowStr(20, 30, "Not set alarm", WHITE, BLUE, 24, 0);
 800275a:	2300      	movs	r3, #0
 800275c:	9302      	str	r3, [sp, #8]
 800275e:	2318      	movs	r3, #24
 8002760:	9301      	str	r3, [sp, #4]
 8002762:	231f      	movs	r3, #31
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800276a:	4a29      	ldr	r2, [pc, #164]	@ (8002810 <runSystem+0x108c>)
 800276c:	211e      	movs	r1, #30
 800276e:	2014      	movs	r0, #20
 8002770:	f7fe fe16 	bl	80013a0 <lcd_ShowStr>
			lcd_ShowStr(22, 60, "min yet", WHITE, BLUE, 24, 0);
 8002774:	2300      	movs	r3, #0
 8002776:	9302      	str	r3, [sp, #8]
 8002778:	2318      	movs	r3, #24
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	231f      	movs	r3, #31
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002784:	4a24      	ldr	r2, [pc, #144]	@ (8002818 <runSystem+0x1094>)
 8002786:	213c      	movs	r1, #60	@ 0x3c
 8002788:	2016      	movs	r0, #22
 800278a:	f7fe fe09 	bl	80013a0 <lcd_ShowStr>
 800278e:	e00c      	b.n	80027aa <runSystem+0x1026>
		}else{
			lcd_ShowStr(20, 30, "Not set alarm", WHITE, BLUE, 24, 0);
 8002790:	2300      	movs	r3, #0
 8002792:	9302      	str	r3, [sp, #8]
 8002794:	2318      	movs	r3, #24
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	231f      	movs	r3, #31
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80027a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002810 <runSystem+0x108c>)
 80027a2:	211e      	movs	r1, #30
 80027a4:	2014      	movs	r0, #20
 80027a6:	f7fe fdfb 	bl	80013a0 <lcd_ShowStr>
		}
		if(count_blink%60 == 0){
 80027aa:	4b1c      	ldr	r3, [pc, #112]	@ (800281c <runSystem+0x1098>)
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <runSystem+0x109c>)
 80027b0:	fba3 1302 	umull	r1, r3, r3, r2
 80027b4:	0959      	lsrs	r1, r3, #5
 80027b6:	460b      	mov	r3, r1
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	1a5b      	subs	r3, r3, r1
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d11d      	bne.n	8002802 <runSystem+0x107e>
			hour_alarm_flag = 0;
 80027c6:	4b10      	ldr	r3, [pc, #64]	@ (8002808 <runSystem+0x1084>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
			min_alarm_flag = 0;
 80027cc:	4b0f      	ldr	r3, [pc, #60]	@ (800280c <runSystem+0x1088>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
			count_blink = 0;
 80027d2:	4b12      	ldr	r3, [pc, #72]	@ (800281c <runSystem+0x1098>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 80027d8:	4b12      	ldr	r3, [pc, #72]	@ (8002824 <runSystem+0x10a0>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
			systemState = NORMAL;
 80027de:	4b12      	ldr	r3, [pc, #72]	@ (8002828 <runSystem+0x10a4>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 80027e4:	2000      	movs	r0, #0
 80027e6:	f7fe fa65 	bl	8000cb4 <lcd_Clear>
		}
	}

}
 80027ea:	e00a      	b.n	8002802 <runSystem+0x107e>
		break;
 80027ec:	bf00      	nop
 80027ee:	e008      	b.n	8002802 <runSystem+0x107e>
		break;
 80027f0:	bf00      	nop
 80027f2:	e006      	b.n	8002802 <runSystem+0x107e>
		break;
 80027f4:	bf00      	nop
 80027f6:	e004      	b.n	8002802 <runSystem+0x107e>
		break;
 80027f8:	bf00      	nop
 80027fa:	e002      	b.n	8002802 <runSystem+0x107e>
		break;
 80027fc:	bf00      	nop
 80027fe:	e000      	b.n	8002802 <runSystem+0x107e>
		break;
 8002800:	bf00      	nop
}
 8002802:	bf00      	nop
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	20000121 	.word	0x20000121
 800280c:	20000122 	.word	0x20000122
 8002810:	08007acc 	.word	0x08007acc
 8002814:	08007adc 	.word	0x08007adc
 8002818:	08007ae8 	.word	0x08007ae8
 800281c:	2000011e 	.word	0x2000011e
 8002820:	88888889 	.word	0x88888889
 8002824:	2000011f 	.word	0x2000011f
 8002828:	20000118 	.word	0x20000118

0800282c <displayTime>:
void displayTime(){
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8002832:	4b36      	ldr	r3, [pc, #216]	@ (800290c <displayTime+0xe0>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	2318      	movs	r3, #24
 800283a:	9302      	str	r3, [sp, #8]
 800283c:	2300      	movs	r3, #0
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002844:	9300      	str	r3, [sp, #0]
 8002846:	2302      	movs	r3, #2
 8002848:	2164      	movs	r1, #100	@ 0x64
 800284a:	2046      	movs	r0, #70	@ 0x46
 800284c:	f7fe fba6 	bl	8000f9c <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8002850:	4b2f      	ldr	r3, [pc, #188]	@ (8002910 <displayTime+0xe4>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	2318      	movs	r3, #24
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	2300      	movs	r3, #0
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2302      	movs	r3, #2
 8002866:	2164      	movs	r1, #100	@ 0x64
 8002868:	206e      	movs	r0, #110	@ 0x6e
 800286a:	f7fe fb97 	bl	8000f9c <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 800286e:	4b29      	ldr	r3, [pc, #164]	@ (8002914 <displayTime+0xe8>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	2318      	movs	r3, #24
 8002876:	9302      	str	r3, [sp, #8]
 8002878:	2300      	movs	r3, #0
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002880:	9300      	str	r3, [sp, #0]
 8002882:	2302      	movs	r3, #2
 8002884:	2164      	movs	r1, #100	@ 0x64
 8002886:	2096      	movs	r0, #150	@ 0x96
 8002888:	f7fe fb88 	bl	8000f9c <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 800288c:	4b22      	ldr	r3, [pc, #136]	@ (8002918 <displayTime+0xec>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	461a      	mov	r2, r3
 8002892:	2318      	movs	r3, #24
 8002894:	9302      	str	r3, [sp, #8]
 8002896:	2300      	movs	r3, #0
 8002898:	9301      	str	r3, [sp, #4]
 800289a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2302      	movs	r3, #2
 80028a2:	2182      	movs	r1, #130	@ 0x82
 80028a4:	2014      	movs	r0, #20
 80028a6:	f7fe fb79 	bl	8000f9c <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 80028aa:	4b1c      	ldr	r3, [pc, #112]	@ (800291c <displayTime+0xf0>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	2318      	movs	r3, #24
 80028b2:	9302      	str	r3, [sp, #8]
 80028b4:	2300      	movs	r3, #0
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2302      	movs	r3, #2
 80028c0:	2182      	movs	r1, #130	@ 0x82
 80028c2:	2046      	movs	r0, #70	@ 0x46
 80028c4:	f7fe fb6a 	bl	8000f9c <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 80028c8:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <displayTime+0xf4>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	2318      	movs	r3, #24
 80028d0:	9302      	str	r3, [sp, #8]
 80028d2:	2300      	movs	r3, #0
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	2302      	movs	r3, #2
 80028de:	2182      	movs	r1, #130	@ 0x82
 80028e0:	206e      	movs	r0, #110	@ 0x6e
 80028e2:	f7fe fb5b 	bl	8000f9c <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80028e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002924 <displayTime+0xf8>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	2318      	movs	r3, #24
 80028ee:	9302      	str	r3, [sp, #8]
 80028f0:	2300      	movs	r3, #0
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2302      	movs	r3, #2
 80028fc:	2182      	movs	r1, #130	@ 0x82
 80028fe:	2096      	movs	r0, #150	@ 0x96
 8002900:	f7fe fb4c 	bl	8000f9c <lcd_ShowIntNum>
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2000005b 	.word	0x2000005b
 8002910:	2000005c 	.word	0x2000005c
 8002914:	2000005d 	.word	0x2000005d
 8002918:	2000005f 	.word	0x2000005f
 800291c:	2000005e 	.word	0x2000005e
 8002920:	20000060 	.word	0x20000060
 8002924:	20000061 	.word	0x20000061

08002928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800292c:	b672      	cpsid	i
}
 800292e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002930:	bf00      	nop
 8002932:	e7fd      	b.n	8002930 <Error_Handler+0x8>

08002934 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002938:	4802      	ldr	r0, [pc, #8]	@ (8002944 <timer_init+0x10>)
 800293a:	f003 fafd 	bl	8005f38 <HAL_TIM_Base_Start_IT>
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000184 	.word	0x20000184

08002948 <setTimer2>:

void setTimer2(uint16_t duration){
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002952:	4a08      	ldr	r2, [pc, #32]	@ (8002974 <setTimer2+0x2c>)
 8002954:	88fb      	ldrh	r3, [r7, #6]
 8002956:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002958:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <setTimer2+0x2c>)
 800295a:	881a      	ldrh	r2, [r3, #0]
 800295c:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <setTimer2+0x30>)
 800295e:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002960:	4b06      	ldr	r3, [pc, #24]	@ (800297c <setTimer2+0x34>)
 8002962:	2200      	movs	r2, #0
 8002964:	801a      	strh	r2, [r3, #0]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000128 	.word	0x20000128
 8002978:	20000126 	.word	0x20000126
 800297c:	20000124 	.word	0x20000124

08002980 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002990:	d116      	bne.n	80029c0 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002992:	4b0d      	ldr	r3, [pc, #52]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d010      	beq.n	80029bc <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 800299a:	4b0b      	ldr	r3, [pc, #44]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80029a4:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 80029a6:	4b08      	ldr	r3, [pc, #32]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 80029ae:	4b07      	ldr	r3, [pc, #28]	@ (80029cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 80029b4:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80029b6:	881a      	ldrh	r2, [r3, #0]
 80029b8:	4b03      	ldr	r3, [pc, #12]	@ (80029c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80029ba:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 80029bc:	f7fe fd60 	bl	8001480 <led7_Scan>
	}
}
 80029c0:	bf00      	nop
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000126 	.word	0x20000126
 80029cc:	20000124 	.word	0x20000124
 80029d0:	20000128 	.word	0x20000128

080029d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80029d8:	4b17      	ldr	r3, [pc, #92]	@ (8002a38 <MX_SPI1_Init+0x64>)
 80029da:	4a18      	ldr	r2, [pc, #96]	@ (8002a3c <MX_SPI1_Init+0x68>)
 80029dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029de:	4b16      	ldr	r3, [pc, #88]	@ (8002a38 <MX_SPI1_Init+0x64>)
 80029e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80029e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029e6:	4b14      	ldr	r3, [pc, #80]	@ (8002a38 <MX_SPI1_Init+0x64>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029ec:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <MX_SPI1_Init+0x64>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029f2:	4b11      	ldr	r3, [pc, #68]	@ (8002a38 <MX_SPI1_Init+0x64>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a38 <MX_SPI1_Init+0x64>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80029fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002a38 <MX_SPI1_Init+0x64>)
 8002a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a04:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a06:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <MX_SPI1_Init+0x64>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a38 <MX_SPI1_Init+0x64>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a12:	4b09      	ldr	r3, [pc, #36]	@ (8002a38 <MX_SPI1_Init+0x64>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a18:	4b07      	ldr	r3, [pc, #28]	@ (8002a38 <MX_SPI1_Init+0x64>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a1e:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <MX_SPI1_Init+0x64>)
 8002a20:	220a      	movs	r2, #10
 8002a22:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a24:	4804      	ldr	r0, [pc, #16]	@ (8002a38 <MX_SPI1_Init+0x64>)
 8002a26:	f002 fc1d 	bl	8005264 <HAL_SPI_Init>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a30:	f7ff ff7a 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	2000012c 	.word	0x2000012c
 8002a3c:	40013000 	.word	0x40013000

08002a40 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08a      	sub	sp, #40	@ 0x28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a19      	ldr	r2, [pc, #100]	@ (8002ac4 <HAL_SPI_MspInit+0x84>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d12b      	bne.n	8002aba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	4b18      	ldr	r3, [pc, #96]	@ (8002ac8 <HAL_SPI_MspInit+0x88>)
 8002a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a6a:	4a17      	ldr	r2, [pc, #92]	@ (8002ac8 <HAL_SPI_MspInit+0x88>)
 8002a6c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <HAL_SPI_MspInit+0x88>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <HAL_SPI_MspInit+0x88>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	4a10      	ldr	r2, [pc, #64]	@ (8002ac8 <HAL_SPI_MspInit+0x88>)
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac8 <HAL_SPI_MspInit+0x88>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a9a:	2338      	movs	r3, #56	@ 0x38
 8002a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002aaa:	2305      	movs	r3, #5
 8002aac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aae:	f107 0314 	add.w	r3, r7, #20
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4805      	ldr	r0, [pc, #20]	@ (8002acc <HAL_SPI_MspInit+0x8c>)
 8002ab6:	f000 fc35 	bl	8003324 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002aba:	bf00      	nop
 8002abc:	3728      	adds	r7, #40	@ 0x28
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40013000 	.word	0x40013000
 8002ac8:	40023800 	.word	0x40023800
 8002acc:	40020400 	.word	0x40020400

08002ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]
 8002ada:	4b10      	ldr	r3, [pc, #64]	@ (8002b1c <HAL_MspInit+0x4c>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	4a0f      	ldr	r2, [pc, #60]	@ (8002b1c <HAL_MspInit+0x4c>)
 8002ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b1c <HAL_MspInit+0x4c>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aee:	607b      	str	r3, [r7, #4]
 8002af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	4b09      	ldr	r3, [pc, #36]	@ (8002b1c <HAL_MspInit+0x4c>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	4a08      	ldr	r2, [pc, #32]	@ (8002b1c <HAL_MspInit+0x4c>)
 8002afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b02:	4b06      	ldr	r3, [pc, #24]	@ (8002b1c <HAL_MspInit+0x4c>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800

08002b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <NMI_Handler+0x4>

08002b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2c:	bf00      	nop
 8002b2e:	e7fd      	b.n	8002b2c <HardFault_Handler+0x4>

08002b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b34:	bf00      	nop
 8002b36:	e7fd      	b.n	8002b34 <MemManage_Handler+0x4>

08002b38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <BusFault_Handler+0x4>

08002b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b44:	bf00      	nop
 8002b46:	e7fd      	b.n	8002b44 <UsageFault_Handler+0x4>

08002b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b56:	b480      	push	{r7}
 8002b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b68:	bf00      	nop
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b76:	f000 f9ed 	bl	8002f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b84:	4802      	ldr	r0, [pc, #8]	@ (8002b90 <TIM2_IRQHandler+0x10>)
 8002b86:	f003 fa47 	bl	8006018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000184 	.word	0x20000184

08002b94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b98:	4802      	ldr	r0, [pc, #8]	@ (8002ba4 <USART1_IRQHandler+0x10>)
 8002b9a:	f003 fef3 	bl	8006984 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	200001d0 	.word	0x200001d0

08002ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bac:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <SystemInit+0x20>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb2:	4a05      	ldr	r2, [pc, #20]	@ (8002bc8 <SystemInit+0x20>)
 8002bb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bd2:	f107 0308 	add.w	r3, r7, #8
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002be0:	463b      	mov	r3, r7
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002be8:	4b1d      	ldr	r3, [pc, #116]	@ (8002c60 <MX_TIM2_Init+0x94>)
 8002bea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002bee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c60 <MX_TIM2_Init+0x94>)
 8002bf2:	f240 3247 	movw	r2, #839	@ 0x347
 8002bf6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf8:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <MX_TIM2_Init+0x94>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002bfe:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <MX_TIM2_Init+0x94>)
 8002c00:	2263      	movs	r2, #99	@ 0x63
 8002c02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c04:	4b16      	ldr	r3, [pc, #88]	@ (8002c60 <MX_TIM2_Init+0x94>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c0a:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <MX_TIM2_Init+0x94>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c10:	4813      	ldr	r0, [pc, #76]	@ (8002c60 <MX_TIM2_Init+0x94>)
 8002c12:	f003 f941 	bl	8005e98 <HAL_TIM_Base_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002c1c:	f7ff fe84 	bl	8002928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c26:	f107 0308 	add.w	r3, r7, #8
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	480c      	ldr	r0, [pc, #48]	@ (8002c60 <MX_TIM2_Init+0x94>)
 8002c2e:	f003 fae3 	bl	80061f8 <HAL_TIM_ConfigClockSource>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002c38:	f7ff fe76 	bl	8002928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c40:	2300      	movs	r3, #0
 8002c42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c44:	463b      	mov	r3, r7
 8002c46:	4619      	mov	r1, r3
 8002c48:	4805      	ldr	r0, [pc, #20]	@ (8002c60 <MX_TIM2_Init+0x94>)
 8002c4a:	f003 fd0b 	bl	8006664 <HAL_TIMEx_MasterConfigSynchronization>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002c54:	f7ff fe68 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002c58:	bf00      	nop
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000184 	.word	0x20000184

08002c64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c74:	d115      	bne.n	8002ca2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c76:	2300      	movs	r3, #0
 8002c78:	60fb      	str	r3, [r7, #12]
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002cac <HAL_TIM_Base_MspInit+0x48>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	@ (8002cac <HAL_TIM_Base_MspInit+0x48>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c86:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <HAL_TIM_Base_MspInit+0x48>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002c92:	2200      	movs	r2, #0
 8002c94:	2100      	movs	r1, #0
 8002c96:	201c      	movs	r0, #28
 8002c98:	f000 fa7b 	bl	8003192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c9c:	201c      	movs	r0, #28
 8002c9e:	f000 fa94 	bl	80031ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a08      	ldr	r2, [pc, #32]	@ (8002ce0 <HAL_UART_RxCpltCallback+0x30>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d10a      	bne.n	8002cd8 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002cc2:	230a      	movs	r3, #10
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4907      	ldr	r1, [pc, #28]	@ (8002ce4 <HAL_UART_RxCpltCallback+0x34>)
 8002cc8:	4807      	ldr	r0, [pc, #28]	@ (8002ce8 <HAL_UART_RxCpltCallback+0x38>)
 8002cca:	f003 fdab 	bl	8006824 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002cce:	2201      	movs	r2, #1
 8002cd0:	4904      	ldr	r1, [pc, #16]	@ (8002ce4 <HAL_UART_RxCpltCallback+0x34>)
 8002cd2:	4805      	ldr	r0, [pc, #20]	@ (8002ce8 <HAL_UART_RxCpltCallback+0x38>)
 8002cd4:	f003 fe31 	bl	800693a <HAL_UART_Receive_IT>
	}
}
 8002cd8:	bf00      	nop
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40011000 	.word	0x40011000
 8002ce4:	200001cc 	.word	0x200001cc
 8002ce8:	200001d0 	.word	0x200001d0

08002cec <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cf0:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002cf2:	4a12      	ldr	r2, [pc, #72]	@ (8002d3c <MX_USART1_UART_Init+0x50>)
 8002cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cf6:	4b10      	ldr	r3, [pc, #64]	@ (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002cf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d04:	4b0c      	ldr	r3, [pc, #48]	@ (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d10:	4b09      	ldr	r3, [pc, #36]	@ (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002d12:	220c      	movs	r2, #12
 8002d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d16:	4b08      	ldr	r3, [pc, #32]	@ (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d1c:	4b06      	ldr	r3, [pc, #24]	@ (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d22:	4805      	ldr	r0, [pc, #20]	@ (8002d38 <MX_USART1_UART_Init+0x4c>)
 8002d24:	f003 fd2e 	bl	8006784 <HAL_UART_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002d2e:	f7ff fdfb 	bl	8002928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200001d0 	.word	0x200001d0
 8002d3c:	40011000 	.word	0x40011000

08002d40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	@ 0x28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd4 <HAL_UART_MspInit+0x94>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d134      	bne.n	8002dcc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd8 <HAL_UART_MspInit+0x98>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd8 <HAL_UART_MspInit+0x98>)
 8002d6c:	f043 0310 	orr.w	r3, r3, #16
 8002d70:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d72:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_UART_MspInit+0x98>)
 8002d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]
 8002d82:	4b15      	ldr	r3, [pc, #84]	@ (8002dd8 <HAL_UART_MspInit+0x98>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	4a14      	ldr	r2, [pc, #80]	@ (8002dd8 <HAL_UART_MspInit+0x98>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d8e:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <HAL_UART_MspInit+0x98>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	60fb      	str	r3, [r7, #12]
 8002d98:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d9a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	2300      	movs	r3, #0
 8002da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da8:	2303      	movs	r3, #3
 8002daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002dac:	2307      	movs	r3, #7
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db0:	f107 0314 	add.w	r3, r7, #20
 8002db4:	4619      	mov	r1, r3
 8002db6:	4809      	ldr	r0, [pc, #36]	@ (8002ddc <HAL_UART_MspInit+0x9c>)
 8002db8:	f000 fab4 	bl	8003324 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2025      	movs	r0, #37	@ 0x25
 8002dc2:	f000 f9e6 	bl	8003192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dc6:	2025      	movs	r0, #37	@ 0x25
 8002dc8:	f000 f9ff 	bl	80031ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002dcc:	bf00      	nop
 8002dce:	3728      	adds	r7, #40	@ 0x28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40011000 	.word	0x40011000
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40020000 	.word	0x40020000

08002de0 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	091b      	lsrs	r3, r3, #4
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	0092      	lsls	r2, r2, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	f003 030f 	and.w	r3, r3, #15
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	b2db      	uxtb	r3, r3
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
	...

08002e14 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	4a0d      	ldr	r2, [pc, #52]	@ (8002e58 <DEC2BCD+0x44>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	08db      	lsrs	r3, r3, #3
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	b258      	sxtb	r0, r3
 8002e2e:	79fa      	ldrb	r2, [r7, #7]
 8002e30:	4b09      	ldr	r3, [pc, #36]	@ (8002e58 <DEC2BCD+0x44>)
 8002e32:	fba3 1302 	umull	r1, r3, r3, r2
 8002e36:	08d9      	lsrs	r1, r3, #3
 8002e38:	460b      	mov	r3, r1
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	b25b      	sxtb	r3, r3
 8002e46:	4303      	orrs	r3, r0
 8002e48:	b25b      	sxtb	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr
 8002e58:	cccccccd 	.word	0xcccccccd

08002e5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e60:	f7ff fea2 	bl	8002ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e64:	480c      	ldr	r0, [pc, #48]	@ (8002e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e66:	490d      	ldr	r1, [pc, #52]	@ (8002e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e68:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e6c:	e002      	b.n	8002e74 <LoopCopyDataInit>

08002e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e72:	3304      	adds	r3, #4

08002e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e78:	d3f9      	bcc.n	8002e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e7c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e80:	e001      	b.n	8002e86 <LoopFillZerobss>

08002e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e84:	3204      	adds	r2, #4

08002e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e88:	d3fb      	bcc.n	8002e82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e8a:	f004 fdb1 	bl	80079f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e8e:	f7fe fb83 	bl	8001598 <main>
  bx  lr    
 8002e92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e9c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002ea0:	0800aa98 	.word	0x0800aa98
  ldr r2, =_sbss
 8002ea4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002ea8:	2000021c 	.word	0x2000021c

08002eac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eac:	e7fe      	b.n	8002eac <ADC_IRQHandler>
	...

08002eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef0 <HAL_Init+0x40>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef0 <HAL_Init+0x40>)
 8002eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <HAL_Init+0x40>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef0 <HAL_Init+0x40>)
 8002ec6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ecc:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <HAL_Init+0x40>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a07      	ldr	r2, [pc, #28]	@ (8002ef0 <HAL_Init+0x40>)
 8002ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed8:	2003      	movs	r0, #3
 8002eda:	f000 f94f 	bl	800317c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ede:	200f      	movs	r0, #15
 8002ee0:	f000 f808 	bl	8002ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee4:	f7ff fdf4 	bl	8002ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40023c00 	.word	0x40023c00

08002ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002efc:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <HAL_InitTick+0x54>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b12      	ldr	r3, [pc, #72]	@ (8002f4c <HAL_InitTick+0x58>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	4619      	mov	r1, r3
 8002f06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f000 f967 	bl	80031e6 <HAL_SYSTICK_Config>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e00e      	b.n	8002f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b0f      	cmp	r3, #15
 8002f26:	d80a      	bhi.n	8002f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f30:	f000 f92f 	bl	8003192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f34:	4a06      	ldr	r2, [pc, #24]	@ (8002f50 <HAL_InitTick+0x5c>)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	e000      	b.n	8002f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	20000008 	.word	0x20000008
 8002f4c:	20000010 	.word	0x20000010
 8002f50:	2000000c 	.word	0x2000000c

08002f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f58:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <HAL_IncTick+0x20>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	4b06      	ldr	r3, [pc, #24]	@ (8002f78 <HAL_IncTick+0x24>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4413      	add	r3, r2
 8002f64:	4a04      	ldr	r2, [pc, #16]	@ (8002f78 <HAL_IncTick+0x24>)
 8002f66:	6013      	str	r3, [r2, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000010 	.word	0x20000010
 8002f78:	20000218 	.word	0x20000218

08002f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f80:	4b03      	ldr	r3, [pc, #12]	@ (8002f90 <HAL_GetTick+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	20000218 	.word	0x20000218

08002f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f9c:	f7ff ffee 	bl	8002f7c <HAL_GetTick>
 8002fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d005      	beq.n	8002fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fae:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd8 <HAL_Delay+0x44>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fba:	bf00      	nop
 8002fbc:	f7ff ffde 	bl	8002f7c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d8f7      	bhi.n	8002fbc <HAL_Delay+0x28>
  {
  }
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000010 	.word	0x20000010

08002fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f003 0307 	and.w	r3, r3, #7
 8002fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fec:	4b0c      	ldr	r3, [pc, #48]	@ (8003020 <__NVIC_SetPriorityGrouping+0x44>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003004:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800300c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800300e:	4a04      	ldr	r2, [pc, #16]	@ (8003020 <__NVIC_SetPriorityGrouping+0x44>)
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	60d3      	str	r3, [r2, #12]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003028:	4b04      	ldr	r3, [pc, #16]	@ (800303c <__NVIC_GetPriorityGrouping+0x18>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	0a1b      	lsrs	r3, r3, #8
 800302e:	f003 0307 	and.w	r3, r3, #7
}
 8003032:	4618      	mov	r0, r3
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000ed00 	.word	0xe000ed00

08003040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	2b00      	cmp	r3, #0
 8003050:	db0b      	blt.n	800306a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	f003 021f 	and.w	r2, r3, #31
 8003058:	4907      	ldr	r1, [pc, #28]	@ (8003078 <__NVIC_EnableIRQ+0x38>)
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	095b      	lsrs	r3, r3, #5
 8003060:	2001      	movs	r0, #1
 8003062:	fa00 f202 	lsl.w	r2, r0, r2
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800306a:	bf00      	nop
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	e000e100 	.word	0xe000e100

0800307c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	6039      	str	r1, [r7, #0]
 8003086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800308c:	2b00      	cmp	r3, #0
 800308e:	db0a      	blt.n	80030a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	b2da      	uxtb	r2, r3
 8003094:	490c      	ldr	r1, [pc, #48]	@ (80030c8 <__NVIC_SetPriority+0x4c>)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	0112      	lsls	r2, r2, #4
 800309c:	b2d2      	uxtb	r2, r2
 800309e:	440b      	add	r3, r1
 80030a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030a4:	e00a      	b.n	80030bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	4908      	ldr	r1, [pc, #32]	@ (80030cc <__NVIC_SetPriority+0x50>)
 80030ac:	79fb      	ldrb	r3, [r7, #7]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	3b04      	subs	r3, #4
 80030b4:	0112      	lsls	r2, r2, #4
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	440b      	add	r3, r1
 80030ba:	761a      	strb	r2, [r3, #24]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000e100 	.word	0xe000e100
 80030cc:	e000ed00 	.word	0xe000ed00

080030d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b089      	sub	sp, #36	@ 0x24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f1c3 0307 	rsb	r3, r3, #7
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	bf28      	it	cs
 80030ee:	2304      	movcs	r3, #4
 80030f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	3304      	adds	r3, #4
 80030f6:	2b06      	cmp	r3, #6
 80030f8:	d902      	bls.n	8003100 <NVIC_EncodePriority+0x30>
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3b03      	subs	r3, #3
 80030fe:	e000      	b.n	8003102 <NVIC_EncodePriority+0x32>
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003104:	f04f 32ff 	mov.w	r2, #4294967295
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43da      	mvns	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	401a      	ands	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003118:	f04f 31ff 	mov.w	r1, #4294967295
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	fa01 f303 	lsl.w	r3, r1, r3
 8003122:	43d9      	mvns	r1, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003128:	4313      	orrs	r3, r2
         );
}
 800312a:	4618      	mov	r0, r3
 800312c:	3724      	adds	r7, #36	@ 0x24
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3b01      	subs	r3, #1
 8003144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003148:	d301      	bcc.n	800314e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800314a:	2301      	movs	r3, #1
 800314c:	e00f      	b.n	800316e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800314e:	4a0a      	ldr	r2, [pc, #40]	@ (8003178 <SysTick_Config+0x40>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3b01      	subs	r3, #1
 8003154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003156:	210f      	movs	r1, #15
 8003158:	f04f 30ff 	mov.w	r0, #4294967295
 800315c:	f7ff ff8e 	bl	800307c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003160:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <SysTick_Config+0x40>)
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003166:	4b04      	ldr	r3, [pc, #16]	@ (8003178 <SysTick_Config+0x40>)
 8003168:	2207      	movs	r2, #7
 800316a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	e000e010 	.word	0xe000e010

0800317c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff ff29 	bl	8002fdc <__NVIC_SetPriorityGrouping>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003192:	b580      	push	{r7, lr}
 8003194:	b086      	sub	sp, #24
 8003196:	af00      	add	r7, sp, #0
 8003198:	4603      	mov	r3, r0
 800319a:	60b9      	str	r1, [r7, #8]
 800319c:	607a      	str	r2, [r7, #4]
 800319e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031a4:	f7ff ff3e 	bl	8003024 <__NVIC_GetPriorityGrouping>
 80031a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68b9      	ldr	r1, [r7, #8]
 80031ae:	6978      	ldr	r0, [r7, #20]
 80031b0:	f7ff ff8e 	bl	80030d0 <NVIC_EncodePriority>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ba:	4611      	mov	r1, r2
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff5d 	bl	800307c <__NVIC_SetPriority>
}
 80031c2:	bf00      	nop
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff ff31 	bl	8003040 <__NVIC_EnableIRQ>
}
 80031de:	bf00      	nop
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff ffa2 	bl	8003138 <SysTick_Config>
 80031f4:	4603      	mov	r3, r0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b084      	sub	sp, #16
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800320a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800320c:	f7ff feb6 	bl	8002f7c <HAL_GetTick>
 8003210:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d008      	beq.n	8003230 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2280      	movs	r2, #128	@ 0x80
 8003222:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e052      	b.n	80032d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0216 	bic.w	r2, r2, #22
 800323e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800324e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d103      	bne.n	8003260 <HAL_DMA_Abort+0x62>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325c:	2b00      	cmp	r3, #0
 800325e:	d007      	beq.n	8003270 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0208 	bic.w	r2, r2, #8
 800326e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003280:	e013      	b.n	80032aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003282:	f7ff fe7b 	bl	8002f7c <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b05      	cmp	r3, #5
 800328e:	d90c      	bls.n	80032aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2203      	movs	r2, #3
 800329a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e015      	b.n	80032d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1e4      	bne.n	8003282 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032bc:	223f      	movs	r2, #63	@ 0x3f
 80032be:	409a      	lsls	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d004      	beq.n	80032fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2280      	movs	r2, #128	@ 0x80
 80032f6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e00c      	b.n	8003316 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2205      	movs	r2, #5
 8003300:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f022 0201 	bic.w	r2, r2, #1
 8003312:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003324:	b480      	push	{r7}
 8003326:	b089      	sub	sp, #36	@ 0x24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003336:	2300      	movs	r3, #0
 8003338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	e16b      	b.n	8003618 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003340:	2201      	movs	r2, #1
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	429a      	cmp	r2, r3
 800335a:	f040 815a 	bne.w	8003612 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d005      	beq.n	8003376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003372:	2b02      	cmp	r3, #2
 8003374:	d130      	bne.n	80033d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	2203      	movs	r2, #3
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033ac:	2201      	movs	r2, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 0201 	and.w	r2, r3, #1
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d017      	beq.n	8003414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d123      	bne.n	8003468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	08da      	lsrs	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3208      	adds	r2, #8
 8003428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	220f      	movs	r2, #15
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	08da      	lsrs	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3208      	adds	r2, #8
 8003462:	69b9      	ldr	r1, [r7, #24]
 8003464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	2203      	movs	r2, #3
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0203 	and.w	r2, r3, #3
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80b4 	beq.w	8003612 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b60      	ldr	r3, [pc, #384]	@ (8003630 <HAL_GPIO_Init+0x30c>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003630 <HAL_GPIO_Init+0x30c>)
 80034b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003630 <HAL_GPIO_Init+0x30c>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003634 <HAL_GPIO_Init+0x310>)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	3302      	adds	r3, #2
 80034ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	220f      	movs	r2, #15
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a52      	ldr	r2, [pc, #328]	@ (8003638 <HAL_GPIO_Init+0x314>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d02b      	beq.n	800354a <HAL_GPIO_Init+0x226>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a51      	ldr	r2, [pc, #324]	@ (800363c <HAL_GPIO_Init+0x318>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d025      	beq.n	8003546 <HAL_GPIO_Init+0x222>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a50      	ldr	r2, [pc, #320]	@ (8003640 <HAL_GPIO_Init+0x31c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01f      	beq.n	8003542 <HAL_GPIO_Init+0x21e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4f      	ldr	r2, [pc, #316]	@ (8003644 <HAL_GPIO_Init+0x320>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d019      	beq.n	800353e <HAL_GPIO_Init+0x21a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a4e      	ldr	r2, [pc, #312]	@ (8003648 <HAL_GPIO_Init+0x324>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <HAL_GPIO_Init+0x216>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a4d      	ldr	r2, [pc, #308]	@ (800364c <HAL_GPIO_Init+0x328>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00d      	beq.n	8003536 <HAL_GPIO_Init+0x212>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4c      	ldr	r2, [pc, #304]	@ (8003650 <HAL_GPIO_Init+0x32c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d007      	beq.n	8003532 <HAL_GPIO_Init+0x20e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4b      	ldr	r2, [pc, #300]	@ (8003654 <HAL_GPIO_Init+0x330>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d101      	bne.n	800352e <HAL_GPIO_Init+0x20a>
 800352a:	2307      	movs	r3, #7
 800352c:	e00e      	b.n	800354c <HAL_GPIO_Init+0x228>
 800352e:	2308      	movs	r3, #8
 8003530:	e00c      	b.n	800354c <HAL_GPIO_Init+0x228>
 8003532:	2306      	movs	r3, #6
 8003534:	e00a      	b.n	800354c <HAL_GPIO_Init+0x228>
 8003536:	2305      	movs	r3, #5
 8003538:	e008      	b.n	800354c <HAL_GPIO_Init+0x228>
 800353a:	2304      	movs	r3, #4
 800353c:	e006      	b.n	800354c <HAL_GPIO_Init+0x228>
 800353e:	2303      	movs	r3, #3
 8003540:	e004      	b.n	800354c <HAL_GPIO_Init+0x228>
 8003542:	2302      	movs	r3, #2
 8003544:	e002      	b.n	800354c <HAL_GPIO_Init+0x228>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <HAL_GPIO_Init+0x228>
 800354a:	2300      	movs	r3, #0
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	f002 0203 	and.w	r2, r2, #3
 8003552:	0092      	lsls	r2, r2, #2
 8003554:	4093      	lsls	r3, r2
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800355c:	4935      	ldr	r1, [pc, #212]	@ (8003634 <HAL_GPIO_Init+0x310>)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	3302      	adds	r3, #2
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800356a:	4b3b      	ldr	r3, [pc, #236]	@ (8003658 <HAL_GPIO_Init+0x334>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800358e:	4a32      	ldr	r2, [pc, #200]	@ (8003658 <HAL_GPIO_Init+0x334>)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003594:	4b30      	ldr	r3, [pc, #192]	@ (8003658 <HAL_GPIO_Init+0x334>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035b8:	4a27      	ldr	r2, [pc, #156]	@ (8003658 <HAL_GPIO_Init+0x334>)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035be:	4b26      	ldr	r3, [pc, #152]	@ (8003658 <HAL_GPIO_Init+0x334>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003658 <HAL_GPIO_Init+0x334>)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003658 <HAL_GPIO_Init+0x334>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800360c:	4a12      	ldr	r2, [pc, #72]	@ (8003658 <HAL_GPIO_Init+0x334>)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3301      	adds	r3, #1
 8003616:	61fb      	str	r3, [r7, #28]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b0f      	cmp	r3, #15
 800361c:	f67f ae90 	bls.w	8003340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	3724      	adds	r7, #36	@ 0x24
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
 8003634:	40013800 	.word	0x40013800
 8003638:	40020000 	.word	0x40020000
 800363c:	40020400 	.word	0x40020400
 8003640:	40020800 	.word	0x40020800
 8003644:	40020c00 	.word	0x40020c00
 8003648:	40021000 	.word	0x40021000
 800364c:	40021400 	.word	0x40021400
 8003650:	40021800 	.word	0x40021800
 8003654:	40021c00 	.word	0x40021c00
 8003658:	40013c00 	.word	0x40013c00

0800365c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	807b      	strh	r3, [r7, #2]
 8003668:	4613      	mov	r3, r2
 800366a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800366c:	787b      	ldrb	r3, [r7, #1]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003678:	e003      	b.n	8003682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800367a:	887b      	ldrh	r3, [r7, #2]
 800367c:	041a      	lsls	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	619a      	str	r2, [r3, #24]
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e12b      	b.n	80038fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd fa36 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2224      	movs	r2, #36	@ 0x24
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036f4:	f001 fd8e 	bl	8005214 <HAL_RCC_GetPCLK1Freq>
 80036f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	4a81      	ldr	r2, [pc, #516]	@ (8003904 <HAL_I2C_Init+0x274>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d807      	bhi.n	8003714 <HAL_I2C_Init+0x84>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4a80      	ldr	r2, [pc, #512]	@ (8003908 <HAL_I2C_Init+0x278>)
 8003708:	4293      	cmp	r3, r2
 800370a:	bf94      	ite	ls
 800370c:	2301      	movls	r3, #1
 800370e:	2300      	movhi	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e006      	b.n	8003722 <HAL_I2C_Init+0x92>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4a7d      	ldr	r2, [pc, #500]	@ (800390c <HAL_I2C_Init+0x27c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	bf94      	ite	ls
 800371c:	2301      	movls	r3, #1
 800371e:	2300      	movhi	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e0e7      	b.n	80038fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	4a78      	ldr	r2, [pc, #480]	@ (8003910 <HAL_I2C_Init+0x280>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	0c9b      	lsrs	r3, r3, #18
 8003734:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	430a      	orrs	r2, r1
 8003748:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4a6a      	ldr	r2, [pc, #424]	@ (8003904 <HAL_I2C_Init+0x274>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d802      	bhi.n	8003764 <HAL_I2C_Init+0xd4>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	3301      	adds	r3, #1
 8003762:	e009      	b.n	8003778 <HAL_I2C_Init+0xe8>
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800376a:	fb02 f303 	mul.w	r3, r2, r3
 800376e:	4a69      	ldr	r2, [pc, #420]	@ (8003914 <HAL_I2C_Init+0x284>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	099b      	lsrs	r3, r3, #6
 8003776:	3301      	adds	r3, #1
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6812      	ldr	r2, [r2, #0]
 800377c:	430b      	orrs	r3, r1
 800377e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800378a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	495c      	ldr	r1, [pc, #368]	@ (8003904 <HAL_I2C_Init+0x274>)
 8003794:	428b      	cmp	r3, r1
 8003796:	d819      	bhi.n	80037cc <HAL_I2C_Init+0x13c>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1e59      	subs	r1, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a6:	1c59      	adds	r1, r3, #1
 80037a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037ac:	400b      	ands	r3, r1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_I2C_Init+0x138>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1e59      	subs	r1, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80037c0:	3301      	adds	r3, #1
 80037c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c6:	e051      	b.n	800386c <HAL_I2C_Init+0x1dc>
 80037c8:	2304      	movs	r3, #4
 80037ca:	e04f      	b.n	800386c <HAL_I2C_Init+0x1dc>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d111      	bne.n	80037f8 <HAL_I2C_Init+0x168>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	1e58      	subs	r0, r3, #1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6859      	ldr	r1, [r3, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	440b      	add	r3, r1
 80037e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e6:	3301      	adds	r3, #1
 80037e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	e012      	b.n	800381e <HAL_I2C_Init+0x18e>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1e58      	subs	r0, r3, #1
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	440b      	add	r3, r1
 8003806:	0099      	lsls	r1, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	fbb0 f3f3 	udiv	r3, r0, r3
 800380e:	3301      	adds	r3, #1
 8003810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003814:	2b00      	cmp	r3, #0
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Init+0x196>
 8003822:	2301      	movs	r3, #1
 8003824:	e022      	b.n	800386c <HAL_I2C_Init+0x1dc>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d10e      	bne.n	800384c <HAL_I2C_Init+0x1bc>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	1e58      	subs	r0, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6859      	ldr	r1, [r3, #4]
 8003836:	460b      	mov	r3, r1
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	440b      	add	r3, r1
 800383c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003840:	3301      	adds	r3, #1
 8003842:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003846:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800384a:	e00f      	b.n	800386c <HAL_I2C_Init+0x1dc>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1e58      	subs	r0, r3, #1
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6859      	ldr	r1, [r3, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	0099      	lsls	r1, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003862:	3301      	adds	r3, #1
 8003864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003868:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	6809      	ldr	r1, [r1, #0]
 8003870:	4313      	orrs	r3, r2
 8003872:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69da      	ldr	r2, [r3, #28]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	431a      	orrs	r2, r3
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800389a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6911      	ldr	r1, [r2, #16]
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68d2      	ldr	r2, [r2, #12]
 80038a6:	4311      	orrs	r1, r2
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2220      	movs	r2, #32
 80038e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	000186a0 	.word	0x000186a0
 8003908:	001e847f 	.word	0x001e847f
 800390c:	003d08ff 	.word	0x003d08ff
 8003910:	431bde83 	.word	0x431bde83
 8003914:	10624dd3 	.word	0x10624dd3

08003918 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af02      	add	r7, sp, #8
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	4608      	mov	r0, r1
 8003922:	4611      	mov	r1, r2
 8003924:	461a      	mov	r2, r3
 8003926:	4603      	mov	r3, r0
 8003928:	817b      	strh	r3, [r7, #10]
 800392a:	460b      	mov	r3, r1
 800392c:	813b      	strh	r3, [r7, #8]
 800392e:	4613      	mov	r3, r2
 8003930:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003932:	f7ff fb23 	bl	8002f7c <HAL_GetTick>
 8003936:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b20      	cmp	r3, #32
 8003942:	f040 80d9 	bne.w	8003af8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2319      	movs	r3, #25
 800394c:	2201      	movs	r2, #1
 800394e:	496d      	ldr	r1, [pc, #436]	@ (8003b04 <HAL_I2C_Mem_Write+0x1ec>)
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 fdb9 	bl	80044c8 <I2C_WaitOnFlagUntilTimeout>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800395c:	2302      	movs	r3, #2
 800395e:	e0cc      	b.n	8003afa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_I2C_Mem_Write+0x56>
 800396a:	2302      	movs	r3, #2
 800396c:	e0c5      	b.n	8003afa <HAL_I2C_Mem_Write+0x1e2>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d007      	beq.n	8003994 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2221      	movs	r2, #33	@ 0x21
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2240      	movs	r2, #64	@ 0x40
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a3a      	ldr	r2, [r7, #32]
 80039be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003b08 <HAL_I2C_Mem_Write+0x1f0>)
 80039d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039d6:	88f8      	ldrh	r0, [r7, #6]
 80039d8:	893a      	ldrh	r2, [r7, #8]
 80039da:	8979      	ldrh	r1, [r7, #10]
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	9301      	str	r3, [sp, #4]
 80039e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	4603      	mov	r3, r0
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 fbf0 	bl	80041cc <I2C_RequestMemoryWrite>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d052      	beq.n	8003a98 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e081      	b.n	8003afa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fe7e 	bl	80046fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00d      	beq.n	8003a22 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d107      	bne.n	8003a1e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a1c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e06b      	b.n	8003afa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a26:	781a      	ldrb	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a32:	1c5a      	adds	r2, r3, #1
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a48:	b29b      	uxth	r3, r3
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	b29a      	uxth	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0304 	and.w	r3, r3, #4
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d11b      	bne.n	8003a98 <HAL_I2C_Mem_Write+0x180>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d017      	beq.n	8003a98 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6c:	781a      	ldrb	r2, [r3, #0]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1aa      	bne.n	80039f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fe71 	bl	800478c <I2C_WaitOnBTFFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00d      	beq.n	8003acc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d107      	bne.n	8003ac8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ac6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e016      	b.n	8003afa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	00100002 	.word	0x00100002
 8003b08:	ffff0000 	.word	0xffff0000

08003b0c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08c      	sub	sp, #48	@ 0x30
 8003b10:	af02      	add	r7, sp, #8
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	4608      	mov	r0, r1
 8003b16:	4611      	mov	r1, r2
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	817b      	strh	r3, [r7, #10]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	813b      	strh	r3, [r7, #8]
 8003b22:	4613      	mov	r3, r2
 8003b24:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b26:	f7ff fa29 	bl	8002f7c <HAL_GetTick>
 8003b2a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b20      	cmp	r3, #32
 8003b36:	f040 8214 	bne.w	8003f62 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	2319      	movs	r3, #25
 8003b40:	2201      	movs	r2, #1
 8003b42:	497b      	ldr	r1, [pc, #492]	@ (8003d30 <HAL_I2C_Mem_Read+0x224>)
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 fcbf 	bl	80044c8 <I2C_WaitOnFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b50:	2302      	movs	r3, #2
 8003b52:	e207      	b.n	8003f64 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_I2C_Mem_Read+0x56>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e200      	b.n	8003f64 <HAL_I2C_Mem_Read+0x458>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d007      	beq.n	8003b88 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b96:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2222      	movs	r2, #34	@ 0x22
 8003b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2240      	movs	r2, #64	@ 0x40
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bb2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d34 <HAL_I2C_Mem_Read+0x228>)
 8003bc8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bca:	88f8      	ldrh	r0, [r7, #6]
 8003bcc:	893a      	ldrh	r2, [r7, #8]
 8003bce:	8979      	ldrh	r1, [r7, #10]
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	4603      	mov	r3, r0
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	f000 fb8c 	bl	80042f8 <I2C_RequestMemoryRead>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e1bc      	b.n	8003f64 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d113      	bne.n	8003c1a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	623b      	str	r3, [r7, #32]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	623b      	str	r3, [r7, #32]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	623b      	str	r3, [r7, #32]
 8003c06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	e190      	b.n	8003f3c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d11b      	bne.n	8003c5a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	61fb      	str	r3, [r7, #28]
 8003c46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	e170      	b.n	8003f3c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d11b      	bne.n	8003c9a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c82:	2300      	movs	r3, #0
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	61bb      	str	r3, [r7, #24]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	e150      	b.n	8003f3c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cb0:	e144      	b.n	8003f3c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	f200 80f1 	bhi.w	8003e9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d123      	bne.n	8003d0c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fda7 	bl	800481c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e145      	b.n	8003f64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d0a:	e117      	b.n	8003f3c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d14e      	bne.n	8003db2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	4906      	ldr	r1, [pc, #24]	@ (8003d38 <HAL_I2C_Mem_Read+0x22c>)
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 fbd2 	bl	80044c8 <I2C_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d008      	beq.n	8003d3c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e11a      	b.n	8003f64 <HAL_I2C_Mem_Read+0x458>
 8003d2e:	bf00      	nop
 8003d30:	00100002 	.word	0x00100002
 8003d34:	ffff0000 	.word	0xffff0000
 8003d38:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	691a      	ldr	r2, [r3, #16]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d56:	b2d2      	uxtb	r2, r2
 8003d58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003db0:	e0c4      	b.n	8003f3c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db8:	2200      	movs	r2, #0
 8003dba:	496c      	ldr	r1, [pc, #432]	@ (8003f6c <HAL_I2C_Mem_Read+0x460>)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 fb83 	bl	80044c8 <I2C_WaitOnFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e0cb      	b.n	8003f64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691a      	ldr	r2, [r3, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	3b01      	subs	r3, #1
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e14:	2200      	movs	r2, #0
 8003e16:	4955      	ldr	r1, [pc, #340]	@ (8003f6c <HAL_I2C_Mem_Read+0x460>)
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f000 fb55 	bl	80044c8 <I2C_WaitOnFlagUntilTimeout>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e09d      	b.n	8003f64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691a      	ldr	r2, [r3, #16]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	1c5a      	adds	r2, r3, #1
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e9c:	e04e      	b.n	8003f3c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ea0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fcba 	bl	800481c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e058      	b.n	8003f64 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	d124      	bne.n	8003f3c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	d107      	bne.n	8003f0a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f08:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f47f aeb6 	bne.w	8003cb2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2220      	movs	r2, #32
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	e000      	b.n	8003f64 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003f62:	2302      	movs	r3, #2
  }
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3728      	adds	r7, #40	@ 0x28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	00010004 	.word	0x00010004

08003f70 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	@ 0x28
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f80:	f7fe fffc 	bl	8002f7c <HAL_GetTick>
 8003f84:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b20      	cmp	r3, #32
 8003f94:	f040 8111 	bne.w	80041ba <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	2319      	movs	r3, #25
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	4988      	ldr	r1, [pc, #544]	@ (80041c4 <HAL_I2C_IsDeviceReady+0x254>)
 8003fa2:	68f8      	ldr	r0, [r7, #12]
 8003fa4:	f000 fa90 	bl	80044c8 <I2C_WaitOnFlagUntilTimeout>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d001      	beq.n	8003fb2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003fae:	2302      	movs	r3, #2
 8003fb0:	e104      	b.n	80041bc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_I2C_IsDeviceReady+0x50>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e0fd      	b.n	80041bc <HAL_I2C_IsDeviceReady+0x24c>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d007      	beq.n	8003fe6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ff4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2224      	movs	r2, #36	@ 0x24
 8003ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a70      	ldr	r2, [pc, #448]	@ (80041c8 <HAL_I2C_IsDeviceReady+0x258>)
 8004008:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004018:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2200      	movs	r2, #0
 8004022:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fa4e 	bl	80044c8 <I2C_WaitOnFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004040:	d103      	bne.n	800404a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004048:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e0b6      	b.n	80041bc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800404e:	897b      	ldrh	r3, [r7, #10]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800405c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800405e:	f7fe ff8d 	bl	8002f7c <HAL_GetTick>
 8004062:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b02      	cmp	r3, #2
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004084:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004088:	bf0c      	ite	eq
 800408a:	2301      	moveq	r3, #1
 800408c:	2300      	movne	r3, #0
 800408e:	b2db      	uxtb	r3, r3
 8004090:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004092:	e025      	b.n	80040e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004094:	f7fe ff72 	bl	8002f7c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d302      	bcc.n	80040aa <HAL_I2C_IsDeviceReady+0x13a>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d103      	bne.n	80040b2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	22a0      	movs	r2, #160	@ 0xa0
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b02      	cmp	r3, #2
 80040be:	bf0c      	ite	eq
 80040c0:	2301      	moveq	r3, #1
 80040c2:	2300      	movne	r3, #0
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d6:	bf0c      	ite	eq
 80040d8:	2301      	moveq	r3, #1
 80040da:	2300      	movne	r3, #0
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2ba0      	cmp	r3, #160	@ 0xa0
 80040ea:	d005      	beq.n	80040f8 <HAL_I2C_IsDeviceReady+0x188>
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d102      	bne.n	80040f8 <HAL_I2C_IsDeviceReady+0x188>
 80040f2:	7dbb      	ldrb	r3, [r7, #22]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0cd      	beq.n	8004094 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d129      	bne.n	8004162 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800411c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	613b      	str	r3, [r7, #16]
 8004132:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	9300      	str	r3, [sp, #0]
 8004138:	2319      	movs	r3, #25
 800413a:	2201      	movs	r2, #1
 800413c:	4921      	ldr	r1, [pc, #132]	@ (80041c4 <HAL_I2C_IsDeviceReady+0x254>)
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f9c2 	bl	80044c8 <I2C_WaitOnFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e036      	b.n	80041bc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e02c      	b.n	80041bc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004170:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800417a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	2319      	movs	r3, #25
 8004182:	2201      	movs	r2, #1
 8004184:	490f      	ldr	r1, [pc, #60]	@ (80041c4 <HAL_I2C_IsDeviceReady+0x254>)
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 f99e 	bl	80044c8 <I2C_WaitOnFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e012      	b.n	80041bc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	3301      	adds	r3, #1
 800419a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	f4ff af32 	bcc.w	800400a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e000      	b.n	80041bc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
  }
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3720      	adds	r7, #32
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	00100002 	.word	0x00100002
 80041c8:	ffff0000 	.word	0xffff0000

080041cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	817b      	strh	r3, [r7, #10]
 80041de:	460b      	mov	r3, r1
 80041e0:	813b      	strh	r3, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f960 	bl	80044c8 <I2C_WaitOnFlagUntilTimeout>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00d      	beq.n	800422a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800421c:	d103      	bne.n	8004226 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004224:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e05f      	b.n	80042ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800422a:	897b      	ldrh	r3, [r7, #10]
 800422c:	b2db      	uxtb	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004238:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	6a3a      	ldr	r2, [r7, #32]
 800423e:	492d      	ldr	r1, [pc, #180]	@ (80042f4 <I2C_RequestMemoryWrite+0x128>)
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f9bb 	bl	80045bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e04c      	b.n	80042ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004250:	2300      	movs	r3, #0
 8004252:	617b      	str	r3, [r7, #20]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004268:	6a39      	ldr	r1, [r7, #32]
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 fa46 	bl	80046fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00d      	beq.n	8004292 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	2b04      	cmp	r3, #4
 800427c:	d107      	bne.n	800428e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800428c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e02b      	b.n	80042ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d105      	bne.n	80042a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004298:	893b      	ldrh	r3, [r7, #8]
 800429a:	b2da      	uxtb	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	611a      	str	r2, [r3, #16]
 80042a2:	e021      	b.n	80042e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042a4:	893b      	ldrh	r3, [r7, #8]
 80042a6:	0a1b      	lsrs	r3, r3, #8
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b4:	6a39      	ldr	r1, [r7, #32]
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fa20 	bl	80046fc <I2C_WaitOnTXEFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00d      	beq.n	80042de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d107      	bne.n	80042da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e005      	b.n	80042ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042de:	893b      	ldrh	r3, [r7, #8]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	00010002 	.word	0x00010002

080042f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b088      	sub	sp, #32
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	4608      	mov	r0, r1
 8004302:	4611      	mov	r1, r2
 8004304:	461a      	mov	r2, r3
 8004306:	4603      	mov	r3, r0
 8004308:	817b      	strh	r3, [r7, #10]
 800430a:	460b      	mov	r3, r1
 800430c:	813b      	strh	r3, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004320:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004330:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	2200      	movs	r2, #0
 800433a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f8c2 	bl	80044c8 <I2C_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00d      	beq.n	8004366 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004354:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004358:	d103      	bne.n	8004362 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004360:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e0aa      	b.n	80044bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004366:	897b      	ldrh	r3, [r7, #10]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	461a      	mov	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004374:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	6a3a      	ldr	r2, [r7, #32]
 800437a:	4952      	ldr	r1, [pc, #328]	@ (80044c4 <I2C_RequestMemoryRead+0x1cc>)
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 f91d 	bl	80045bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e097      	b.n	80044bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	617b      	str	r3, [r7, #20]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043a4:	6a39      	ldr	r1, [r7, #32]
 80043a6:	68f8      	ldr	r0, [r7, #12]
 80043a8:	f000 f9a8 	bl	80046fc <I2C_WaitOnTXEFlagUntilTimeout>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00d      	beq.n	80043ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d107      	bne.n	80043ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e076      	b.n	80044bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043ce:	88fb      	ldrh	r3, [r7, #6]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d105      	bne.n	80043e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043d4:	893b      	ldrh	r3, [r7, #8]
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	611a      	str	r2, [r3, #16]
 80043de:	e021      	b.n	8004424 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043e0:	893b      	ldrh	r3, [r7, #8]
 80043e2:	0a1b      	lsrs	r3, r3, #8
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043f0:	6a39      	ldr	r1, [r7, #32]
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 f982 	bl	80046fc <I2C_WaitOnTXEFlagUntilTimeout>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00d      	beq.n	800441a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	2b04      	cmp	r3, #4
 8004404:	d107      	bne.n	8004416 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004414:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e050      	b.n	80044bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800441a:	893b      	ldrh	r3, [r7, #8]
 800441c:	b2da      	uxtb	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004426:	6a39      	ldr	r1, [r7, #32]
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f967 	bl	80046fc <I2C_WaitOnTXEFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00d      	beq.n	8004450 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004438:	2b04      	cmp	r3, #4
 800443a:	d107      	bne.n	800444c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800444a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e035      	b.n	80044bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800445e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	2200      	movs	r2, #0
 8004468:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f82b 	bl	80044c8 <I2C_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00d      	beq.n	8004494 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004486:	d103      	bne.n	8004490 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800448e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e013      	b.n	80044bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004494:	897b      	ldrh	r3, [r7, #10]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f043 0301 	orr.w	r3, r3, #1
 800449c:	b2da      	uxtb	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a6:	6a3a      	ldr	r2, [r7, #32]
 80044a8:	4906      	ldr	r1, [pc, #24]	@ (80044c4 <I2C_RequestMemoryRead+0x1cc>)
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f886 	bl	80045bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e000      	b.n	80044bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044ba:	2300      	movs	r3, #0
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	00010002 	.word	0x00010002

080044c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044d8:	e048      	b.n	800456c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e0:	d044      	beq.n	800456c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e2:	f7fe fd4b 	bl	8002f7c <HAL_GetTick>
 80044e6:	4602      	mov	r2, r0
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	683a      	ldr	r2, [r7, #0]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d302      	bcc.n	80044f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d139      	bne.n	800456c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	0c1b      	lsrs	r3, r3, #16
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d10d      	bne.n	800451e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	43da      	mvns	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4013      	ands	r3, r2
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	e00c      	b.n	8004538 <I2C_WaitOnFlagUntilTimeout+0x70>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	43da      	mvns	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4013      	ands	r3, r2
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	461a      	mov	r2, r3
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	429a      	cmp	r2, r3
 800453c:	d116      	bne.n	800456c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2220      	movs	r2, #32
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004558:	f043 0220 	orr.w	r2, r3, #32
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e023      	b.n	80045b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	0c1b      	lsrs	r3, r3, #16
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b01      	cmp	r3, #1
 8004574:	d10d      	bne.n	8004592 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	43da      	mvns	r2, r3
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	4013      	ands	r3, r2
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	bf0c      	ite	eq
 8004588:	2301      	moveq	r3, #1
 800458a:	2300      	movne	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	461a      	mov	r2, r3
 8004590:	e00c      	b.n	80045ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	43da      	mvns	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	4013      	ands	r3, r2
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf0c      	ite	eq
 80045a4:	2301      	moveq	r3, #1
 80045a6:	2300      	movne	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	461a      	mov	r2, r3
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d093      	beq.n	80044da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045ca:	e071      	b.n	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045da:	d123      	bne.n	8004624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	f043 0204 	orr.w	r2, r3, #4
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e067      	b.n	80046f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462a:	d041      	beq.n	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462c:	f7fe fca6 	bl	8002f7c <HAL_GetTick>
 8004630:	4602      	mov	r2, r0
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	1ad3      	subs	r3, r2, r3
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	429a      	cmp	r2, r3
 800463a:	d302      	bcc.n	8004642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d136      	bne.n	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	0c1b      	lsrs	r3, r3, #16
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b01      	cmp	r3, #1
 800464a:	d10c      	bne.n	8004666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	43da      	mvns	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4013      	ands	r3, r2
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	bf14      	ite	ne
 800465e:	2301      	movne	r3, #1
 8004660:	2300      	moveq	r3, #0
 8004662:	b2db      	uxtb	r3, r3
 8004664:	e00b      	b.n	800467e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	43da      	mvns	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	4013      	ands	r3, r2
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d016      	beq.n	80046b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2200      	movs	r2, #0
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	f043 0220 	orr.w	r2, r3, #32
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e021      	b.n	80046f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	0c1b      	lsrs	r3, r3, #16
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d10c      	bne.n	80046d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	43da      	mvns	r2, r3
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	4013      	ands	r3, r2
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bf14      	ite	ne
 80046cc:	2301      	movne	r3, #1
 80046ce:	2300      	moveq	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	e00b      	b.n	80046ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	43da      	mvns	r2, r3
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4013      	ands	r3, r2
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bf14      	ite	ne
 80046e6:	2301      	movne	r3, #1
 80046e8:	2300      	moveq	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f47f af6d 	bne.w	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004708:	e034      	b.n	8004774 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800470a:	68f8      	ldr	r0, [r7, #12]
 800470c:	f000 f8e3 	bl	80048d6 <I2C_IsAcknowledgeFailed>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d001      	beq.n	800471a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e034      	b.n	8004784 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004720:	d028      	beq.n	8004774 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004722:	f7fe fc2b 	bl	8002f7c <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	429a      	cmp	r2, r3
 8004730:	d302      	bcc.n	8004738 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d11d      	bne.n	8004774 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004742:	2b80      	cmp	r3, #128	@ 0x80
 8004744:	d016      	beq.n	8004774 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	f043 0220 	orr.w	r2, r3, #32
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e007      	b.n	8004784 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477e:	2b80      	cmp	r3, #128	@ 0x80
 8004780:	d1c3      	bne.n	800470a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004798:	e034      	b.n	8004804 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f89b 	bl	80048d6 <I2C_IsAcknowledgeFailed>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e034      	b.n	8004814 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d028      	beq.n	8004804 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b2:	f7fe fbe3 	bl	8002f7c <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d302      	bcc.n	80047c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d11d      	bne.n	8004804 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f003 0304 	and.w	r3, r3, #4
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d016      	beq.n	8004804 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047f0:	f043 0220 	orr.w	r2, r3, #32
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e007      	b.n	8004814 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b04      	cmp	r3, #4
 8004810:	d1c3      	bne.n	800479a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004828:	e049      	b.n	80048be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b10      	cmp	r3, #16
 8004836:	d119      	bne.n	800486c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f06f 0210 	mvn.w	r2, #16
 8004840:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2220      	movs	r2, #32
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e030      	b.n	80048ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800486c:	f7fe fb86 	bl	8002f7c <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	429a      	cmp	r2, r3
 800487a:	d302      	bcc.n	8004882 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d11d      	bne.n	80048be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800488c:	2b40      	cmp	r3, #64	@ 0x40
 800488e:	d016      	beq.n	80048be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	f043 0220 	orr.w	r2, r3, #32
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e007      	b.n	80048ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c8:	2b40      	cmp	r3, #64	@ 0x40
 80048ca:	d1ae      	bne.n	800482a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048ec:	d11b      	bne.n	8004926 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2220      	movs	r2, #32
 8004902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004912:	f043 0204 	orr.w	r2, r3, #4
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d101      	bne.n	8004946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e267      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	2b00      	cmp	r3, #0
 8004950:	d075      	beq.n	8004a3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004952:	4b88      	ldr	r3, [pc, #544]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b04      	cmp	r3, #4
 800495c:	d00c      	beq.n	8004978 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800495e:	4b85      	ldr	r3, [pc, #532]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004966:	2b08      	cmp	r3, #8
 8004968:	d112      	bne.n	8004990 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800496a:	4b82      	ldr	r3, [pc, #520]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004972:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004976:	d10b      	bne.n	8004990 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004978:	4b7e      	ldr	r3, [pc, #504]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d05b      	beq.n	8004a3c <HAL_RCC_OscConfig+0x108>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d157      	bne.n	8004a3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e242      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004998:	d106      	bne.n	80049a8 <HAL_RCC_OscConfig+0x74>
 800499a:	4b76      	ldr	r3, [pc, #472]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a75      	ldr	r2, [pc, #468]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	e01d      	b.n	80049e4 <HAL_RCC_OscConfig+0xb0>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80049b0:	d10c      	bne.n	80049cc <HAL_RCC_OscConfig+0x98>
 80049b2:	4b70      	ldr	r3, [pc, #448]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a6f      	ldr	r2, [pc, #444]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	4b6d      	ldr	r3, [pc, #436]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a6c      	ldr	r2, [pc, #432]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	e00b      	b.n	80049e4 <HAL_RCC_OscConfig+0xb0>
 80049cc:	4b69      	ldr	r3, [pc, #420]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a68      	ldr	r2, [pc, #416]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d6:	6013      	str	r3, [r2, #0]
 80049d8:	4b66      	ldr	r3, [pc, #408]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a65      	ldr	r2, [pc, #404]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 80049de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d013      	beq.n	8004a14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ec:	f7fe fac6 	bl	8002f7c <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f4:	f7fe fac2 	bl	8002f7c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	@ 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e207      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a06:	4b5b      	ldr	r3, [pc, #364]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0xc0>
 8004a12:	e014      	b.n	8004a3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a14:	f7fe fab2 	bl	8002f7c <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a1c:	f7fe faae 	bl	8002f7c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b64      	cmp	r3, #100	@ 0x64
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e1f3      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2e:	4b51      	ldr	r3, [pc, #324]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0xe8>
 8004a3a:	e000      	b.n	8004a3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d063      	beq.n	8004b12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00b      	beq.n	8004a6e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a56:	4b47      	ldr	r3, [pc, #284]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a5e:	2b08      	cmp	r3, #8
 8004a60:	d11c      	bne.n	8004a9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a62:	4b44      	ldr	r3, [pc, #272]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d116      	bne.n	8004a9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a6e:	4b41      	ldr	r3, [pc, #260]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d005      	beq.n	8004a86 <HAL_RCC_OscConfig+0x152>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d001      	beq.n	8004a86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e1c7      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a86:	4b3b      	ldr	r3, [pc, #236]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	4937      	ldr	r1, [pc, #220]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a9a:	e03a      	b.n	8004b12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d020      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aa4:	4b34      	ldr	r3, [pc, #208]	@ (8004b78 <HAL_RCC_OscConfig+0x244>)
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aaa:	f7fe fa67 	bl	8002f7c <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ab2:	f7fe fa63 	bl	8002f7c <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e1a8      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d0f0      	beq.n	8004ab2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad0:	4b28      	ldr	r3, [pc, #160]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	00db      	lsls	r3, r3, #3
 8004ade:	4925      	ldr	r1, [pc, #148]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	600b      	str	r3, [r1, #0]
 8004ae4:	e015      	b.n	8004b12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ae6:	4b24      	ldr	r3, [pc, #144]	@ (8004b78 <HAL_RCC_OscConfig+0x244>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aec:	f7fe fa46 	bl	8002f7c <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af4:	f7fe fa42 	bl	8002f7c <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e187      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b06:	4b1b      	ldr	r3, [pc, #108]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d036      	beq.n	8004b8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d016      	beq.n	8004b54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b26:	4b15      	ldr	r3, [pc, #84]	@ (8004b7c <HAL_RCC_OscConfig+0x248>)
 8004b28:	2201      	movs	r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b2c:	f7fe fa26 	bl	8002f7c <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b34:	f7fe fa22 	bl	8002f7c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e167      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b46:	4b0b      	ldr	r3, [pc, #44]	@ (8004b74 <HAL_RCC_OscConfig+0x240>)
 8004b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b4a:	f003 0302 	and.w	r3, r3, #2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0x200>
 8004b52:	e01b      	b.n	8004b8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b54:	4b09      	ldr	r3, [pc, #36]	@ (8004b7c <HAL_RCC_OscConfig+0x248>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b5a:	f7fe fa0f 	bl	8002f7c <HAL_GetTick>
 8004b5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b60:	e00e      	b.n	8004b80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b62:	f7fe fa0b 	bl	8002f7c <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d907      	bls.n	8004b80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e150      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
 8004b74:	40023800 	.word	0x40023800
 8004b78:	42470000 	.word	0x42470000
 8004b7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b80:	4b88      	ldr	r3, [pc, #544]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004b82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1ea      	bne.n	8004b62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0304 	and.w	r3, r3, #4
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	f000 8097 	beq.w	8004cc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b9e:	4b81      	ldr	r3, [pc, #516]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10f      	bne.n	8004bca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	60bb      	str	r3, [r7, #8]
 8004bae:	4b7d      	ldr	r3, [pc, #500]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb2:	4a7c      	ldr	r2, [pc, #496]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bba:	4b7a      	ldr	r3, [pc, #488]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bca:	4b77      	ldr	r3, [pc, #476]	@ (8004da8 <HAL_RCC_OscConfig+0x474>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d118      	bne.n	8004c08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bd6:	4b74      	ldr	r3, [pc, #464]	@ (8004da8 <HAL_RCC_OscConfig+0x474>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a73      	ldr	r2, [pc, #460]	@ (8004da8 <HAL_RCC_OscConfig+0x474>)
 8004bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be2:	f7fe f9cb 	bl	8002f7c <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bea:	f7fe f9c7 	bl	8002f7c <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e10c      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfc:	4b6a      	ldr	r3, [pc, #424]	@ (8004da8 <HAL_RCC_OscConfig+0x474>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d106      	bne.n	8004c1e <HAL_RCC_OscConfig+0x2ea>
 8004c10:	4b64      	ldr	r3, [pc, #400]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c14:	4a63      	ldr	r2, [pc, #396]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c1c:	e01c      	b.n	8004c58 <HAL_RCC_OscConfig+0x324>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2b05      	cmp	r3, #5
 8004c24:	d10c      	bne.n	8004c40 <HAL_RCC_OscConfig+0x30c>
 8004c26:	4b5f      	ldr	r3, [pc, #380]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2a:	4a5e      	ldr	r2, [pc, #376]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c2c:	f043 0304 	orr.w	r3, r3, #4
 8004c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c32:	4b5c      	ldr	r3, [pc, #368]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c36:	4a5b      	ldr	r2, [pc, #364]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c38:	f043 0301 	orr.w	r3, r3, #1
 8004c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c3e:	e00b      	b.n	8004c58 <HAL_RCC_OscConfig+0x324>
 8004c40:	4b58      	ldr	r3, [pc, #352]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c44:	4a57      	ldr	r2, [pc, #348]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c46:	f023 0301 	bic.w	r3, r3, #1
 8004c4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c4c:	4b55      	ldr	r3, [pc, #340]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c50:	4a54      	ldr	r2, [pc, #336]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c52:	f023 0304 	bic.w	r3, r3, #4
 8004c56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d015      	beq.n	8004c8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c60:	f7fe f98c 	bl	8002f7c <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c66:	e00a      	b.n	8004c7e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c68:	f7fe f988 	bl	8002f7c <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e0cb      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c7e:	4b49      	ldr	r3, [pc, #292]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d0ee      	beq.n	8004c68 <HAL_RCC_OscConfig+0x334>
 8004c8a:	e014      	b.n	8004cb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8c:	f7fe f976 	bl	8002f7c <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c92:	e00a      	b.n	8004caa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c94:	f7fe f972 	bl	8002f7c <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e0b5      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004caa:	4b3e      	ldr	r3, [pc, #248]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1ee      	bne.n	8004c94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cb6:	7dfb      	ldrb	r3, [r7, #23]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d105      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cbc:	4b39      	ldr	r3, [pc, #228]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc0:	4a38      	ldr	r2, [pc, #224]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f000 80a1 	beq.w	8004e14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cd2:	4b34      	ldr	r3, [pc, #208]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d05c      	beq.n	8004d98 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d141      	bne.n	8004d6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce6:	4b31      	ldr	r3, [pc, #196]	@ (8004dac <HAL_RCC_OscConfig+0x478>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cec:	f7fe f946 	bl	8002f7c <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf4:	f7fe f942 	bl	8002f7c <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e087      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d06:	4b27      	ldr	r3, [pc, #156]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69da      	ldr	r2, [r3, #28]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d20:	019b      	lsls	r3, r3, #6
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d28:	085b      	lsrs	r3, r3, #1
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	041b      	lsls	r3, r3, #16
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	061b      	lsls	r3, r3, #24
 8004d36:	491b      	ldr	r1, [pc, #108]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dac <HAL_RCC_OscConfig+0x478>)
 8004d3e:	2201      	movs	r2, #1
 8004d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d42:	f7fe f91b 	bl	8002f7c <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4a:	f7fe f917 	bl	8002f7c <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e05c      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d5c:	4b11      	ldr	r3, [pc, #68]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0f0      	beq.n	8004d4a <HAL_RCC_OscConfig+0x416>
 8004d68:	e054      	b.n	8004e14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d6a:	4b10      	ldr	r3, [pc, #64]	@ (8004dac <HAL_RCC_OscConfig+0x478>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d70:	f7fe f904 	bl	8002f7c <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d76:	e008      	b.n	8004d8a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d78:	f7fe f900 	bl	8002f7c <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e045      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8a:	4b06      	ldr	r3, [pc, #24]	@ (8004da4 <HAL_RCC_OscConfig+0x470>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1f0      	bne.n	8004d78 <HAL_RCC_OscConfig+0x444>
 8004d96:	e03d      	b.n	8004e14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d107      	bne.n	8004db0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e038      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
 8004da4:	40023800 	.word	0x40023800
 8004da8:	40007000 	.word	0x40007000
 8004dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004db0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e20 <HAL_RCC_OscConfig+0x4ec>)
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d028      	beq.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d121      	bne.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d11a      	bne.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004de0:	4013      	ands	r3, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d111      	bne.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d107      	bne.n	8004e10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e000      	b.n	8004e16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3718      	adds	r7, #24
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40023800 	.word	0x40023800

08004e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0cc      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e38:	4b68      	ldr	r3, [pc, #416]	@ (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0307 	and.w	r3, r3, #7
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d90c      	bls.n	8004e60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e46:	4b65      	ldr	r3, [pc, #404]	@ (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e4e:	4b63      	ldr	r3, [pc, #396]	@ (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d001      	beq.n	8004e60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e0b8      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d020      	beq.n	8004eae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d005      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e78:	4b59      	ldr	r3, [pc, #356]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	4a58      	ldr	r2, [pc, #352]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e82:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e90:	4b53      	ldr	r3, [pc, #332]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	4a52      	ldr	r2, [pc, #328]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e9c:	4b50      	ldr	r3, [pc, #320]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	494d      	ldr	r1, [pc, #308]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d044      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d107      	bne.n	8004ed2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec2:	4b47      	ldr	r3, [pc, #284]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d119      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e07f      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d003      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d107      	bne.n	8004ef2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ee2:	4b3f      	ldr	r3, [pc, #252]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d109      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e06f      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e067      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f02:	4b37      	ldr	r3, [pc, #220]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f023 0203 	bic.w	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	4934      	ldr	r1, [pc, #208]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f10:	4313      	orrs	r3, r2
 8004f12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f14:	f7fe f832 	bl	8002f7c <HAL_GetTick>
 8004f18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f1a:	e00a      	b.n	8004f32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f1c:	f7fe f82e 	bl	8002f7c <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e04f      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f32:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 020c 	and.w	r2, r3, #12
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d1eb      	bne.n	8004f1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f44:	4b25      	ldr	r3, [pc, #148]	@ (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0307 	and.w	r3, r3, #7
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d20c      	bcs.n	8004f6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f52:	4b22      	ldr	r3, [pc, #136]	@ (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	b2d2      	uxtb	r2, r2
 8004f58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5a:	4b20      	ldr	r3, [pc, #128]	@ (8004fdc <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0307 	and.w	r3, r3, #7
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d001      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e032      	b.n	8004fd2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f78:	4b19      	ldr	r3, [pc, #100]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4916      	ldr	r1, [pc, #88]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f96:	4b12      	ldr	r3, [pc, #72]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	490e      	ldr	r1, [pc, #56]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004faa:	f000 f821 	bl	8004ff0 <HAL_RCC_GetSysClockFreq>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	490a      	ldr	r1, [pc, #40]	@ (8004fe4 <HAL_RCC_ClockConfig+0x1c0>)
 8004fbc:	5ccb      	ldrb	r3, [r1, r3]
 8004fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc2:	4a09      	ldr	r2, [pc, #36]	@ (8004fe8 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004fc6:	4b09      	ldr	r3, [pc, #36]	@ (8004fec <HAL_RCC_ClockConfig+0x1c8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fd ff92 	bl	8002ef4 <HAL_InitTick>

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	40023c00 	.word	0x40023c00
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	0800aa70 	.word	0x0800aa70
 8004fe8:	20000008 	.word	0x20000008
 8004fec:	2000000c 	.word	0x2000000c

08004ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff4:	b094      	sub	sp, #80	@ 0x50
 8004ff6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005008:	4b79      	ldr	r3, [pc, #484]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 030c 	and.w	r3, r3, #12
 8005010:	2b08      	cmp	r3, #8
 8005012:	d00d      	beq.n	8005030 <HAL_RCC_GetSysClockFreq+0x40>
 8005014:	2b08      	cmp	r3, #8
 8005016:	f200 80e1 	bhi.w	80051dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800501a:	2b00      	cmp	r3, #0
 800501c:	d002      	beq.n	8005024 <HAL_RCC_GetSysClockFreq+0x34>
 800501e:	2b04      	cmp	r3, #4
 8005020:	d003      	beq.n	800502a <HAL_RCC_GetSysClockFreq+0x3a>
 8005022:	e0db      	b.n	80051dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005024:	4b73      	ldr	r3, [pc, #460]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005026:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005028:	e0db      	b.n	80051e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800502a:	4b73      	ldr	r3, [pc, #460]	@ (80051f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800502c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800502e:	e0d8      	b.n	80051e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005030:	4b6f      	ldr	r3, [pc, #444]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005038:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800503a:	4b6d      	ldr	r3, [pc, #436]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d063      	beq.n	800510e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005046:	4b6a      	ldr	r3, [pc, #424]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	099b      	lsrs	r3, r3, #6
 800504c:	2200      	movs	r2, #0
 800504e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005050:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005058:	633b      	str	r3, [r7, #48]	@ 0x30
 800505a:	2300      	movs	r3, #0
 800505c:	637b      	str	r3, [r7, #52]	@ 0x34
 800505e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005062:	4622      	mov	r2, r4
 8005064:	462b      	mov	r3, r5
 8005066:	f04f 0000 	mov.w	r0, #0
 800506a:	f04f 0100 	mov.w	r1, #0
 800506e:	0159      	lsls	r1, r3, #5
 8005070:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005074:	0150      	lsls	r0, r2, #5
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4621      	mov	r1, r4
 800507c:	1a51      	subs	r1, r2, r1
 800507e:	6139      	str	r1, [r7, #16]
 8005080:	4629      	mov	r1, r5
 8005082:	eb63 0301 	sbc.w	r3, r3, r1
 8005086:	617b      	str	r3, [r7, #20]
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005094:	4659      	mov	r1, fp
 8005096:	018b      	lsls	r3, r1, #6
 8005098:	4651      	mov	r1, sl
 800509a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800509e:	4651      	mov	r1, sl
 80050a0:	018a      	lsls	r2, r1, #6
 80050a2:	4651      	mov	r1, sl
 80050a4:	ebb2 0801 	subs.w	r8, r2, r1
 80050a8:	4659      	mov	r1, fp
 80050aa:	eb63 0901 	sbc.w	r9, r3, r1
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	f04f 0300 	mov.w	r3, #0
 80050b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050c2:	4690      	mov	r8, r2
 80050c4:	4699      	mov	r9, r3
 80050c6:	4623      	mov	r3, r4
 80050c8:	eb18 0303 	adds.w	r3, r8, r3
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	462b      	mov	r3, r5
 80050d0:	eb49 0303 	adc.w	r3, r9, r3
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	f04f 0300 	mov.w	r3, #0
 80050de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80050e2:	4629      	mov	r1, r5
 80050e4:	024b      	lsls	r3, r1, #9
 80050e6:	4621      	mov	r1, r4
 80050e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80050ec:	4621      	mov	r1, r4
 80050ee:	024a      	lsls	r2, r1, #9
 80050f0:	4610      	mov	r0, r2
 80050f2:	4619      	mov	r1, r3
 80050f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050f6:	2200      	movs	r2, #0
 80050f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80050fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005100:	f7fb f862 	bl	80001c8 <__aeabi_uldivmod>
 8005104:	4602      	mov	r2, r0
 8005106:	460b      	mov	r3, r1
 8005108:	4613      	mov	r3, r2
 800510a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800510c:	e058      	b.n	80051c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800510e:	4b38      	ldr	r3, [pc, #224]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	099b      	lsrs	r3, r3, #6
 8005114:	2200      	movs	r2, #0
 8005116:	4618      	mov	r0, r3
 8005118:	4611      	mov	r1, r2
 800511a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800511e:	623b      	str	r3, [r7, #32]
 8005120:	2300      	movs	r3, #0
 8005122:	627b      	str	r3, [r7, #36]	@ 0x24
 8005124:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005128:	4642      	mov	r2, r8
 800512a:	464b      	mov	r3, r9
 800512c:	f04f 0000 	mov.w	r0, #0
 8005130:	f04f 0100 	mov.w	r1, #0
 8005134:	0159      	lsls	r1, r3, #5
 8005136:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800513a:	0150      	lsls	r0, r2, #5
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4641      	mov	r1, r8
 8005142:	ebb2 0a01 	subs.w	sl, r2, r1
 8005146:	4649      	mov	r1, r9
 8005148:	eb63 0b01 	sbc.w	fp, r3, r1
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	f04f 0300 	mov.w	r3, #0
 8005154:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005158:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800515c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005160:	ebb2 040a 	subs.w	r4, r2, sl
 8005164:	eb63 050b 	sbc.w	r5, r3, fp
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	00eb      	lsls	r3, r5, #3
 8005172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005176:	00e2      	lsls	r2, r4, #3
 8005178:	4614      	mov	r4, r2
 800517a:	461d      	mov	r5, r3
 800517c:	4643      	mov	r3, r8
 800517e:	18e3      	adds	r3, r4, r3
 8005180:	603b      	str	r3, [r7, #0]
 8005182:	464b      	mov	r3, r9
 8005184:	eb45 0303 	adc.w	r3, r5, r3
 8005188:	607b      	str	r3, [r7, #4]
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005196:	4629      	mov	r1, r5
 8005198:	028b      	lsls	r3, r1, #10
 800519a:	4621      	mov	r1, r4
 800519c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051a0:	4621      	mov	r1, r4
 80051a2:	028a      	lsls	r2, r1, #10
 80051a4:	4610      	mov	r0, r2
 80051a6:	4619      	mov	r1, r3
 80051a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051aa:	2200      	movs	r2, #0
 80051ac:	61bb      	str	r3, [r7, #24]
 80051ae:	61fa      	str	r2, [r7, #28]
 80051b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051b4:	f7fb f808 	bl	80001c8 <__aeabi_uldivmod>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4613      	mov	r3, r2
 80051be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80051c0:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	f003 0303 	and.w	r3, r3, #3
 80051ca:	3301      	adds	r3, #1
 80051cc:	005b      	lsls	r3, r3, #1
 80051ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80051d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051da:	e002      	b.n	80051e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80051dc:	4b05      	ldr	r3, [pc, #20]	@ (80051f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80051e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3750      	adds	r7, #80	@ 0x50
 80051e8:	46bd      	mov	sp, r7
 80051ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ee:	bf00      	nop
 80051f0:	40023800 	.word	0x40023800
 80051f4:	00f42400 	.word	0x00f42400
 80051f8:	007a1200 	.word	0x007a1200

080051fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005200:	4b03      	ldr	r3, [pc, #12]	@ (8005210 <HAL_RCC_GetHCLKFreq+0x14>)
 8005202:	681b      	ldr	r3, [r3, #0]
}
 8005204:	4618      	mov	r0, r3
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	20000008 	.word	0x20000008

08005214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005218:	f7ff fff0 	bl	80051fc <HAL_RCC_GetHCLKFreq>
 800521c:	4602      	mov	r2, r0
 800521e:	4b05      	ldr	r3, [pc, #20]	@ (8005234 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	0a9b      	lsrs	r3, r3, #10
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	4903      	ldr	r1, [pc, #12]	@ (8005238 <HAL_RCC_GetPCLK1Freq+0x24>)
 800522a:	5ccb      	ldrb	r3, [r1, r3]
 800522c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005230:	4618      	mov	r0, r3
 8005232:	bd80      	pop	{r7, pc}
 8005234:	40023800 	.word	0x40023800
 8005238:	0800aa80 	.word	0x0800aa80

0800523c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005240:	f7ff ffdc 	bl	80051fc <HAL_RCC_GetHCLKFreq>
 8005244:	4602      	mov	r2, r0
 8005246:	4b05      	ldr	r3, [pc, #20]	@ (800525c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	0b5b      	lsrs	r3, r3, #13
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	4903      	ldr	r1, [pc, #12]	@ (8005260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005252:	5ccb      	ldrb	r3, [r1, r3]
 8005254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005258:	4618      	mov	r0, r3
 800525a:	bd80      	pop	{r7, pc}
 800525c:	40023800 	.word	0x40023800
 8005260:	0800aa80 	.word	0x0800aa80

08005264 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e07b      	b.n	800536e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	2b00      	cmp	r3, #0
 800527c:	d108      	bne.n	8005290 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005286:	d009      	beq.n	800529c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	61da      	str	r2, [r3, #28]
 800528e:	e005      	b.n	800529c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f7fd fbc2 	bl	8002a40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800530c:	431a      	orrs	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005320:	ea42 0103 	orr.w	r1, r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005328:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	0c1b      	lsrs	r3, r3, #16
 800533a:	f003 0104 	and.w	r1, r3, #4
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005342:	f003 0210 	and.w	r2, r3, #16
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69da      	ldr	r2, [r3, #28]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800535c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005376:	b580      	push	{r7, lr}
 8005378:	b088      	sub	sp, #32
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	603b      	str	r3, [r7, #0]
 8005382:	4613      	mov	r3, r2
 8005384:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005386:	f7fd fdf9 	bl	8002f7c <HAL_GetTick>
 800538a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800538c:	88fb      	ldrh	r3, [r7, #6]
 800538e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b01      	cmp	r3, #1
 800539a:	d001      	beq.n	80053a0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800539c:	2302      	movs	r3, #2
 800539e:	e12a      	b.n	80055f6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <HAL_SPI_Transmit+0x36>
 80053a6:	88fb      	ldrh	r3, [r7, #6]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d101      	bne.n	80053b0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e122      	b.n	80055f6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d101      	bne.n	80053be <HAL_SPI_Transmit+0x48>
 80053ba:	2302      	movs	r3, #2
 80053bc:	e11b      	b.n	80055f6 <HAL_SPI_Transmit+0x280>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2203      	movs	r2, #3
 80053ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	88fa      	ldrh	r2, [r7, #6]
 80053de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	88fa      	ldrh	r2, [r7, #6]
 80053e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2200      	movs	r2, #0
 8005402:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800540c:	d10f      	bne.n	800542e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800541c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800542c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005438:	2b40      	cmp	r3, #64	@ 0x40
 800543a:	d007      	beq.n	800544c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800544a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005454:	d152      	bne.n	80054fc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <HAL_SPI_Transmit+0xee>
 800545e:	8b7b      	ldrh	r3, [r7, #26]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d145      	bne.n	80054f0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005468:	881a      	ldrh	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005474:	1c9a      	adds	r2, r3, #2
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800547e:	b29b      	uxth	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005488:	e032      	b.n	80054f0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b02      	cmp	r3, #2
 8005496:	d112      	bne.n	80054be <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800549c:	881a      	ldrh	r2, [r3, #0]
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054a8:	1c9a      	adds	r2, r3, #2
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	3b01      	subs	r3, #1
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80054bc:	e018      	b.n	80054f0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054be:	f7fd fd5d 	bl	8002f7c <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d803      	bhi.n	80054d6 <HAL_SPI_Transmit+0x160>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d4:	d102      	bne.n	80054dc <HAL_SPI_Transmit+0x166>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d109      	bne.n	80054f0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e082      	b.n	80055f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1c7      	bne.n	800548a <HAL_SPI_Transmit+0x114>
 80054fa:	e053      	b.n	80055a4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <HAL_SPI_Transmit+0x194>
 8005504:	8b7b      	ldrh	r3, [r7, #26]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d147      	bne.n	800559a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	330c      	adds	r3, #12
 8005514:	7812      	ldrb	r2, [r2, #0]
 8005516:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005526:	b29b      	uxth	r3, r3
 8005528:	3b01      	subs	r3, #1
 800552a:	b29a      	uxth	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005530:	e033      	b.n	800559a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b02      	cmp	r3, #2
 800553e:	d113      	bne.n	8005568 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	7812      	ldrb	r2, [r2, #0]
 800554c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800555c:	b29b      	uxth	r3, r3
 800555e:	3b01      	subs	r3, #1
 8005560:	b29a      	uxth	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005566:	e018      	b.n	800559a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005568:	f7fd fd08 	bl	8002f7c <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d803      	bhi.n	8005580 <HAL_SPI_Transmit+0x20a>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557e:	d102      	bne.n	8005586 <HAL_SPI_Transmit+0x210>
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d109      	bne.n	800559a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005596:	2303      	movs	r3, #3
 8005598:	e02d      	b.n	80055f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800559e:	b29b      	uxth	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d1c6      	bne.n	8005532 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	6839      	ldr	r1, [r7, #0]
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 fbd9 	bl	8005d60 <SPI_EndRxTxTransaction>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2220      	movs	r2, #32
 80055b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055c2:	2300      	movs	r3, #0
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	617b      	str	r3, [r7, #20]
 80055d6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e000      	b.n	80055f6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80055f4:	2300      	movs	r3, #0
  }
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3720      	adds	r7, #32
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b088      	sub	sp, #32
 8005602:	af02      	add	r7, sp, #8
 8005604:	60f8      	str	r0, [r7, #12]
 8005606:	60b9      	str	r1, [r7, #8]
 8005608:	603b      	str	r3, [r7, #0]
 800560a:	4613      	mov	r3, r2
 800560c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b01      	cmp	r3, #1
 8005618:	d001      	beq.n	800561e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800561a:	2302      	movs	r3, #2
 800561c:	e104      	b.n	8005828 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005626:	d112      	bne.n	800564e <HAL_SPI_Receive+0x50>
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10e      	bne.n	800564e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2204      	movs	r2, #4
 8005634:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005638:	88fa      	ldrh	r2, [r7, #6]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	4613      	mov	r3, r2
 8005640:	68ba      	ldr	r2, [r7, #8]
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f8f3 	bl	8005830 <HAL_SPI_TransmitReceive>
 800564a:	4603      	mov	r3, r0
 800564c:	e0ec      	b.n	8005828 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800564e:	f7fd fc95 	bl	8002f7c <HAL_GetTick>
 8005652:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <HAL_SPI_Receive+0x62>
 800565a:	88fb      	ldrh	r3, [r7, #6]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e0e1      	b.n	8005828 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_SPI_Receive+0x74>
 800566e:	2302      	movs	r3, #2
 8005670:	e0da      	b.n	8005828 <HAL_SPI_Receive+0x22a>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2204      	movs	r2, #4
 800567e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	88fa      	ldrh	r2, [r7, #6]
 8005692:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	88fa      	ldrh	r2, [r7, #6]
 8005698:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2200      	movs	r2, #0
 80056b6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056c0:	d10f      	bne.n	80056e2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80056e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ec:	2b40      	cmp	r3, #64	@ 0x40
 80056ee:	d007      	beq.n	8005700 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d170      	bne.n	80057ea <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005708:	e035      	b.n	8005776 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b01      	cmp	r3, #1
 8005716:	d115      	bne.n	8005744 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f103 020c 	add.w	r2, r3, #12
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005724:	7812      	ldrb	r2, [r2, #0]
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005742:	e018      	b.n	8005776 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005744:	f7fd fc1a 	bl	8002f7c <HAL_GetTick>
 8005748:	4602      	mov	r2, r0
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	429a      	cmp	r2, r3
 8005752:	d803      	bhi.n	800575c <HAL_SPI_Receive+0x15e>
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	d102      	bne.n	8005762 <HAL_SPI_Receive+0x164>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d109      	bne.n	8005776 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e058      	b.n	8005828 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800577a:	b29b      	uxth	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1c4      	bne.n	800570a <HAL_SPI_Receive+0x10c>
 8005780:	e038      	b.n	80057f4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b01      	cmp	r3, #1
 800578e:	d113      	bne.n	80057b8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68da      	ldr	r2, [r3, #12]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800579a:	b292      	uxth	r2, r2
 800579c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a2:	1c9a      	adds	r2, r3, #2
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	3b01      	subs	r3, #1
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057b6:	e018      	b.n	80057ea <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057b8:	f7fd fbe0 	bl	8002f7c <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d803      	bhi.n	80057d0 <HAL_SPI_Receive+0x1d2>
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d102      	bne.n	80057d6 <HAL_SPI_Receive+0x1d8>
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d109      	bne.n	80057ea <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e01e      	b.n	8005828 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1c6      	bne.n	8005782 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	6839      	ldr	r1, [r7, #0]
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fa4b 	bl	8005c94 <SPI_EndRxTransaction>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d002      	beq.n	800580a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005826:	2300      	movs	r3, #0
  }
}
 8005828:	4618      	mov	r0, r3
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b08a      	sub	sp, #40	@ 0x28
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
 800583c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800583e:	2301      	movs	r3, #1
 8005840:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005842:	f7fd fb9b 	bl	8002f7c <HAL_GetTick>
 8005846:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800584e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005856:	887b      	ldrh	r3, [r7, #2]
 8005858:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800585a:	7ffb      	ldrb	r3, [r7, #31]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d00c      	beq.n	800587a <HAL_SPI_TransmitReceive+0x4a>
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005866:	d106      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <HAL_SPI_TransmitReceive+0x46>
 8005870:	7ffb      	ldrb	r3, [r7, #31]
 8005872:	2b04      	cmp	r3, #4
 8005874:	d001      	beq.n	800587a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005876:	2302      	movs	r3, #2
 8005878:	e17f      	b.n	8005b7a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_SPI_TransmitReceive+0x5c>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_SPI_TransmitReceive+0x5c>
 8005886:	887b      	ldrh	r3, [r7, #2]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e174      	b.n	8005b7a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <HAL_SPI_TransmitReceive+0x6e>
 800589a:	2302      	movs	r3, #2
 800589c:	e16d      	b.n	8005b7a <HAL_SPI_TransmitReceive+0x34a>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	d003      	beq.n	80058ba <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2205      	movs	r2, #5
 80058b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	887a      	ldrh	r2, [r7, #2]
 80058ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	887a      	ldrh	r2, [r7, #2]
 80058d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	887a      	ldrh	r2, [r7, #2]
 80058dc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	887a      	ldrh	r2, [r7, #2]
 80058e2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058fa:	2b40      	cmp	r3, #64	@ 0x40
 80058fc:	d007      	beq.n	800590e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681a      	ldr	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800590c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005916:	d17e      	bne.n	8005a16 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_SPI_TransmitReceive+0xf6>
 8005920:	8afb      	ldrh	r3, [r7, #22]
 8005922:	2b01      	cmp	r3, #1
 8005924:	d16c      	bne.n	8005a00 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592a:	881a      	ldrh	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005936:	1c9a      	adds	r2, r3, #2
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800594a:	e059      	b.n	8005a00 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b02      	cmp	r3, #2
 8005958:	d11b      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x162>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d016      	beq.n	8005992 <HAL_SPI_TransmitReceive+0x162>
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	2b01      	cmp	r3, #1
 8005968:	d113      	bne.n	8005992 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596e:	881a      	ldrh	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800597a:	1c9a      	adds	r2, r3, #2
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005984:	b29b      	uxth	r3, r3
 8005986:	3b01      	subs	r3, #1
 8005988:	b29a      	uxth	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b01      	cmp	r3, #1
 800599e:	d119      	bne.n	80059d4 <HAL_SPI_TransmitReceive+0x1a4>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d014      	beq.n	80059d4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059b4:	b292      	uxth	r2, r2
 80059b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059bc:	1c9a      	adds	r2, r3, #2
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059d0:	2301      	movs	r3, #1
 80059d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059d4:	f7fd fad2 	bl	8002f7c <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d80d      	bhi.n	8005a00 <HAL_SPI_TransmitReceive+0x1d0>
 80059e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ea:	d009      	beq.n	8005a00 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e0bc      	b.n	8005b7a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1a0      	bne.n	800594c <HAL_SPI_TransmitReceive+0x11c>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d19b      	bne.n	800594c <HAL_SPI_TransmitReceive+0x11c>
 8005a14:	e082      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <HAL_SPI_TransmitReceive+0x1f4>
 8005a1e:	8afb      	ldrh	r3, [r7, #22]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d171      	bne.n	8005b08 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	330c      	adds	r3, #12
 8005a2e:	7812      	ldrb	r2, [r2, #0]
 8005a30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	3b01      	subs	r3, #1
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a4a:	e05d      	b.n	8005b08 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d11c      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x264>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d017      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x264>
 8005a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d114      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	330c      	adds	r3, #12
 8005a74:	7812      	ldrb	r2, [r2, #0]
 8005a76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d119      	bne.n	8005ad6 <HAL_SPI_TransmitReceive+0x2a6>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d014      	beq.n	8005ad6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005ad6:	f7fd fa51 	bl	8002f7c <HAL_GetTick>
 8005ada:	4602      	mov	r2, r0
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d803      	bhi.n	8005aee <HAL_SPI_TransmitReceive+0x2be>
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d102      	bne.n	8005af4 <HAL_SPI_TransmitReceive+0x2c4>
 8005aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d109      	bne.n	8005b08 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e038      	b.n	8005b7a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d19c      	bne.n	8005a4c <HAL_SPI_TransmitReceive+0x21c>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d197      	bne.n	8005a4c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b1c:	6a3a      	ldr	r2, [r7, #32]
 8005b1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f91d 	bl	8005d60 <SPI_EndRxTxTransaction>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d008      	beq.n	8005b3e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e01d      	b.n	8005b7a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d10a      	bne.n	8005b5c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b46:	2300      	movs	r3, #0
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	613b      	str	r3, [r7, #16]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	613b      	str	r3, [r7, #16]
 8005b5a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e000      	b.n	8005b7a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005b78:	2300      	movs	r3, #0
  }
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3728      	adds	r7, #40	@ 0x28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
	...

08005b84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b94:	f7fd f9f2 	bl	8002f7c <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	683a      	ldr	r2, [r7, #0]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005ba4:	f7fd f9ea 	bl	8002f7c <HAL_GetTick>
 8005ba8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005baa:	4b39      	ldr	r3, [pc, #228]	@ (8005c90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	015b      	lsls	r3, r3, #5
 8005bb0:	0d1b      	lsrs	r3, r3, #20
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	fb02 f303 	mul.w	r3, r2, r3
 8005bb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bba:	e054      	b.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc2:	d050      	beq.n	8005c66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bc4:	f7fd f9da 	bl	8002f7c <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d902      	bls.n	8005bda <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d13d      	bne.n	8005c56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005be8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bf2:	d111      	bne.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bfc:	d004      	beq.n	8005c08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c06:	d107      	bne.n	8005c18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c20:	d10f      	bne.n	8005c42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2201      	movs	r2, #1
 8005c46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e017      	b.n	8005c86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	68ba      	ldr	r2, [r7, #8]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	bf0c      	ite	eq
 8005c76:	2301      	moveq	r3, #1
 8005c78:	2300      	movne	r3, #0
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	79fb      	ldrb	r3, [r7, #7]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d19b      	bne.n	8005bbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20000008 	.word	0x20000008

08005c94 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b086      	sub	sp, #24
 8005c98:	af02      	add	r7, sp, #8
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ca8:	d111      	bne.n	8005cce <SPI_EndRxTransaction+0x3a>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cb2:	d004      	beq.n	8005cbe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005cbc:	d107      	bne.n	8005cce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ccc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cd6:	d12a      	bne.n	8005d2e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ce0:	d012      	beq.n	8005d08 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2180      	movs	r1, #128	@ 0x80
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f7ff ff49 	bl	8005b84 <SPI_WaitFlagStateUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d02d      	beq.n	8005d54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cfc:	f043 0220 	orr.w	r2, r3, #32
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e026      	b.n	8005d56 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	2101      	movs	r1, #1
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f7ff ff36 	bl	8005b84 <SPI_WaitFlagStateUntilTimeout>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d01a      	beq.n	8005d54 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d22:	f043 0220 	orr.w	r2, r3, #32
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e013      	b.n	8005d56 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2200      	movs	r2, #0
 8005d36:	2101      	movs	r1, #1
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f7ff ff23 	bl	8005b84 <SPI_WaitFlagStateUntilTimeout>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d48:	f043 0220 	orr.w	r2, r3, #32
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e000      	b.n	8005d56 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
	...

08005d60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b088      	sub	sp, #32
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	60b9      	str	r1, [r7, #8]
 8005d6a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2201      	movs	r2, #1
 8005d74:	2102      	movs	r1, #2
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f7ff ff04 	bl	8005b84 <SPI_WaitFlagStateUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d007      	beq.n	8005d92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d86:	f043 0220 	orr.w	r2, r3, #32
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e032      	b.n	8005df8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005d92:	4b1b      	ldr	r3, [pc, #108]	@ (8005e00 <SPI_EndRxTxTransaction+0xa0>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1b      	ldr	r2, [pc, #108]	@ (8005e04 <SPI_EndRxTxTransaction+0xa4>)
 8005d98:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9c:	0d5b      	lsrs	r3, r3, #21
 8005d9e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005da2:	fb02 f303 	mul.w	r3, r2, r3
 8005da6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005db0:	d112      	bne.n	8005dd8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2200      	movs	r2, #0
 8005dba:	2180      	movs	r1, #128	@ 0x80
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f7ff fee1 	bl	8005b84 <SPI_WaitFlagStateUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d016      	beq.n	8005df6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	e00f      	b.n	8005df8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dee:	2b80      	cmp	r3, #128	@ 0x80
 8005df0:	d0f2      	beq.n	8005dd8 <SPI_EndRxTxTransaction+0x78>
 8005df2:	e000      	b.n	8005df6 <SPI_EndRxTxTransaction+0x96>
        break;
 8005df4:	bf00      	nop
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000008 	.word	0x20000008
 8005e04:	165e9f81 	.word	0x165e9f81

08005e08 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e038      	b.n	8005e90 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f7fa fd48 	bl	80008c8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3308      	adds	r3, #8
 8005e40:	4619      	mov	r1, r3
 8005e42:	4610      	mov	r0, r2
 8005e44:	f001 fcf4 	bl	8007830 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	461a      	mov	r2, r3
 8005e52:	68b9      	ldr	r1, [r7, #8]
 8005e54:	f001 fd56 	bl	8007904 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6858      	ldr	r0, [r3, #4]
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	689a      	ldr	r2, [r3, #8]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	f001 fd83 	bl	8007970 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	6892      	ldr	r2, [r2, #8]
 8005e72:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	6892      	ldr	r2, [r2, #8]
 8005e7e:	f041 0101 	orr.w	r1, r1, #1
 8005e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e041      	b.n	8005f2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fc fed0 	bl	8002c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	f000 fa7e 	bl	80063d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d001      	beq.n	8005f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e04e      	b.n	8005fee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68da      	ldr	r2, [r3, #12]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a23      	ldr	r2, [pc, #140]	@ (8005ffc <HAL_TIM_Base_Start_IT+0xc4>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d022      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x80>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f7a:	d01d      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x80>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a1f      	ldr	r2, [pc, #124]	@ (8006000 <HAL_TIM_Base_Start_IT+0xc8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d018      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x80>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8006004 <HAL_TIM_Base_Start_IT+0xcc>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d013      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x80>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a1c      	ldr	r2, [pc, #112]	@ (8006008 <HAL_TIM_Base_Start_IT+0xd0>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d00e      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x80>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a1b      	ldr	r2, [pc, #108]	@ (800600c <HAL_TIM_Base_Start_IT+0xd4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d009      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x80>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a19      	ldr	r2, [pc, #100]	@ (8006010 <HAL_TIM_Base_Start_IT+0xd8>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d004      	beq.n	8005fb8 <HAL_TIM_Base_Start_IT+0x80>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a18      	ldr	r2, [pc, #96]	@ (8006014 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d111      	bne.n	8005fdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b06      	cmp	r3, #6
 8005fc8:	d010      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0201 	orr.w	r2, r2, #1
 8005fd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fda:	e007      	b.n	8005fec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0201 	orr.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3714      	adds	r7, #20
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
 8005ffa:	bf00      	nop
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40000400 	.word	0x40000400
 8006004:	40000800 	.word	0x40000800
 8006008:	40000c00 	.word	0x40000c00
 800600c:	40010400 	.word	0x40010400
 8006010:	40014000 	.word	0x40014000
 8006014:	40001800 	.word	0x40001800

08006018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 0302 	and.w	r3, r3, #2
 8006036:	2b00      	cmp	r3, #0
 8006038:	d020      	beq.n	800607c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01b      	beq.n	800607c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0202 	mvn.w	r2, #2
 800604c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	f003 0303 	and.w	r3, r3, #3
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f999 	bl	800639a <HAL_TIM_IC_CaptureCallback>
 8006068:	e005      	b.n	8006076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f98b 	bl	8006386 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f99c 	bl	80063ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b00      	cmp	r3, #0
 8006084:	d020      	beq.n	80060c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f003 0304 	and.w	r3, r3, #4
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01b      	beq.n	80060c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f06f 0204 	mvn.w	r2, #4
 8006098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2202      	movs	r2, #2
 800609e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f973 	bl	800639a <HAL_TIM_IC_CaptureCallback>
 80060b4:	e005      	b.n	80060c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f965 	bl	8006386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f976 	bl	80063ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d020      	beq.n	8006114 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f003 0308 	and.w	r3, r3, #8
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d01b      	beq.n	8006114 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0208 	mvn.w	r2, #8
 80060e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2204      	movs	r2, #4
 80060ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	f003 0303 	and.w	r3, r3, #3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d003      	beq.n	8006102 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 f94d 	bl	800639a <HAL_TIM_IC_CaptureCallback>
 8006100:	e005      	b.n	800610e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f000 f93f 	bl	8006386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f950 	bl	80063ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	f003 0310 	and.w	r3, r3, #16
 800611a:	2b00      	cmp	r3, #0
 800611c:	d020      	beq.n	8006160 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	d01b      	beq.n	8006160 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0210 	mvn.w	r2, #16
 8006130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2208      	movs	r2, #8
 8006136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	69db      	ldr	r3, [r3, #28]
 800613e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f927 	bl	800639a <HAL_TIM_IC_CaptureCallback>
 800614c:	e005      	b.n	800615a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f919 	bl	8006386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f92a 	bl	80063ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00c      	beq.n	8006184 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f06f 0201 	mvn.w	r2, #1
 800617c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f7fc fbfe 	bl	8002980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00c      	beq.n	80061a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006194:	2b00      	cmp	r3, #0
 8006196:	d007      	beq.n	80061a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fae4 	bl	8006770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00c      	beq.n	80061cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d007      	beq.n	80061cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f8fb 	bl	80063c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f003 0320 	and.w	r3, r3, #32
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00c      	beq.n	80061f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f003 0320 	and.w	r3, r3, #32
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0220 	mvn.w	r2, #32
 80061e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fab6 	bl	800675c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006202:	2300      	movs	r3, #0
 8006204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800620c:	2b01      	cmp	r3, #1
 800620e:	d101      	bne.n	8006214 <HAL_TIM_ConfigClockSource+0x1c>
 8006210:	2302      	movs	r3, #2
 8006212:	e0b4      	b.n	800637e <HAL_TIM_ConfigClockSource+0x186>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800623a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800624c:	d03e      	beq.n	80062cc <HAL_TIM_ConfigClockSource+0xd4>
 800624e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006252:	f200 8087 	bhi.w	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 8006256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800625a:	f000 8086 	beq.w	800636a <HAL_TIM_ConfigClockSource+0x172>
 800625e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006262:	d87f      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 8006264:	2b70      	cmp	r3, #112	@ 0x70
 8006266:	d01a      	beq.n	800629e <HAL_TIM_ConfigClockSource+0xa6>
 8006268:	2b70      	cmp	r3, #112	@ 0x70
 800626a:	d87b      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 800626c:	2b60      	cmp	r3, #96	@ 0x60
 800626e:	d050      	beq.n	8006312 <HAL_TIM_ConfigClockSource+0x11a>
 8006270:	2b60      	cmp	r3, #96	@ 0x60
 8006272:	d877      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 8006274:	2b50      	cmp	r3, #80	@ 0x50
 8006276:	d03c      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0xfa>
 8006278:	2b50      	cmp	r3, #80	@ 0x50
 800627a:	d873      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 800627c:	2b40      	cmp	r3, #64	@ 0x40
 800627e:	d058      	beq.n	8006332 <HAL_TIM_ConfigClockSource+0x13a>
 8006280:	2b40      	cmp	r3, #64	@ 0x40
 8006282:	d86f      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 8006284:	2b30      	cmp	r3, #48	@ 0x30
 8006286:	d064      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x15a>
 8006288:	2b30      	cmp	r3, #48	@ 0x30
 800628a:	d86b      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 800628c:	2b20      	cmp	r3, #32
 800628e:	d060      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x15a>
 8006290:	2b20      	cmp	r3, #32
 8006292:	d867      	bhi.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
 8006294:	2b00      	cmp	r3, #0
 8006296:	d05c      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x15a>
 8006298:	2b10      	cmp	r3, #16
 800629a:	d05a      	beq.n	8006352 <HAL_TIM_ConfigClockSource+0x15a>
 800629c:	e062      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062ae:	f000 f9b9 	bl	8006624 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80062c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	609a      	str	r2, [r3, #8]
      break;
 80062ca:	e04f      	b.n	800636c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062dc:	f000 f9a2 	bl	8006624 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062ee:	609a      	str	r2, [r3, #8]
      break;
 80062f0:	e03c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062fe:	461a      	mov	r2, r3
 8006300:	f000 f916 	bl	8006530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2150      	movs	r1, #80	@ 0x50
 800630a:	4618      	mov	r0, r3
 800630c:	f000 f96f 	bl	80065ee <TIM_ITRx_SetConfig>
      break;
 8006310:	e02c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800631e:	461a      	mov	r2, r3
 8006320:	f000 f935 	bl	800658e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2160      	movs	r1, #96	@ 0x60
 800632a:	4618      	mov	r0, r3
 800632c:	f000 f95f 	bl	80065ee <TIM_ITRx_SetConfig>
      break;
 8006330:	e01c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800633e:	461a      	mov	r2, r3
 8006340:	f000 f8f6 	bl	8006530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2140      	movs	r1, #64	@ 0x40
 800634a:	4618      	mov	r0, r3
 800634c:	f000 f94f 	bl	80065ee <TIM_ITRx_SetConfig>
      break;
 8006350:	e00c      	b.n	800636c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4619      	mov	r1, r3
 800635c:	4610      	mov	r0, r2
 800635e:	f000 f946 	bl	80065ee <TIM_ITRx_SetConfig>
      break;
 8006362:	e003      	b.n	800636c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
      break;
 8006368:	e000      	b.n	800636c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800636a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800637c:	7bfb      	ldrb	r3, [r7, #15]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr

080063ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr
	...

080063d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a46      	ldr	r2, [pc, #280]	@ (8006504 <TIM_Base_SetConfig+0x12c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d013      	beq.n	8006418 <TIM_Base_SetConfig+0x40>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f6:	d00f      	beq.n	8006418 <TIM_Base_SetConfig+0x40>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a43      	ldr	r2, [pc, #268]	@ (8006508 <TIM_Base_SetConfig+0x130>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00b      	beq.n	8006418 <TIM_Base_SetConfig+0x40>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a42      	ldr	r2, [pc, #264]	@ (800650c <TIM_Base_SetConfig+0x134>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d007      	beq.n	8006418 <TIM_Base_SetConfig+0x40>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a41      	ldr	r2, [pc, #260]	@ (8006510 <TIM_Base_SetConfig+0x138>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d003      	beq.n	8006418 <TIM_Base_SetConfig+0x40>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a40      	ldr	r2, [pc, #256]	@ (8006514 <TIM_Base_SetConfig+0x13c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d108      	bne.n	800642a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800641e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a35      	ldr	r2, [pc, #212]	@ (8006504 <TIM_Base_SetConfig+0x12c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d02b      	beq.n	800648a <TIM_Base_SetConfig+0xb2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006438:	d027      	beq.n	800648a <TIM_Base_SetConfig+0xb2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a32      	ldr	r2, [pc, #200]	@ (8006508 <TIM_Base_SetConfig+0x130>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d023      	beq.n	800648a <TIM_Base_SetConfig+0xb2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a31      	ldr	r2, [pc, #196]	@ (800650c <TIM_Base_SetConfig+0x134>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d01f      	beq.n	800648a <TIM_Base_SetConfig+0xb2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a30      	ldr	r2, [pc, #192]	@ (8006510 <TIM_Base_SetConfig+0x138>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d01b      	beq.n	800648a <TIM_Base_SetConfig+0xb2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a2f      	ldr	r2, [pc, #188]	@ (8006514 <TIM_Base_SetConfig+0x13c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d017      	beq.n	800648a <TIM_Base_SetConfig+0xb2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a2e      	ldr	r2, [pc, #184]	@ (8006518 <TIM_Base_SetConfig+0x140>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d013      	beq.n	800648a <TIM_Base_SetConfig+0xb2>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	4a2d      	ldr	r2, [pc, #180]	@ (800651c <TIM_Base_SetConfig+0x144>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00f      	beq.n	800648a <TIM_Base_SetConfig+0xb2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a2c      	ldr	r2, [pc, #176]	@ (8006520 <TIM_Base_SetConfig+0x148>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d00b      	beq.n	800648a <TIM_Base_SetConfig+0xb2>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a2b      	ldr	r2, [pc, #172]	@ (8006524 <TIM_Base_SetConfig+0x14c>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d007      	beq.n	800648a <TIM_Base_SetConfig+0xb2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a2a      	ldr	r2, [pc, #168]	@ (8006528 <TIM_Base_SetConfig+0x150>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d003      	beq.n	800648a <TIM_Base_SetConfig+0xb2>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a29      	ldr	r2, [pc, #164]	@ (800652c <TIM_Base_SetConfig+0x154>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d108      	bne.n	800649c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a10      	ldr	r2, [pc, #64]	@ (8006504 <TIM_Base_SetConfig+0x12c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d003      	beq.n	80064d0 <TIM_Base_SetConfig+0xf8>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	4a12      	ldr	r2, [pc, #72]	@ (8006514 <TIM_Base_SetConfig+0x13c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d103      	bne.n	80064d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d105      	bne.n	80064f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f023 0201 	bic.w	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	611a      	str	r2, [r3, #16]
  }
}
 80064f6:	bf00      	nop
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40010000 	.word	0x40010000
 8006508:	40000400 	.word	0x40000400
 800650c:	40000800 	.word	0x40000800
 8006510:	40000c00 	.word	0x40000c00
 8006514:	40010400 	.word	0x40010400
 8006518:	40014000 	.word	0x40014000
 800651c:	40014400 	.word	0x40014400
 8006520:	40014800 	.word	0x40014800
 8006524:	40001800 	.word	0x40001800
 8006528:	40001c00 	.word	0x40001c00
 800652c:	40002000 	.word	0x40002000

08006530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6a1b      	ldr	r3, [r3, #32]
 8006546:	f023 0201 	bic.w	r2, r3, #1
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800655a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	f023 030a 	bic.w	r3, r3, #10
 800656c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	4313      	orrs	r3, r2
 8006574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	621a      	str	r2, [r3, #32]
}
 8006582:	bf00      	nop
 8006584:	371c      	adds	r7, #28
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800658e:	b480      	push	{r7}
 8006590:	b087      	sub	sp, #28
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	f023 0210 	bic.w	r2, r3, #16
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	031b      	lsls	r3, r3, #12
 80065be:	693a      	ldr	r2, [r7, #16]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	621a      	str	r2, [r3, #32]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b085      	sub	sp, #20
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006606:	683a      	ldr	r2, [r7, #0]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	f043 0307 	orr.w	r3, r3, #7
 8006610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	609a      	str	r2, [r3, #8]
}
 8006618:	bf00      	nop
 800661a:	3714      	adds	r7, #20
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006624:	b480      	push	{r7}
 8006626:	b087      	sub	sp, #28
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800663e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	021a      	lsls	r2, r3, #8
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	431a      	orrs	r2, r3
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	4313      	orrs	r3, r2
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	609a      	str	r2, [r3, #8]
}
 8006658:	bf00      	nop
 800665a:	371c      	adds	r7, #28
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006674:	2b01      	cmp	r3, #1
 8006676:	d101      	bne.n	800667c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006678:	2302      	movs	r3, #2
 800667a:	e05a      	b.n	8006732 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a21      	ldr	r2, [pc, #132]	@ (8006740 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d022      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066c8:	d01d      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a1d      	ldr	r2, [pc, #116]	@ (8006744 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d018      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006748 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d013      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a1a      	ldr	r2, [pc, #104]	@ (800674c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d00e      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a18      	ldr	r2, [pc, #96]	@ (8006750 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d009      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a17      	ldr	r2, [pc, #92]	@ (8006754 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d004      	beq.n	8006706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a15      	ldr	r2, [pc, #84]	@ (8006758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d10c      	bne.n	8006720 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800670c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	4313      	orrs	r3, r2
 8006716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	40010000 	.word	0x40010000
 8006744:	40000400 	.word	0x40000400
 8006748:	40000800 	.word	0x40000800
 800674c:	40000c00 	.word	0x40000c00
 8006750:	40010400 	.word	0x40010400
 8006754:	40014000 	.word	0x40014000
 8006758:	40001800 	.word	0x40001800

0800675c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e042      	b.n	800681c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fc fac8 	bl	8002d40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2224      	movs	r2, #36	@ 0x24
 80067b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fdbd 	bl	8007348 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	695a      	ldr	r2, [r3, #20]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80067ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68da      	ldr	r2, [r3, #12]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80067fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2220      	movs	r2, #32
 8006810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b08a      	sub	sp, #40	@ 0x28
 8006828:	af02      	add	r7, sp, #8
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	603b      	str	r3, [r7, #0]
 8006830:	4613      	mov	r3, r2
 8006832:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b20      	cmp	r3, #32
 8006842:	d175      	bne.n	8006930 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <HAL_UART_Transmit+0x2c>
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e06e      	b.n	8006932 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2221      	movs	r2, #33	@ 0x21
 800685e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006862:	f7fc fb8b 	bl	8002f7c <HAL_GetTick>
 8006866:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	88fa      	ldrh	r2, [r7, #6]
 800686c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	88fa      	ldrh	r2, [r7, #6]
 8006872:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800687c:	d108      	bne.n	8006890 <HAL_UART_Transmit+0x6c>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d104      	bne.n	8006890 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006886:	2300      	movs	r3, #0
 8006888:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	61bb      	str	r3, [r7, #24]
 800688e:	e003      	b.n	8006898 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006894:	2300      	movs	r3, #0
 8006896:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006898:	e02e      	b.n	80068f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2200      	movs	r2, #0
 80068a2:	2180      	movs	r1, #128	@ 0x80
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 fb1f 	bl	8006ee8 <UART_WaitOnFlagUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d005      	beq.n	80068bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e03a      	b.n	8006932 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d10b      	bne.n	80068da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80068d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	3302      	adds	r3, #2
 80068d6:	61bb      	str	r3, [r7, #24]
 80068d8:	e007      	b.n	80068ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80068da:	69fb      	ldr	r3, [r7, #28]
 80068dc:	781a      	ldrb	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	3301      	adds	r3, #1
 80068e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	3b01      	subs	r3, #1
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1cb      	bne.n	800689a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2200      	movs	r2, #0
 800690a:	2140      	movs	r1, #64	@ 0x40
 800690c:	68f8      	ldr	r0, [r7, #12]
 800690e:	f000 faeb 	bl	8006ee8 <UART_WaitOnFlagUntilTimeout>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d005      	beq.n	8006924 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2220      	movs	r2, #32
 800691c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006920:	2303      	movs	r3, #3
 8006922:	e006      	b.n	8006932 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	e000      	b.n	8006932 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006930:	2302      	movs	r3, #2
  }
}
 8006932:	4618      	mov	r0, r3
 8006934:	3720      	adds	r7, #32
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	4613      	mov	r3, r2
 8006946:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b20      	cmp	r3, #32
 8006952:	d112      	bne.n	800697a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <HAL_UART_Receive_IT+0x26>
 800695a:	88fb      	ldrh	r3, [r7, #6]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e00b      	b.n	800697c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800696a:	88fb      	ldrh	r3, [r7, #6]
 800696c:	461a      	mov	r2, r3
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 fb12 	bl	8006f9a <UART_Start_Receive_IT>
 8006976:	4603      	mov	r3, r0
 8006978:	e000      	b.n	800697c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800697a:	2302      	movs	r3, #2
  }
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b0ba      	sub	sp, #232	@ 0xe8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80069aa:	2300      	movs	r3, #0
 80069ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80069b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ba:	f003 030f 	and.w	r3, r3, #15
 80069be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80069c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10f      	bne.n	80069ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d009      	beq.n	80069ea <HAL_UART_IRQHandler+0x66>
 80069d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069da:	f003 0320 	and.w	r3, r3, #32
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 fbf2 	bl	80071cc <UART_Receive_IT>
      return;
 80069e8:	e25b      	b.n	8006ea2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80069ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	f000 80de 	beq.w	8006bb0 <HAL_UART_IRQHandler+0x22c>
 80069f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d106      	bne.n	8006a0e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a04:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 80d1 	beq.w	8006bb0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00b      	beq.n	8006a32 <HAL_UART_IRQHandler+0xae>
 8006a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d005      	beq.n	8006a32 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a2a:	f043 0201 	orr.w	r2, r3, #1
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00b      	beq.n	8006a56 <HAL_UART_IRQHandler+0xd2>
 8006a3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a4e:	f043 0202 	orr.w	r2, r3, #2
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a5a:	f003 0302 	and.w	r3, r3, #2
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00b      	beq.n	8006a7a <HAL_UART_IRQHandler+0xf6>
 8006a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d005      	beq.n	8006a7a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a72:	f043 0204 	orr.w	r2, r3, #4
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a7e:	f003 0308 	and.w	r3, r3, #8
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d011      	beq.n	8006aaa <HAL_UART_IRQHandler+0x126>
 8006a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a8a:	f003 0320 	and.w	r3, r3, #32
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d105      	bne.n	8006a9e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d005      	beq.n	8006aaa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa2:	f043 0208 	orr.w	r2, r3, #8
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 81f2 	beq.w	8006e98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d008      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x14e>
 8006ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ac4:	f003 0320 	and.w	r3, r3, #32
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 fb7d 	bl	80071cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006adc:	2b40      	cmp	r3, #64	@ 0x40
 8006ade:	bf0c      	ite	eq
 8006ae0:	2301      	moveq	r3, #1
 8006ae2:	2300      	movne	r3, #0
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d103      	bne.n	8006afe <HAL_UART_IRQHandler+0x17a>
 8006af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d04f      	beq.n	8006b9e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fa85 	bl	800700e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b0e:	2b40      	cmp	r3, #64	@ 0x40
 8006b10:	d141      	bne.n	8006b96 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3314      	adds	r3, #20
 8006b18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b20:	e853 3f00 	ldrex	r3, [r3]
 8006b24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b30:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	3314      	adds	r3, #20
 8006b3a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b3e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b4a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1d9      	bne.n	8006b12 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d013      	beq.n	8006b8e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b6a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d64 <HAL_UART_IRQHandler+0x3e0>)
 8006b6c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fc fbb3 	bl	80032de <HAL_DMA_Abort_IT>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d016      	beq.n	8006bac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006b88:	4610      	mov	r0, r2
 8006b8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b8c:	e00e      	b.n	8006bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 f994 	bl	8006ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b94:	e00a      	b.n	8006bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f990 	bl	8006ebc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b9c:	e006      	b.n	8006bac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f98c 	bl	8006ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006baa:	e175      	b.n	8006e98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bac:	bf00      	nop
    return;
 8006bae:	e173      	b.n	8006e98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	f040 814f 	bne.w	8006e58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bbe:	f003 0310 	and.w	r3, r3, #16
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 8148 	beq.w	8006e58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bcc:	f003 0310 	and.w	r3, r3, #16
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8141 	beq.w	8006e58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60bb      	str	r3, [r7, #8]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	60bb      	str	r3, [r7, #8]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	60bb      	str	r3, [r7, #8]
 8006bea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf6:	2b40      	cmp	r3, #64	@ 0x40
 8006bf8:	f040 80b6 	bne.w	8006d68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006c08:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 8145 	beq.w	8006e9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	f080 813e 	bcs.w	8006e9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c26:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c32:	f000 8088 	beq.w	8006d46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	330c      	adds	r3, #12
 8006c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	330c      	adds	r3, #12
 8006c5e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006c62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c72:	e841 2300 	strex	r3, r2, [r1]
 8006c76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1d9      	bne.n	8006c36 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3314      	adds	r3, #20
 8006c88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c94:	f023 0301 	bic.w	r3, r3, #1
 8006c98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	3314      	adds	r3, #20
 8006ca2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006ca6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006caa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006cae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006cb2:	e841 2300 	strex	r3, r2, [r1]
 8006cb6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006cb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1e1      	bne.n	8006c82 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3314      	adds	r3, #20
 8006cc4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cc8:	e853 3f00 	ldrex	r3, [r3]
 8006ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006cce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3314      	adds	r3, #20
 8006cde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006ce2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006ce4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006ce8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006cf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e3      	bne.n	8006cbe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	330c      	adds	r3, #12
 8006d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d16:	f023 0310 	bic.w	r3, r3, #16
 8006d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	330c      	adds	r3, #12
 8006d24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006d28:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006d2a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e3      	bne.n	8006d04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fc fa5c 	bl	80031fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f8b7 	bl	8006ed0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006d62:	e09b      	b.n	8006e9c <HAL_UART_IRQHandler+0x518>
 8006d64:	080070d5 	.word	0x080070d5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	1ad3      	subs	r3, r2, r3
 8006d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 808e 	beq.w	8006ea0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006d84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 8089 	beq.w	8006ea0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	330c      	adds	r3, #12
 8006d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006da4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	330c      	adds	r3, #12
 8006dae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006db2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006db4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006db8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dba:	e841 2300 	strex	r3, r2, [r1]
 8006dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d1e3      	bne.n	8006d8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3314      	adds	r3, #20
 8006dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd0:	e853 3f00 	ldrex	r3, [r3]
 8006dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	f023 0301 	bic.w	r3, r3, #1
 8006ddc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3314      	adds	r3, #20
 8006de6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006dea:	633a      	str	r2, [r7, #48]	@ 0x30
 8006dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df2:	e841 2300 	strex	r3, r2, [r1]
 8006df6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1e3      	bne.n	8006dc6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2220      	movs	r2, #32
 8006e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	330c      	adds	r3, #12
 8006e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f023 0310 	bic.w	r3, r3, #16
 8006e22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	330c      	adds	r3, #12
 8006e2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006e30:	61fa      	str	r2, [r7, #28]
 8006e32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	69b9      	ldr	r1, [r7, #24]
 8006e36:	69fa      	ldr	r2, [r7, #28]
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e3      	bne.n	8006e0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2202      	movs	r2, #2
 8006e48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e4e:	4619      	mov	r1, r3
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 f83d 	bl	8006ed0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e56:	e023      	b.n	8006ea0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d009      	beq.n	8006e78 <HAL_UART_IRQHandler+0x4f4>
 8006e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f943 	bl	80070fc <UART_Transmit_IT>
    return;
 8006e76:	e014      	b.n	8006ea2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d00e      	beq.n	8006ea2 <HAL_UART_IRQHandler+0x51e>
 8006e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d008      	beq.n	8006ea2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f983 	bl	800719c <UART_EndTransmit_IT>
    return;
 8006e96:	e004      	b.n	8006ea2 <HAL_UART_IRQHandler+0x51e>
    return;
 8006e98:	bf00      	nop
 8006e9a:	e002      	b.n	8006ea2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006e9c:	bf00      	nop
 8006e9e:	e000      	b.n	8006ea2 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ea0:	bf00      	nop
  }
}
 8006ea2:	37e8      	adds	r7, #232	@ 0xe8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006ec4:	bf00      	nop
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b086      	sub	sp, #24
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ef8:	e03b      	b.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f00:	d037      	beq.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f02:	f7fc f83b 	bl	8002f7c <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	6a3a      	ldr	r2, [r7, #32]
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d302      	bcc.n	8006f18 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f18:	2303      	movs	r3, #3
 8006f1a:	e03a      	b.n	8006f92 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d023      	beq.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b80      	cmp	r3, #128	@ 0x80
 8006f2e:	d020      	beq.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2b40      	cmp	r3, #64	@ 0x40
 8006f34:	d01d      	beq.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d116      	bne.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	617b      	str	r3, [r7, #20]
 8006f58:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 f857 	bl	800700e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2208      	movs	r2, #8
 8006f64:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e00f      	b.n	8006f92 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4013      	ands	r3, r2
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	bf0c      	ite	eq
 8006f82:	2301      	moveq	r3, #1
 8006f84:	2300      	movne	r3, #0
 8006f86:	b2db      	uxtb	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	79fb      	ldrb	r3, [r7, #7]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d0b4      	beq.n	8006efa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3718      	adds	r7, #24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b085      	sub	sp, #20
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	60f8      	str	r0, [r7, #12]
 8006fa2:	60b9      	str	r1, [r7, #8]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	88fa      	ldrh	r2, [r7, #6]
 8006fb2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	88fa      	ldrh	r2, [r7, #6]
 8006fb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2222      	movs	r2, #34	@ 0x22
 8006fc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d007      	beq.n	8006fe0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fde:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	695a      	ldr	r2, [r3, #20]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0201 	orr.w	r2, r2, #1
 8006fee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0220 	orr.w	r2, r2, #32
 8006ffe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800700e:	b480      	push	{r7}
 8007010:	b095      	sub	sp, #84	@ 0x54
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	330c      	adds	r3, #12
 800701c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007020:	e853 3f00 	ldrex	r3, [r3]
 8007024:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007028:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800702c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	330c      	adds	r3, #12
 8007034:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007036:	643a      	str	r2, [r7, #64]	@ 0x40
 8007038:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800703c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800703e:	e841 2300 	strex	r3, r2, [r1]
 8007042:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1e5      	bne.n	8007016 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3314      	adds	r3, #20
 8007050:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	e853 3f00 	ldrex	r3, [r3]
 8007058:	61fb      	str	r3, [r7, #28]
   return(result);
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3314      	adds	r3, #20
 8007068:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800706a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800706c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007070:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007072:	e841 2300 	strex	r3, r2, [r1]
 8007076:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e5      	bne.n	800704a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007082:	2b01      	cmp	r3, #1
 8007084:	d119      	bne.n	80070ba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	330c      	adds	r3, #12
 800708c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	e853 3f00 	ldrex	r3, [r3]
 8007094:	60bb      	str	r3, [r7, #8]
   return(result);
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	f023 0310 	bic.w	r3, r3, #16
 800709c:	647b      	str	r3, [r7, #68]	@ 0x44
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	330c      	adds	r3, #12
 80070a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070a6:	61ba      	str	r2, [r7, #24]
 80070a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070aa:	6979      	ldr	r1, [r7, #20]
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	e841 2300 	strex	r3, r2, [r1]
 80070b2:	613b      	str	r3, [r7, #16]
   return(result);
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1e5      	bne.n	8007086 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2220      	movs	r2, #32
 80070be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80070c8:	bf00      	nop
 80070ca:	3754      	adds	r7, #84	@ 0x54
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7ff fee4 	bl	8006ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070f4:	bf00      	nop
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b21      	cmp	r3, #33	@ 0x21
 800710e:	d13e      	bne.n	800718e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007118:	d114      	bne.n	8007144 <UART_Transmit_IT+0x48>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d110      	bne.n	8007144 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	461a      	mov	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007136:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	1c9a      	adds	r2, r3, #2
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	621a      	str	r2, [r3, #32]
 8007142:	e008      	b.n	8007156 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	1c59      	adds	r1, r3, #1
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6211      	str	r1, [r2, #32]
 800714e:	781a      	ldrb	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800715a:	b29b      	uxth	r3, r3
 800715c:	3b01      	subs	r3, #1
 800715e:	b29b      	uxth	r3, r3
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	4619      	mov	r1, r3
 8007164:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10f      	bne.n	800718a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68da      	ldr	r2, [r3, #12]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007178:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007188:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	e000      	b.n	8007190 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800718e:	2302      	movs	r3, #2
  }
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68da      	ldr	r2, [r3, #12]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff fe73 	bl	8006ea8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08c      	sub	sp, #48	@ 0x30
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	2b22      	cmp	r3, #34	@ 0x22
 80071de:	f040 80ae 	bne.w	800733e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ea:	d117      	bne.n	800721c <UART_Receive_IT+0x50>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	691b      	ldr	r3, [r3, #16]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d113      	bne.n	800721c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071f4:	2300      	movs	r3, #0
 80071f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	b29b      	uxth	r3, r3
 8007206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800720a:	b29a      	uxth	r2, r3
 800720c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007214:	1c9a      	adds	r2, r3, #2
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	629a      	str	r2, [r3, #40]	@ 0x28
 800721a:	e026      	b.n	800726a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007220:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007222:	2300      	movs	r3, #0
 8007224:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800722e:	d007      	beq.n	8007240 <UART_Receive_IT+0x74>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <UART_Receive_IT+0x82>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d106      	bne.n	800724e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	b2da      	uxtb	r2, r3
 8007248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	e008      	b.n	8007260 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	b2db      	uxtb	r3, r3
 8007256:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800725a:	b2da      	uxtb	r2, r3
 800725c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800725e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800726e:	b29b      	uxth	r3, r3
 8007270:	3b01      	subs	r3, #1
 8007272:	b29b      	uxth	r3, r3
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	4619      	mov	r1, r3
 8007278:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800727a:	2b00      	cmp	r3, #0
 800727c:	d15d      	bne.n	800733a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0220 	bic.w	r2, r2, #32
 800728c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	68da      	ldr	r2, [r3, #12]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800729c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	695a      	ldr	r2, [r3, #20]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0201 	bic.w	r2, r2, #1
 80072ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d135      	bne.n	8007330 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	330c      	adds	r3, #12
 80072d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	e853 3f00 	ldrex	r3, [r3]
 80072d8:	613b      	str	r3, [r7, #16]
   return(result);
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	f023 0310 	bic.w	r3, r3, #16
 80072e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	330c      	adds	r3, #12
 80072e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072ea:	623a      	str	r2, [r7, #32]
 80072ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ee:	69f9      	ldr	r1, [r7, #28]
 80072f0:	6a3a      	ldr	r2, [r7, #32]
 80072f2:	e841 2300 	strex	r3, r2, [r1]
 80072f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d1e5      	bne.n	80072ca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0310 	and.w	r3, r3, #16
 8007308:	2b10      	cmp	r3, #16
 800730a:	d10a      	bne.n	8007322 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800730c:	2300      	movs	r3, #0
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	60fb      	str	r3, [r7, #12]
 8007320:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff fdd1 	bl	8006ed0 <HAL_UARTEx_RxEventCallback>
 800732e:	e002      	b.n	8007336 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7fb fcbd 	bl	8002cb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	e002      	b.n	8007340 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	e000      	b.n	8007340 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800733e:	2302      	movs	r3, #2
  }
}
 8007340:	4618      	mov	r0, r3
 8007342:	3730      	adds	r7, #48	@ 0x30
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800734c:	b0c0      	sub	sp, #256	@ 0x100
 800734e:	af00      	add	r7, sp, #0
 8007350:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007364:	68d9      	ldr	r1, [r3, #12]
 8007366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	ea40 0301 	orr.w	r3, r0, r1
 8007370:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007376:	689a      	ldr	r2, [r3, #8]
 8007378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	431a      	orrs	r2, r3
 8007380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	431a      	orrs	r2, r3
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	4313      	orrs	r3, r2
 8007390:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80073a0:	f021 010c 	bic.w	r1, r1, #12
 80073a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80073ae:	430b      	orrs	r3, r1
 80073b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80073be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c2:	6999      	ldr	r1, [r3, #24]
 80073c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	ea40 0301 	orr.w	r3, r0, r1
 80073ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	4b8f      	ldr	r3, [pc, #572]	@ (8007614 <UART_SetConfig+0x2cc>)
 80073d8:	429a      	cmp	r2, r3
 80073da:	d005      	beq.n	80073e8 <UART_SetConfig+0xa0>
 80073dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007618 <UART_SetConfig+0x2d0>)
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d104      	bne.n	80073f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073e8:	f7fd ff28 	bl	800523c <HAL_RCC_GetPCLK2Freq>
 80073ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80073f0:	e003      	b.n	80073fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073f2:	f7fd ff0f 	bl	8005214 <HAL_RCC_GetPCLK1Freq>
 80073f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fe:	69db      	ldr	r3, [r3, #28]
 8007400:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007404:	f040 810c 	bne.w	8007620 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800740c:	2200      	movs	r2, #0
 800740e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007412:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007416:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800741a:	4622      	mov	r2, r4
 800741c:	462b      	mov	r3, r5
 800741e:	1891      	adds	r1, r2, r2
 8007420:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007422:	415b      	adcs	r3, r3
 8007424:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007426:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800742a:	4621      	mov	r1, r4
 800742c:	eb12 0801 	adds.w	r8, r2, r1
 8007430:	4629      	mov	r1, r5
 8007432:	eb43 0901 	adc.w	r9, r3, r1
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	f04f 0300 	mov.w	r3, #0
 800743e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800744a:	4690      	mov	r8, r2
 800744c:	4699      	mov	r9, r3
 800744e:	4623      	mov	r3, r4
 8007450:	eb18 0303 	adds.w	r3, r8, r3
 8007454:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007458:	462b      	mov	r3, r5
 800745a:	eb49 0303 	adc.w	r3, r9, r3
 800745e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800746e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007472:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007476:	460b      	mov	r3, r1
 8007478:	18db      	adds	r3, r3, r3
 800747a:	653b      	str	r3, [r7, #80]	@ 0x50
 800747c:	4613      	mov	r3, r2
 800747e:	eb42 0303 	adc.w	r3, r2, r3
 8007482:	657b      	str	r3, [r7, #84]	@ 0x54
 8007484:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007488:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800748c:	f7f8 fe9c 	bl	80001c8 <__aeabi_uldivmod>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4b61      	ldr	r3, [pc, #388]	@ (800761c <UART_SetConfig+0x2d4>)
 8007496:	fba3 2302 	umull	r2, r3, r3, r2
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	011c      	lsls	r4, r3, #4
 800749e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074a2:	2200      	movs	r2, #0
 80074a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80074ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80074b0:	4642      	mov	r2, r8
 80074b2:	464b      	mov	r3, r9
 80074b4:	1891      	adds	r1, r2, r2
 80074b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80074b8:	415b      	adcs	r3, r3
 80074ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80074c0:	4641      	mov	r1, r8
 80074c2:	eb12 0a01 	adds.w	sl, r2, r1
 80074c6:	4649      	mov	r1, r9
 80074c8:	eb43 0b01 	adc.w	fp, r3, r1
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074e0:	4692      	mov	sl, r2
 80074e2:	469b      	mov	fp, r3
 80074e4:	4643      	mov	r3, r8
 80074e6:	eb1a 0303 	adds.w	r3, sl, r3
 80074ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074ee:	464b      	mov	r3, r9
 80074f0:	eb4b 0303 	adc.w	r3, fp, r3
 80074f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007504:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007508:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800750c:	460b      	mov	r3, r1
 800750e:	18db      	adds	r3, r3, r3
 8007510:	643b      	str	r3, [r7, #64]	@ 0x40
 8007512:	4613      	mov	r3, r2
 8007514:	eb42 0303 	adc.w	r3, r2, r3
 8007518:	647b      	str	r3, [r7, #68]	@ 0x44
 800751a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800751e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007522:	f7f8 fe51 	bl	80001c8 <__aeabi_uldivmod>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	4611      	mov	r1, r2
 800752c:	4b3b      	ldr	r3, [pc, #236]	@ (800761c <UART_SetConfig+0x2d4>)
 800752e:	fba3 2301 	umull	r2, r3, r3, r1
 8007532:	095b      	lsrs	r3, r3, #5
 8007534:	2264      	movs	r2, #100	@ 0x64
 8007536:	fb02 f303 	mul.w	r3, r2, r3
 800753a:	1acb      	subs	r3, r1, r3
 800753c:	00db      	lsls	r3, r3, #3
 800753e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007542:	4b36      	ldr	r3, [pc, #216]	@ (800761c <UART_SetConfig+0x2d4>)
 8007544:	fba3 2302 	umull	r2, r3, r3, r2
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007550:	441c      	add	r4, r3
 8007552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007556:	2200      	movs	r2, #0
 8007558:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800755c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007560:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007564:	4642      	mov	r2, r8
 8007566:	464b      	mov	r3, r9
 8007568:	1891      	adds	r1, r2, r2
 800756a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800756c:	415b      	adcs	r3, r3
 800756e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007570:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007574:	4641      	mov	r1, r8
 8007576:	1851      	adds	r1, r2, r1
 8007578:	6339      	str	r1, [r7, #48]	@ 0x30
 800757a:	4649      	mov	r1, r9
 800757c:	414b      	adcs	r3, r1
 800757e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007580:	f04f 0200 	mov.w	r2, #0
 8007584:	f04f 0300 	mov.w	r3, #0
 8007588:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800758c:	4659      	mov	r1, fp
 800758e:	00cb      	lsls	r3, r1, #3
 8007590:	4651      	mov	r1, sl
 8007592:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007596:	4651      	mov	r1, sl
 8007598:	00ca      	lsls	r2, r1, #3
 800759a:	4610      	mov	r0, r2
 800759c:	4619      	mov	r1, r3
 800759e:	4603      	mov	r3, r0
 80075a0:	4642      	mov	r2, r8
 80075a2:	189b      	adds	r3, r3, r2
 80075a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80075a8:	464b      	mov	r3, r9
 80075aa:	460a      	mov	r2, r1
 80075ac:	eb42 0303 	adc.w	r3, r2, r3
 80075b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80075c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80075c8:	460b      	mov	r3, r1
 80075ca:	18db      	adds	r3, r3, r3
 80075cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075ce:	4613      	mov	r3, r2
 80075d0:	eb42 0303 	adc.w	r3, r2, r3
 80075d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80075da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80075de:	f7f8 fdf3 	bl	80001c8 <__aeabi_uldivmod>
 80075e2:	4602      	mov	r2, r0
 80075e4:	460b      	mov	r3, r1
 80075e6:	4b0d      	ldr	r3, [pc, #52]	@ (800761c <UART_SetConfig+0x2d4>)
 80075e8:	fba3 1302 	umull	r1, r3, r3, r2
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	2164      	movs	r1, #100	@ 0x64
 80075f0:	fb01 f303 	mul.w	r3, r1, r3
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	00db      	lsls	r3, r3, #3
 80075f8:	3332      	adds	r3, #50	@ 0x32
 80075fa:	4a08      	ldr	r2, [pc, #32]	@ (800761c <UART_SetConfig+0x2d4>)
 80075fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007600:	095b      	lsrs	r3, r3, #5
 8007602:	f003 0207 	and.w	r2, r3, #7
 8007606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4422      	add	r2, r4
 800760e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007610:	e106      	b.n	8007820 <UART_SetConfig+0x4d8>
 8007612:	bf00      	nop
 8007614:	40011000 	.word	0x40011000
 8007618:	40011400 	.word	0x40011400
 800761c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007624:	2200      	movs	r2, #0
 8007626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800762a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800762e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007632:	4642      	mov	r2, r8
 8007634:	464b      	mov	r3, r9
 8007636:	1891      	adds	r1, r2, r2
 8007638:	6239      	str	r1, [r7, #32]
 800763a:	415b      	adcs	r3, r3
 800763c:	627b      	str	r3, [r7, #36]	@ 0x24
 800763e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007642:	4641      	mov	r1, r8
 8007644:	1854      	adds	r4, r2, r1
 8007646:	4649      	mov	r1, r9
 8007648:	eb43 0501 	adc.w	r5, r3, r1
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	00eb      	lsls	r3, r5, #3
 8007656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800765a:	00e2      	lsls	r2, r4, #3
 800765c:	4614      	mov	r4, r2
 800765e:	461d      	mov	r5, r3
 8007660:	4643      	mov	r3, r8
 8007662:	18e3      	adds	r3, r4, r3
 8007664:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007668:	464b      	mov	r3, r9
 800766a:	eb45 0303 	adc.w	r3, r5, r3
 800766e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800767e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007682:	f04f 0200 	mov.w	r2, #0
 8007686:	f04f 0300 	mov.w	r3, #0
 800768a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800768e:	4629      	mov	r1, r5
 8007690:	008b      	lsls	r3, r1, #2
 8007692:	4621      	mov	r1, r4
 8007694:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007698:	4621      	mov	r1, r4
 800769a:	008a      	lsls	r2, r1, #2
 800769c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80076a0:	f7f8 fd92 	bl	80001c8 <__aeabi_uldivmod>
 80076a4:	4602      	mov	r2, r0
 80076a6:	460b      	mov	r3, r1
 80076a8:	4b60      	ldr	r3, [pc, #384]	@ (800782c <UART_SetConfig+0x4e4>)
 80076aa:	fba3 2302 	umull	r2, r3, r3, r2
 80076ae:	095b      	lsrs	r3, r3, #5
 80076b0:	011c      	lsls	r4, r3, #4
 80076b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076b6:	2200      	movs	r2, #0
 80076b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80076c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80076c4:	4642      	mov	r2, r8
 80076c6:	464b      	mov	r3, r9
 80076c8:	1891      	adds	r1, r2, r2
 80076ca:	61b9      	str	r1, [r7, #24]
 80076cc:	415b      	adcs	r3, r3
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076d4:	4641      	mov	r1, r8
 80076d6:	1851      	adds	r1, r2, r1
 80076d8:	6139      	str	r1, [r7, #16]
 80076da:	4649      	mov	r1, r9
 80076dc:	414b      	adcs	r3, r1
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	f04f 0200 	mov.w	r2, #0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076ec:	4659      	mov	r1, fp
 80076ee:	00cb      	lsls	r3, r1, #3
 80076f0:	4651      	mov	r1, sl
 80076f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076f6:	4651      	mov	r1, sl
 80076f8:	00ca      	lsls	r2, r1, #3
 80076fa:	4610      	mov	r0, r2
 80076fc:	4619      	mov	r1, r3
 80076fe:	4603      	mov	r3, r0
 8007700:	4642      	mov	r2, r8
 8007702:	189b      	adds	r3, r3, r2
 8007704:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007708:	464b      	mov	r3, r9
 800770a:	460a      	mov	r2, r1
 800770c:	eb42 0303 	adc.w	r3, r2, r3
 8007710:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800771e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007720:	f04f 0200 	mov.w	r2, #0
 8007724:	f04f 0300 	mov.w	r3, #0
 8007728:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800772c:	4649      	mov	r1, r9
 800772e:	008b      	lsls	r3, r1, #2
 8007730:	4641      	mov	r1, r8
 8007732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007736:	4641      	mov	r1, r8
 8007738:	008a      	lsls	r2, r1, #2
 800773a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800773e:	f7f8 fd43 	bl	80001c8 <__aeabi_uldivmod>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4611      	mov	r1, r2
 8007748:	4b38      	ldr	r3, [pc, #224]	@ (800782c <UART_SetConfig+0x4e4>)
 800774a:	fba3 2301 	umull	r2, r3, r3, r1
 800774e:	095b      	lsrs	r3, r3, #5
 8007750:	2264      	movs	r2, #100	@ 0x64
 8007752:	fb02 f303 	mul.w	r3, r2, r3
 8007756:	1acb      	subs	r3, r1, r3
 8007758:	011b      	lsls	r3, r3, #4
 800775a:	3332      	adds	r3, #50	@ 0x32
 800775c:	4a33      	ldr	r2, [pc, #204]	@ (800782c <UART_SetConfig+0x4e4>)
 800775e:	fba2 2303 	umull	r2, r3, r2, r3
 8007762:	095b      	lsrs	r3, r3, #5
 8007764:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007768:	441c      	add	r4, r3
 800776a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800776e:	2200      	movs	r2, #0
 8007770:	673b      	str	r3, [r7, #112]	@ 0x70
 8007772:	677a      	str	r2, [r7, #116]	@ 0x74
 8007774:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007778:	4642      	mov	r2, r8
 800777a:	464b      	mov	r3, r9
 800777c:	1891      	adds	r1, r2, r2
 800777e:	60b9      	str	r1, [r7, #8]
 8007780:	415b      	adcs	r3, r3
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007788:	4641      	mov	r1, r8
 800778a:	1851      	adds	r1, r2, r1
 800778c:	6039      	str	r1, [r7, #0]
 800778e:	4649      	mov	r1, r9
 8007790:	414b      	adcs	r3, r1
 8007792:	607b      	str	r3, [r7, #4]
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	f04f 0300 	mov.w	r3, #0
 800779c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80077a0:	4659      	mov	r1, fp
 80077a2:	00cb      	lsls	r3, r1, #3
 80077a4:	4651      	mov	r1, sl
 80077a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077aa:	4651      	mov	r1, sl
 80077ac:	00ca      	lsls	r2, r1, #3
 80077ae:	4610      	mov	r0, r2
 80077b0:	4619      	mov	r1, r3
 80077b2:	4603      	mov	r3, r0
 80077b4:	4642      	mov	r2, r8
 80077b6:	189b      	adds	r3, r3, r2
 80077b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077ba:	464b      	mov	r3, r9
 80077bc:	460a      	mov	r2, r1
 80077be:	eb42 0303 	adc.w	r3, r2, r3
 80077c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80077ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	f04f 0300 	mov.w	r3, #0
 80077d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80077dc:	4649      	mov	r1, r9
 80077de:	008b      	lsls	r3, r1, #2
 80077e0:	4641      	mov	r1, r8
 80077e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077e6:	4641      	mov	r1, r8
 80077e8:	008a      	lsls	r2, r1, #2
 80077ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80077ee:	f7f8 fceb 	bl	80001c8 <__aeabi_uldivmod>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4b0d      	ldr	r3, [pc, #52]	@ (800782c <UART_SetConfig+0x4e4>)
 80077f8:	fba3 1302 	umull	r1, r3, r3, r2
 80077fc:	095b      	lsrs	r3, r3, #5
 80077fe:	2164      	movs	r1, #100	@ 0x64
 8007800:	fb01 f303 	mul.w	r3, r1, r3
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	011b      	lsls	r3, r3, #4
 8007808:	3332      	adds	r3, #50	@ 0x32
 800780a:	4a08      	ldr	r2, [pc, #32]	@ (800782c <UART_SetConfig+0x4e4>)
 800780c:	fba2 2303 	umull	r2, r3, r2, r3
 8007810:	095b      	lsrs	r3, r3, #5
 8007812:	f003 020f 	and.w	r2, r3, #15
 8007816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4422      	add	r2, r4
 800781e:	609a      	str	r2, [r3, #8]
}
 8007820:	bf00      	nop
 8007822:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007826:	46bd      	mov	sp, r7
 8007828:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800782c:	51eb851f 	.word	0x51eb851f

08007830 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	6812      	ldr	r2, [r2, #0]
 8007848:	f023 0101 	bic.w	r1, r3, #1
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	2b08      	cmp	r3, #8
 8007858:	d102      	bne.n	8007860 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800785a:	2340      	movs	r3, #64	@ 0x40
 800785c:	617b      	str	r3, [r7, #20]
 800785e:	e001      	b.n	8007864 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007860:	2300      	movs	r3, #0
 8007862:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007870:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007876:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800787c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007882:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007888:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800788e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8007894:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800789a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80078a0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80078a6:	4313      	orrs	r3, r2
 80078a8:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078b8:	693a      	ldr	r2, [r7, #16]
 80078ba:	4313      	orrs	r3, r2
 80078bc:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80078be:	4b10      	ldr	r3, [pc, #64]	@ (8007900 <FSMC_NORSRAM_Init+0xd0>)
 80078c0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80078c8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80078d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	43db      	mvns	r3, r3
 80078e0:	ea02 0103 	and.w	r1, r2, r3
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	4319      	orrs	r1, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	371c      	adds	r7, #28
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	0008fb7f 	.word	0x0008fb7f

08007904 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800791a:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	431a      	orrs	r2, r3
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	021b      	lsls	r3, r3, #8
 8007930:	431a      	orrs	r2, r3
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	041b      	lsls	r3, r3, #16
 8007938:	431a      	orrs	r2, r3
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	3b01      	subs	r3, #1
 8007940:	051b      	lsls	r3, r3, #20
 8007942:	431a      	orrs	r2, r3
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	695b      	ldr	r3, [r3, #20]
 8007948:	3b02      	subs	r3, #2
 800794a:	061b      	lsls	r3, r3, #24
 800794c:	431a      	orrs	r2, r3
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	4313      	orrs	r3, r2
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	3201      	adds	r2, #1
 8007958:	4319      	orrs	r1, r3
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3714      	adds	r7, #20
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
	...

08007970 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007984:	d11d      	bne.n	80079c2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800798e:	4b13      	ldr	r3, [pc, #76]	@ (80079dc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007990:	4013      	ands	r3, r2
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	6811      	ldr	r1, [r2, #0]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	6852      	ldr	r2, [r2, #4]
 800799a:	0112      	lsls	r2, r2, #4
 800799c:	4311      	orrs	r1, r2
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	6892      	ldr	r2, [r2, #8]
 80079a2:	0212      	lsls	r2, r2, #8
 80079a4:	4311      	orrs	r1, r2
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	6992      	ldr	r2, [r2, #24]
 80079aa:	4311      	orrs	r1, r2
 80079ac:	68ba      	ldr	r2, [r7, #8]
 80079ae:	68d2      	ldr	r2, [r2, #12]
 80079b0:	0412      	lsls	r2, r2, #16
 80079b2:	430a      	orrs	r2, r1
 80079b4:	ea43 0102 	orr.w	r1, r3, r2
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80079c0:	e005      	b.n	80079ce <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	687a      	ldr	r2, [r7, #4]
 80079c6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80079ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80079ce:	2300      	movs	r3, #0
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3714      	adds	r7, #20
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	cff00000 	.word	0xcff00000

080079e0 <memset>:
 80079e0:	4402      	add	r2, r0
 80079e2:	4603      	mov	r3, r0
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d100      	bne.n	80079ea <memset+0xa>
 80079e8:	4770      	bx	lr
 80079ea:	f803 1b01 	strb.w	r1, [r3], #1
 80079ee:	e7f9      	b.n	80079e4 <memset+0x4>

080079f0 <__libc_init_array>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	4d0d      	ldr	r5, [pc, #52]	@ (8007a28 <__libc_init_array+0x38>)
 80079f4:	4c0d      	ldr	r4, [pc, #52]	@ (8007a2c <__libc_init_array+0x3c>)
 80079f6:	1b64      	subs	r4, r4, r5
 80079f8:	10a4      	asrs	r4, r4, #2
 80079fa:	2600      	movs	r6, #0
 80079fc:	42a6      	cmp	r6, r4
 80079fe:	d109      	bne.n	8007a14 <__libc_init_array+0x24>
 8007a00:	4d0b      	ldr	r5, [pc, #44]	@ (8007a30 <__libc_init_array+0x40>)
 8007a02:	4c0c      	ldr	r4, [pc, #48]	@ (8007a34 <__libc_init_array+0x44>)
 8007a04:	f000 f818 	bl	8007a38 <_init>
 8007a08:	1b64      	subs	r4, r4, r5
 8007a0a:	10a4      	asrs	r4, r4, #2
 8007a0c:	2600      	movs	r6, #0
 8007a0e:	42a6      	cmp	r6, r4
 8007a10:	d105      	bne.n	8007a1e <__libc_init_array+0x2e>
 8007a12:	bd70      	pop	{r4, r5, r6, pc}
 8007a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a18:	4798      	blx	r3
 8007a1a:	3601      	adds	r6, #1
 8007a1c:	e7ee      	b.n	80079fc <__libc_init_array+0xc>
 8007a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a22:	4798      	blx	r3
 8007a24:	3601      	adds	r6, #1
 8007a26:	e7f2      	b.n	8007a0e <__libc_init_array+0x1e>
 8007a28:	0800aa90 	.word	0x0800aa90
 8007a2c:	0800aa90 	.word	0x0800aa90
 8007a30:	0800aa90 	.word	0x0800aa90
 8007a34:	0800aa94 	.word	0x0800aa94

08007a38 <_init>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	bf00      	nop
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr

08007a44 <_fini>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	bf00      	nop
 8007a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4a:	bc08      	pop	{r3}
 8007a4c:	469e      	mov	lr, r3
 8007a4e:	4770      	bx	lr
