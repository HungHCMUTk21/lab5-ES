
lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008418  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003088  080085a8  080085a8  000095a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b630  0800b630  0000d064  2**0
                  CONTENTS
  4 .ARM          00000008  0800b630  0800b630  0000c630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b638  0800b638  0000d064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b638  0800b638  0000c638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b63c  0800b63c  0000c63c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800b640  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d064  2**0
                  CONTENTS
 10 .bss          000003b8  20000064  20000064  0000d064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000041c  2000041c  0000d064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017658  00000000  00000000  0000d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cee  00000000  00000000  000246ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001570  00000000  00000000  000283e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a6  00000000  00000000  00029950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000244e4  00000000  00000000  0002a9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d3bf  00000000  00000000  0004eeda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b69  00000000  00000000  0006c299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013fe02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d7c  00000000  00000000  0013fe48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00145bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008590 	.word	0x08008590

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08008590 	.word	0x08008590

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <button_init>:
#include "button.h"

uint16_t button_count[16];
uint16_t spi_button = 0x0000;

void button_init(){
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000564:	2201      	movs	r2, #1
 8000566:	2108      	movs	r1, #8
 8000568:	4802      	ldr	r0, [pc, #8]	@ (8000574 <button_init+0x14>)
 800056a:	f003 f9af 	bl	80038cc <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40020c00 	.word	0x40020c00

08000578 <button_Scan>:

void button_Scan(){
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2108      	movs	r1, #8
 8000582:	482f      	ldr	r0, [pc, #188]	@ (8000640 <button_Scan+0xc8>)
 8000584:	f003 f9a2 	bl	80038cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000588:	2201      	movs	r2, #1
 800058a:	2108      	movs	r1, #8
 800058c:	482c      	ldr	r0, [pc, #176]	@ (8000640 <button_Scan+0xc8>)
 800058e:	f003 f99d 	bl	80038cc <HAL_GPIO_WritePin>
	  HAL_SPI_Receive(&hspi1, (void*)&spi_button, 2, 10);
 8000592:	230a      	movs	r3, #10
 8000594:	2202      	movs	r2, #2
 8000596:	492b      	ldr	r1, [pc, #172]	@ (8000644 <button_Scan+0xcc>)
 8000598:	482b      	ldr	r0, [pc, #172]	@ (8000648 <button_Scan+0xd0>)
 800059a:	f005 f968 	bl	800586e <HAL_SPI_Receive>
	  int button_index = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
	  uint16_t mask = 0x8000;
 80005a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005a6:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 80005a8:	2300      	movs	r3, #0
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	e03f      	b.n	800062e <button_Scan+0xb6>
		  if(i >= 0 && i <= 3){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db06      	blt.n	80005c2 <button_Scan+0x4a>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b03      	cmp	r3, #3
 80005b8:	dc03      	bgt.n	80005c2 <button_Scan+0x4a>
			  button_index = i + 4; // do theo schematic thì spi gửi ko giống như button trên mạch
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	3304      	adds	r3, #4
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	e018      	b.n	80005f4 <button_Scan+0x7c>
		  } else if (i >= 4 && i <= 7){  //-> cần convert lại cho nó đúng với thứ tự mình mún
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b03      	cmp	r3, #3
 80005c6:	dd07      	ble.n	80005d8 <button_Scan+0x60>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b07      	cmp	r3, #7
 80005cc:	dc04      	bgt.n	80005d8 <button_Scan+0x60>
			  button_index = 7 - i;
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	f1c3 0307 	rsb	r3, r3, #7
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e00d      	b.n	80005f4 <button_Scan+0x7c>
		  } else if (i >= 8 && i <= 11){
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b07      	cmp	r3, #7
 80005dc:	dd06      	ble.n	80005ec <button_Scan+0x74>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b0b      	cmp	r3, #11
 80005e2:	dc03      	bgt.n	80005ec <button_Scan+0x74>
			  button_index = i + 4;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3304      	adds	r3, #4
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e003      	b.n	80005f4 <button_Scan+0x7c>
		  } else {
			  button_index = 23 - i;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f1c3 0317 	rsb	r3, r3, #23
 80005f2:	60fb      	str	r3, [r7, #12]
		  }
		  if(spi_button & mask) button_count[button_index] = 0;
 80005f4:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <button_Scan+0xcc>)
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	897b      	ldrh	r3, [r7, #10]
 80005fa:	4013      	ands	r3, r2
 80005fc:	b29b      	uxth	r3, r3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d005      	beq.n	800060e <button_Scan+0x96>
 8000602:	4a12      	ldr	r2, [pc, #72]	@ (800064c <button_Scan+0xd4>)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2100      	movs	r1, #0
 8000608:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800060c:	e009      	b.n	8000622 <button_Scan+0xaa>
		  else button_count[button_index]++;
 800060e:	4a0f      	ldr	r2, [pc, #60]	@ (800064c <button_Scan+0xd4>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000616:	3301      	adds	r3, #1
 8000618:	b299      	uxth	r1, r3
 800061a:	4a0c      	ldr	r2, [pc, #48]	@ (800064c <button_Scan+0xd4>)
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
//		  if(spi_button & mask) button_count[i] = 0;
//		  else button_count[i]++;
		  mask = mask >> 1;
 8000622:	897b      	ldrh	r3, [r7, #10]
 8000624:	085b      	lsrs	r3, r3, #1
 8000626:	817b      	strh	r3, [r7, #10]
	  for(int i = 0; i < 16; i++){
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3301      	adds	r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	ddbc      	ble.n	80005ae <button_Scan+0x36>
	  }
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40020c00 	.word	0x40020c00
 8000644:	200000a0 	.word	0x200000a0
 8000648:	2000017c 	.word	0x2000017c
 800064c:	20000080 	.word	0x20000080

08000650 <ds3231_init>:
uint8_t ds3231_date;
uint8_t ds3231_day;
uint8_t ds3231_month;
uint8_t ds3231_year;

void ds3231_init(){
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
	ds3231_buffer[0] = DEC2BCD(0); //second
 8000654:	2000      	movs	r0, #0
 8000656:	f002 fd15 	bl	8003084 <DEC2BCD>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	4b1c      	ldr	r3, [pc, #112]	@ (80006d0 <ds3231_init+0x80>)
 8000660:	701a      	strb	r2, [r3, #0]
	ds3231_buffer[1] = DEC2BCD(10); //minute
 8000662:	200a      	movs	r0, #10
 8000664:	f002 fd0e 	bl	8003084 <DEC2BCD>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <ds3231_init+0x80>)
 800066e:	705a      	strb	r2, [r3, #1]
	ds3231_buffer[2] = DEC2BCD(9); //hour
 8000670:	2009      	movs	r0, #9
 8000672:	f002 fd07 	bl	8003084 <DEC2BCD>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b15      	ldr	r3, [pc, #84]	@ (80006d0 <ds3231_init+0x80>)
 800067c:	709a      	strb	r2, [r3, #2]
	ds3231_buffer[3] = DEC2BCD(6);  //day
 800067e:	2006      	movs	r0, #6
 8000680:	f002 fd00 	bl	8003084 <DEC2BCD>
 8000684:	4603      	mov	r3, r0
 8000686:	461a      	mov	r2, r3
 8000688:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <ds3231_init+0x80>)
 800068a:	70da      	strb	r2, [r3, #3]
	ds3231_buffer[4] = DEC2BCD(29); //date
 800068c:	201d      	movs	r0, #29
 800068e:	f002 fcf9 	bl	8003084 <DEC2BCD>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	4b0e      	ldr	r3, [pc, #56]	@ (80006d0 <ds3231_init+0x80>)
 8000698:	711a      	strb	r2, [r3, #4]
	ds3231_buffer[5] = DEC2BCD(11);  //month
 800069a:	200b      	movs	r0, #11
 800069c:	f002 fcf2 	bl	8003084 <DEC2BCD>
 80006a0:	4603      	mov	r3, r0
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b0a      	ldr	r3, [pc, #40]	@ (80006d0 <ds3231_init+0x80>)
 80006a6:	715a      	strb	r2, [r3, #5]
	ds3231_buffer[6] = DEC2BCD(24); //year
 80006a8:	2018      	movs	r0, #24
 80006aa:	f002 fceb 	bl	8003084 <DEC2BCD>
 80006ae:	4603      	mov	r3, r0
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b07      	ldr	r3, [pc, #28]	@ (80006d0 <ds3231_init+0x80>)
 80006b4:	719a      	strb	r2, [r3, #6]
	if(HAL_I2C_IsDeviceReady(&hi2c1, DS3231_ADDRESS, 3, 50) != HAL_OK){
 80006b6:	2332      	movs	r3, #50	@ 0x32
 80006b8:	2203      	movs	r2, #3
 80006ba:	21d0      	movs	r1, #208	@ 0xd0
 80006bc:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <ds3231_init+0x84>)
 80006be:	f003 fd8f 	bl	80041e0 <HAL_I2C_IsDeviceReady>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <ds3231_init+0x7c>
		while(1);
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <ds3231_init+0x78>
	};
}
 80006cc:	bf00      	nop
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	200000a4 	.word	0x200000a4
 80006d4:	20000108 	.word	0x20000108

080006d8 <ds3231_Write>:

void ds3231_Write(uint8_t address, uint8_t value){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af04      	add	r7, sp, #16
 80006de:	4603      	mov	r3, r0
 80006e0:	460a      	mov	r2, r1
 80006e2:	71fb      	strb	r3, [r7, #7]
 80006e4:	4613      	mov	r3, r2
 80006e6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp = DEC2BCD(value);
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f002 fcca 	bl	8003084 <DEC2BCD>
 80006f0:	4603      	mov	r3, r0
 80006f2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, address, I2C_MEMADD_SIZE_8BIT, &temp, 1,10);
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	230a      	movs	r3, #10
 80006fa:	9302      	str	r3, [sp, #8]
 80006fc:	2301      	movs	r3, #1
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	f107 030f 	add.w	r3, r7, #15
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2301      	movs	r3, #1
 8000708:	21d0      	movs	r1, #208	@ 0xd0
 800070a:	4803      	ldr	r0, [pc, #12]	@ (8000718 <ds3231_Write+0x40>)
 800070c:	f003 fa3c 	bl	8003b88 <HAL_I2C_Mem_Write>
}
 8000710:	bf00      	nop
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000108 	.word	0x20000108

0800071c <ds3231_ReadTime>:

void ds3231_ReadTime(){
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, I2C_MEMADD_SIZE_8BIT, ds3231_buffer, 7, 10);
 8000722:	230a      	movs	r3, #10
 8000724:	9302      	str	r3, [sp, #8]
 8000726:	2307      	movs	r3, #7
 8000728:	9301      	str	r3, [sp, #4]
 800072a:	4b25      	ldr	r3, [pc, #148]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	2301      	movs	r3, #1
 8000730:	2200      	movs	r2, #0
 8000732:	21d0      	movs	r1, #208	@ 0xd0
 8000734:	4823      	ldr	r0, [pc, #140]	@ (80007c4 <ds3231_ReadTime+0xa8>)
 8000736:	f003 fb21 	bl	8003d7c <HAL_I2C_Mem_Read>
	ds3231_sec = BCD2DEC(ds3231_buffer[0]);
 800073a:	4b21      	ldr	r3, [pc, #132]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f002 fc86 	bl	8003050 <BCD2DEC>
 8000744:	4603      	mov	r3, r0
 8000746:	461a      	mov	r2, r3
 8000748:	4b1f      	ldr	r3, [pc, #124]	@ (80007c8 <ds3231_ReadTime+0xac>)
 800074a:	701a      	strb	r2, [r3, #0]
	ds3231_min = BCD2DEC(ds3231_buffer[1]);
 800074c:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	4618      	mov	r0, r3
 8000752:	f002 fc7d 	bl	8003050 <BCD2DEC>
 8000756:	4603      	mov	r3, r0
 8000758:	461a      	mov	r2, r3
 800075a:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <ds3231_ReadTime+0xb0>)
 800075c:	701a      	strb	r2, [r3, #0]
	ds3231_hours = BCD2DEC(ds3231_buffer[2]);
 800075e:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 8000760:	789b      	ldrb	r3, [r3, #2]
 8000762:	4618      	mov	r0, r3
 8000764:	f002 fc74 	bl	8003050 <BCD2DEC>
 8000768:	4603      	mov	r3, r0
 800076a:	461a      	mov	r2, r3
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <ds3231_ReadTime+0xb4>)
 800076e:	701a      	strb	r2, [r3, #0]
	ds3231_day = BCD2DEC(ds3231_buffer[3]);
 8000770:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 8000772:	78db      	ldrb	r3, [r3, #3]
 8000774:	4618      	mov	r0, r3
 8000776:	f002 fc6b 	bl	8003050 <BCD2DEC>
 800077a:	4603      	mov	r3, r0
 800077c:	461a      	mov	r2, r3
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <ds3231_ReadTime+0xb8>)
 8000780:	701a      	strb	r2, [r3, #0]
	ds3231_date = BCD2DEC(ds3231_buffer[4]);
 8000782:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	4618      	mov	r0, r3
 8000788:	f002 fc62 	bl	8003050 <BCD2DEC>
 800078c:	4603      	mov	r3, r0
 800078e:	461a      	mov	r2, r3
 8000790:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <ds3231_ReadTime+0xbc>)
 8000792:	701a      	strb	r2, [r3, #0]
	ds3231_month = BCD2DEC(ds3231_buffer[5]);
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 8000796:	795b      	ldrb	r3, [r3, #5]
 8000798:	4618      	mov	r0, r3
 800079a:	f002 fc59 	bl	8003050 <BCD2DEC>
 800079e:	4603      	mov	r3, r0
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <ds3231_ReadTime+0xc0>)
 80007a4:	701a      	strb	r2, [r3, #0]
	ds3231_year = BCD2DEC(ds3231_buffer[6]);
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <ds3231_ReadTime+0xa4>)
 80007a8:	799b      	ldrb	r3, [r3, #6]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fc50 	bl	8003050 <BCD2DEC>
 80007b0:	4603      	mov	r3, r0
 80007b2:	461a      	mov	r2, r3
 80007b4:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <ds3231_ReadTime+0xc4>)
 80007b6:	701a      	strb	r2, [r3, #0]
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000a4 	.word	0x200000a4
 80007c4:	20000108 	.word	0x20000108
 80007c8:	200000ad 	.word	0x200000ad
 80007cc:	200000ac 	.word	0x200000ac
 80007d0:	200000ab 	.word	0x200000ab
 80007d4:	200000af 	.word	0x200000af
 80007d8:	200000ae 	.word	0x200000ae
 80007dc:	200000b0 	.word	0x200000b0
 80007e0:	200000b1 	.word	0x200000b1

080007e4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08e      	sub	sp, #56	@ 0x38
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
 80007fa:	615a      	str	r2, [r3, #20]
 80007fc:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80007fe:	463b      	mov	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
 800080c:	615a      	str	r2, [r3, #20]
 800080e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000810:	4b2f      	ldr	r3, [pc, #188]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000812:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000816:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000818:	4b2d      	ldr	r3, [pc, #180]	@ (80008d0 <MX_FSMC_Init+0xec>)
 800081a:	4a2e      	ldr	r2, [pc, #184]	@ (80008d4 <MX_FSMC_Init+0xf0>)
 800081c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800081e:	4b2c      	ldr	r3, [pc, #176]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000824:	4b2a      	ldr	r3, [pc, #168]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800082a:	4b29      	ldr	r3, [pc, #164]	@ (80008d0 <MX_FSMC_Init+0xec>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000830:	4b27      	ldr	r3, [pc, #156]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000832:	2210      	movs	r2, #16
 8000834:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000836:	4b26      	ldr	r3, [pc, #152]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800083c:	4b24      	ldr	r3, [pc, #144]	@ (80008d0 <MX_FSMC_Init+0xec>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000842:	4b23      	ldr	r3, [pc, #140]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000848:	4b21      	ldr	r3, [pc, #132]	@ (80008d0 <MX_FSMC_Init+0xec>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800084e:	4b20      	ldr	r3, [pc, #128]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000850:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000854:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000856:	4b1e      	ldr	r3, [pc, #120]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000858:	2200      	movs	r2, #0
 800085a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800085c:	4b1c      	ldr	r3, [pc, #112]	@ (80008d0 <MX_FSMC_Init+0xec>)
 800085e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000862:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000864:	4b1a      	ldr	r3, [pc, #104]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000866:	2200      	movs	r2, #0
 8000868:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800086a:	4b19      	ldr	r3, [pc, #100]	@ (80008d0 <MX_FSMC_Init+0xec>)
 800086c:	2200      	movs	r2, #0
 800086e:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000870:	4b17      	ldr	r3, [pc, #92]	@ (80008d0 <MX_FSMC_Init+0xec>)
 8000872:	2200      	movs	r2, #0
 8000874:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000876:	230f      	movs	r3, #15
 8000878:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800087a:	230f      	movs	r3, #15
 800087c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800087e:	233c      	movs	r3, #60	@ 0x3c
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000886:	2310      	movs	r3, #16
 8000888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 800088a:	2311      	movs	r3, #17
 800088c:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800088e:	2300      	movs	r3, #0
 8000890:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8000892:	2308      	movs	r3, #8
 8000894:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000896:	230f      	movs	r3, #15
 8000898:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800089a:	2309      	movs	r3, #9
 800089c:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80008a2:	2310      	movs	r3, #16
 80008a4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80008a6:	2311      	movs	r3, #17
 80008a8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80008ae:	463a      	mov	r2, r7
 80008b0:	f107 031c 	add.w	r3, r7, #28
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	@ (80008d0 <MX_FSMC_Init+0xec>)
 80008b8:	f005 fbde 	bl	8006078 <HAL_SRAM_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80008c2:	f002 f8b5 	bl	8002a30 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80008c6:	bf00      	nop
 80008c8:	3738      	adds	r7, #56	@ 0x38
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000b4 	.word	0x200000b4
 80008d4:	a0000104 	.word	0xa0000104

080008d8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80008ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <HAL_FSMC_MspInit+0x88>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d131      	bne.n	8000958 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <HAL_FSMC_MspInit+0x88>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <HAL_FSMC_MspInit+0x8c>)
 8000900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000902:	4a18      	ldr	r2, [pc, #96]	@ (8000964 <HAL_FSMC_MspInit+0x8c>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6393      	str	r3, [r2, #56]	@ 0x38
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <HAL_FSMC_MspInit+0x8c>)
 800090c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000916:	f64f 7388 	movw	r3, #65416	@ 0xff88
 800091a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000928:	230c      	movs	r3, #12
 800092a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4619      	mov	r1, r3
 8000930:	480d      	ldr	r0, [pc, #52]	@ (8000968 <HAL_FSMC_MspInit+0x90>)
 8000932:	f002 fe2f 	bl	8003594 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000936:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 800093a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000944:	2303      	movs	r3, #3
 8000946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000948:	230c      	movs	r3, #12
 800094a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	4619      	mov	r1, r3
 8000950:	4806      	ldr	r0, [pc, #24]	@ (800096c <HAL_FSMC_MspInit+0x94>)
 8000952:	f002 fe1f 	bl	8003594 <HAL_GPIO_Init>
 8000956:	e000      	b.n	800095a <HAL_FSMC_MspInit+0x82>
    return;
 8000958:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000104 	.word	0x20000104
 8000964:	40023800 	.word	0x40023800
 8000968:	40021000 	.word	0x40021000
 800096c:	40020c00 	.word	0x40020c00

08000970 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000978:	f7ff ffae 	bl	80008d8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08c      	sub	sp, #48	@ 0x30
 8000988:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	4b6f      	ldr	r3, [pc, #444]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a6e      	ldr	r2, [pc, #440]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009a4:	f043 0310 	orr.w	r3, r3, #16
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b6c      	ldr	r3, [pc, #432]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0310 	and.w	r3, r3, #16
 80009b2:	61bb      	str	r3, [r7, #24]
 80009b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	4b68      	ldr	r3, [pc, #416]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a67      	ldr	r2, [pc, #412]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b65      	ldr	r3, [pc, #404]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	617b      	str	r3, [r7, #20]
 80009d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b61      	ldr	r3, [pc, #388]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	4a60      	ldr	r2, [pc, #384]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e2:	4b5e      	ldr	r3, [pc, #376]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b5a      	ldr	r3, [pc, #360]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a59      	ldr	r2, [pc, #356]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b57      	ldr	r3, [pc, #348]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	4b53      	ldr	r3, [pc, #332]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a12:	4a52      	ldr	r2, [pc, #328]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a14:	f043 0308 	orr.w	r3, r3, #8
 8000a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1a:	4b50      	ldr	r3, [pc, #320]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1e:	f003 0308 	and.w	r3, r3, #8
 8000a22:	60bb      	str	r3, [r7, #8]
 8000a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b4c      	ldr	r3, [pc, #304]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2e:	4a4b      	ldr	r2, [pc, #300]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a36:	4b49      	ldr	r3, [pc, #292]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b45      	ldr	r3, [pc, #276]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a44      	ldr	r2, [pc, #272]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b42      	ldr	r3, [pc, #264]	@ (8000b5c <MX_GPIO_Init+0x1d8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2170      	movs	r1, #112	@ 0x70
 8000a62:	483f      	ldr	r0, [pc, #252]	@ (8000b60 <MX_GPIO_Init+0x1dc>)
 8000a64:	f002 ff32 	bl	80038cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a6e:	483d      	ldr	r0, [pc, #244]	@ (8000b64 <MX_GPIO_Init+0x1e0>)
 8000a70:	f002 ff2c 	bl	80038cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	2140      	movs	r1, #64	@ 0x40
 8000a78:	483b      	ldr	r0, [pc, #236]	@ (8000b68 <MX_GPIO_Init+0x1e4>)
 8000a7a:	f002 ff27 	bl	80038cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a84:	4839      	ldr	r0, [pc, #228]	@ (8000b6c <MX_GPIO_Init+0x1e8>)
 8000a86:	f002 ff21 	bl	80038cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	4838      	ldr	r0, [pc, #224]	@ (8000b70 <MX_GPIO_Init+0x1ec>)
 8000a90:	f002 ff1c 	bl	80038cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000a94:	2370      	movs	r3, #112	@ 0x70
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa4:	f107 031c 	add.w	r3, r7, #28
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	482d      	ldr	r0, [pc, #180]	@ (8000b60 <MX_GPIO_Init+0x1dc>)
 8000aac:	f002 fd72 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8000ab0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4826      	ldr	r0, [pc, #152]	@ (8000b64 <MX_GPIO_Init+0x1e0>)
 8000aca:	f002 fd63 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000ace:	23c0      	movs	r3, #192	@ 0xc0
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 031c 	add.w	r3, r7, #28
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4822      	ldr	r0, [pc, #136]	@ (8000b6c <MX_GPIO_Init+0x1e8>)
 8000ae2:	f002 fd57 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000ae6:	2330      	movs	r3, #48	@ 0x30
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	481a      	ldr	r0, [pc, #104]	@ (8000b64 <MX_GPIO_Init+0x1e0>)
 8000afa:	f002 fd4b 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8000afe:	2340      	movs	r3, #64	@ 0x40
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4814      	ldr	r0, [pc, #80]	@ (8000b68 <MX_GPIO_Init+0x1e4>)
 8000b16:	f002 fd3d 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000b1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	480e      	ldr	r0, [pc, #56]	@ (8000b6c <MX_GPIO_Init+0x1e8>)
 8000b34:	f002 fd2e 	bl	8003594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000b38:	2308      	movs	r3, #8
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4808      	ldr	r0, [pc, #32]	@ (8000b70 <MX_GPIO_Init+0x1ec>)
 8000b50:	f002 fd20 	bl	8003594 <HAL_GPIO_Init>

}
 8000b54:	bf00      	nop
 8000b56:	3730      	adds	r7, #48	@ 0x30
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40021800 	.word	0x40021800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	40020c00 	.word	0x40020c00

08000b74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b78:	4b12      	ldr	r3, [pc, #72]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000b7a:	4a13      	ldr	r2, [pc, #76]	@ (8000bc8 <MX_I2C1_Init+0x54>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000b80:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <MX_I2C1_Init+0x58>)
 8000b82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000b92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b98:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ba4:	4b07      	ldr	r3, [pc, #28]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bb0:	4804      	ldr	r0, [pc, #16]	@ (8000bc4 <MX_I2C1_Init+0x50>)
 8000bb2:	f002 fea5 	bl	8003900 <HAL_I2C_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bbc:	f001 ff38 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000108 	.word	0x20000108
 8000bc8:	40005400 	.word	0x40005400
 8000bcc:	000186a0 	.word	0x000186a0

08000bd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b08a      	sub	sp, #40	@ 0x28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a19      	ldr	r2, [pc, #100]	@ (8000c54 <HAL_I2C_MspInit+0x84>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12b      	bne.n	8000c4a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	4b18      	ldr	r3, [pc, #96]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a17      	ldr	r2, [pc, #92]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b15      	ldr	r3, [pc, #84]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	613b      	str	r3, [r7, #16]
 8000c0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c0e:	23c0      	movs	r3, #192	@ 0xc0
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c12:	2312      	movs	r3, #18
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c1e:	2304      	movs	r3, #4
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <HAL_I2C_MspInit+0x8c>)
 8000c2a:	f002 fcb3 	bl	8003594 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b09      	ldr	r3, [pc, #36]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_I2C_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3728      	adds	r7, #40	@ 0x28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40005400 	.word	0x40005400
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020400 	.word	0x40020400

08000c60 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg) //
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <LCD_WR_REG+0x1c>)
 8000c6c:	88fb      	ldrh	r3, [r7, #6]
 8000c6e:	8013      	strh	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	600ffffe 	.word	0x600ffffe

08000c80 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	@ (8000c9c <LCD_WR_DATA+0x1c>)
 8000c8c:	88fb      	ldrh	r3, [r7, #6]
 8000c8e:	8053      	strh	r3, [r2, #2]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	600ffffe 	.word	0x600ffffe

08000ca0 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000ca6:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <LCD_RD_DATA+0x20>)
 8000ca8:	885b      	ldrh	r3, [r3, #2]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	b29b      	uxth	r3, r3
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	600ffffe 	.word	0x600ffffe

08000cc4 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4604      	mov	r4, r0
 8000ccc:	4608      	mov	r0, r1
 8000cce:	4611      	mov	r1, r2
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	80fb      	strh	r3, [r7, #6]
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80bb      	strh	r3, [r7, #4]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	807b      	strh	r3, [r7, #2]
 8000cde:	4613      	mov	r3, r2
 8000ce0:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000ce2:	202a      	movs	r0, #42	@ 0x2a
 8000ce4:	f7ff ffbc 	bl	8000c60 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	0a1b      	lsrs	r3, r3, #8
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ffc6 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ffc0 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000d00:	887b      	ldrh	r3, [r7, #2]
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ffba 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000d0c:	887b      	ldrh	r3, [r7, #2]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ffb4 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000d18:	202b      	movs	r0, #43	@ 0x2b
 8000d1a:	f7ff ffa1 	bl	8000c60 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000d1e:	88bb      	ldrh	r3, [r7, #4]
 8000d20:	0a1b      	lsrs	r3, r3, #8
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ffab 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000d2a:	88bb      	ldrh	r3, [r7, #4]
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ffa5 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000d36:	883b      	ldrh	r3, [r7, #0]
 8000d38:	0a1b      	lsrs	r3, r3, #8
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff9f 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000d42:	883b      	ldrh	r3, [r7, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff99 	bl	8000c80 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000d4e:	202c      	movs	r0, #44	@ 0x2c
 8000d50:	f7ff ff86 	bl	8000c60 <LCD_WR_REG>
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd90      	pop	{r4, r7, pc}

08000d5c <lcd_Clear>:
	return (((r>>11)<<11)|((g>>10)<<5)|(b>>11));
}


void lcd_Clear(uint16_t color) //
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	uint8_t buffer[2];
	buffer[0] = color >> 8;
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	723b      	strb	r3, [r7, #8]
	buffer[1] = color;
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	727b      	strb	r3, [r7, #9]
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 8000d76:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <lcd_Clear+0x70>)
 8000d78:	881b      	ldrh	r3, [r3, #0]
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <lcd_Clear+0x70>)
 8000d80:	885b      	ldrh	r3, [r3, #2]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	2000      	movs	r0, #0
 8000d8a:	f7ff ff9b 	bl	8000cc4 <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 8000d8e:	2300      	movs	r3, #0
 8000d90:	81fb      	strh	r3, [r7, #14]
 8000d92:	e011      	b.n	8000db8 <lcd_Clear+0x5c>
	{
		for(j=0;j<lcddev.height;j++)
 8000d94:	2300      	movs	r3, #0
 8000d96:	81bb      	strh	r3, [r7, #12]
 8000d98:	e006      	b.n	8000da8 <lcd_Clear+0x4c>
		{
			LCD_WR_DATA(color);
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ff6f 	bl	8000c80 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 8000da2:	89bb      	ldrh	r3, [r7, #12]
 8000da4:	3301      	adds	r3, #1
 8000da6:	81bb      	strh	r3, [r7, #12]
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <lcd_Clear+0x70>)
 8000daa:	885b      	ldrh	r3, [r3, #2]
 8000dac:	89ba      	ldrh	r2, [r7, #12]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d3f3      	bcc.n	8000d9a <lcd_Clear+0x3e>
	for(i=0;i<lcddev.width;i++)
 8000db2:	89fb      	ldrh	r3, [r7, #14]
 8000db4:	3301      	adds	r3, #1
 8000db6:	81fb      	strh	r3, [r7, #14]
 8000db8:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <lcd_Clear+0x70>)
 8000dba:	881b      	ldrh	r3, [r3, #0]
 8000dbc:	89fa      	ldrh	r2, [r7, #14]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d3e8      	bcc.n	8000d94 <lcd_Clear+0x38>
//			sram_WriteBuffer(&buffer, (i*lcddev.width+j)*4, 2);
		}
	}
}
 8000dc2:	bf00      	nop
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000015c 	.word	0x2000015c

08000dd0 <lcd_Fill>:

void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	4608      	mov	r0, r1
 8000dda:	4611      	mov	r1, r2
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4623      	mov	r3, r4
 8000de0:	80fb      	strh	r3, [r7, #6]
 8000de2:	4603      	mov	r3, r0
 8000de4:	80bb      	strh	r3, [r7, #4]
 8000de6:	460b      	mov	r3, r1
 8000de8:	807b      	strh	r3, [r7, #2]
 8000dea:	4613      	mov	r3, r2
 8000dec:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8000dee:	887b      	ldrh	r3, [r7, #2]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	883b      	ldrh	r3, [r7, #0]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	88b9      	ldrh	r1, [r7, #4]
 8000dfc:	88f8      	ldrh	r0, [r7, #6]
 8000dfe:	f7ff ff61 	bl	8000cc4 <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 8000e02:	88bb      	ldrh	r3, [r7, #4]
 8000e04:	81fb      	strh	r3, [r7, #14]
 8000e06:	e010      	b.n	8000e2a <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	81bb      	strh	r3, [r7, #12]
 8000e0c:	e006      	b.n	8000e1c <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8000e0e:	8c3b      	ldrh	r3, [r7, #32]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff35 	bl	8000c80 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 8000e16:	89bb      	ldrh	r3, [r7, #12]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	81bb      	strh	r3, [r7, #12]
 8000e1c:	89ba      	ldrh	r2, [r7, #12]
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d3f4      	bcc.n	8000e0e <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 8000e24:	89fb      	ldrh	r3, [r7, #14]
 8000e26:	3301      	adds	r3, #1
 8000e28:	81fb      	strh	r3, [r7, #14]
 8000e2a:	89fa      	ldrh	r2, [r7, #14]
 8000e2c:	883b      	ldrh	r3, [r7, #0]
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d3ea      	bcc.n	8000e08 <lcd_Fill+0x38>
		}
	}
}
 8000e32:	bf00      	nop
 8000e34:	bf00      	nop
 8000e36:	3714      	adds	r7, #20
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd90      	pop	{r4, r7, pc}

08000e3c <lcd_DrawPoint>:

void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	80fb      	strh	r3, [r7, #6]
 8000e46:	460b      	mov	r3, r1
 8000e48:	80bb      	strh	r3, [r7, #4]
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000e4e:	88bb      	ldrh	r3, [r7, #4]
 8000e50:	88fa      	ldrh	r2, [r7, #6]
 8000e52:	88b9      	ldrh	r1, [r7, #4]
 8000e54:	88f8      	ldrh	r0, [r7, #6]
 8000e56:	f7ff ff35 	bl	8000cc4 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000e5a:	887b      	ldrh	r3, [r7, #2]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff0f 	bl	8000c80 <LCD_WR_DATA>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b087      	sub	sp, #28
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4604      	mov	r4, r0
 8000e74:	4608      	mov	r0, r1
 8000e76:	4611      	mov	r1, r2
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4623      	mov	r3, r4
 8000e7c:	80fb      	strh	r3, [r7, #6]
 8000e7e:	4603      	mov	r3, r0
 8000e80:	80bb      	strh	r3, [r7, #4]
 8000e82:	460b      	mov	r3, r1
 8000e84:	70fb      	strb	r3, [r7, #3]
 8000e86:	4613      	mov	r3, r2
 8000e88:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000e92:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000e96:	085b      	lsrs	r3, r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	08db      	lsrs	r3, r3, #3
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	bf14      	ite	ne
 8000eae:	2301      	movne	r3, #1
 8000eb0:	2300      	moveq	r3, #0
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	fb12 f303 	smulbb	r3, r2, r3
 8000ec2:	81bb      	strh	r3, [r7, #12]
	num=num-' ';
 8000ec4:	78fb      	ldrb	r3, [r7, #3]
 8000ec6:	3b20      	subs	r3, #32
 8000ec8:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	b29c      	uxth	r4, r3
 8000ed8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	88bb      	ldrh	r3, [r7, #4]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	88b9      	ldrh	r1, [r7, #4]
 8000eea:	88f8      	ldrh	r0, [r7, #6]
 8000eec:	4622      	mov	r2, r4
 8000eee:	f7ff fee9 	bl	8000cc4 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	827b      	strh	r3, [r7, #18]
 8000ef6:	e07a      	b.n	8000fee <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000ef8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000efc:	2b0c      	cmp	r3, #12
 8000efe:	d028      	beq.n	8000f52 <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[num][i];
 8000f00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f04:	2b10      	cmp	r3, #16
 8000f06:	d108      	bne.n	8000f1a <lcd_ShowChar+0xae>
 8000f08:	78fa      	ldrb	r2, [r7, #3]
 8000f0a:	8a7b      	ldrh	r3, [r7, #18]
 8000f0c:	493c      	ldr	r1, [pc, #240]	@ (8001000 <lcd_ShowChar+0x194>)
 8000f0e:	0112      	lsls	r2, r2, #4
 8000f10:	440a      	add	r2, r1
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	75fb      	strb	r3, [r7, #23]
 8000f18:	e01b      	b.n	8000f52 <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[num][i];
 8000f1a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f1e:	2b18      	cmp	r3, #24
 8000f20:	d10b      	bne.n	8000f3a <lcd_ShowChar+0xce>
 8000f22:	78fa      	ldrb	r2, [r7, #3]
 8000f24:	8a79      	ldrh	r1, [r7, #18]
 8000f26:	4837      	ldr	r0, [pc, #220]	@ (8001004 <lcd_ShowChar+0x198>)
 8000f28:	4613      	mov	r3, r2
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	4413      	add	r3, r2
 8000f2e:	011b      	lsls	r3, r3, #4
 8000f30:	4403      	add	r3, r0
 8000f32:	440b      	add	r3, r1
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	75fb      	strb	r3, [r7, #23]
 8000f38:	e00b      	b.n	8000f52 <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[num][i];
 8000f3a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f3e:	2b20      	cmp	r3, #32
 8000f40:	d15a      	bne.n	8000ff8 <lcd_ShowChar+0x18c>
 8000f42:	78fa      	ldrb	r2, [r7, #3]
 8000f44:	8a7b      	ldrh	r3, [r7, #18]
 8000f46:	4930      	ldr	r1, [pc, #192]	@ (8001008 <lcd_ShowChar+0x19c>)
 8000f48:	0192      	lsls	r2, r2, #6
 8000f4a:	440a      	add	r2, r1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000f52:	2300      	movs	r3, #0
 8000f54:	75bb      	strb	r3, [r7, #22]
 8000f56:	e044      	b.n	8000fe2 <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000f58:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d120      	bne.n	8000fa2 <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000f60:	7dfa      	ldrb	r2, [r7, #23]
 8000f62:	7dbb      	ldrb	r3, [r7, #22]
 8000f64:	fa42 f303 	asr.w	r3, r2, r3
 8000f68:	f003 0301 	and.w	r3, r3, #1
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d004      	beq.n	8000f7a <lcd_ShowChar+0x10e>
 8000f70:	883b      	ldrh	r3, [r7, #0]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fe84 	bl	8000c80 <LCD_WR_DATA>
 8000f78:	e003      	b.n	8000f82 <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000f7a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fe7f 	bl	8000c80 <LCD_WR_DATA>
				m++;
 8000f82:	7d7b      	ldrb	r3, [r7, #21]
 8000f84:	3301      	adds	r3, #1
 8000f86:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000f88:	7d7b      	ldrb	r3, [r7, #21]
 8000f8a:	7bfa      	ldrb	r2, [r7, #15]
 8000f8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f90:	fb01 f202 	mul.w	r2, r1, r2
 8000f94:	1a9b      	subs	r3, r3, r2
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d11f      	bne.n	8000fdc <lcd_ShowChar+0x170>
				{
					m=0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	757b      	strb	r3, [r7, #21]
					break;
 8000fa0:	e022      	b.n	8000fe8 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000fa2:	7dfa      	ldrb	r2, [r7, #23]
 8000fa4:	7dbb      	ldrb	r3, [r7, #22]
 8000fa6:	fa42 f303 	asr.w	r3, r2, r3
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d005      	beq.n	8000fbe <lcd_ShowChar+0x152>
 8000fb2:	883a      	ldrh	r2, [r7, #0]
 8000fb4:	88b9      	ldrh	r1, [r7, #4]
 8000fb6:	88fb      	ldrh	r3, [r7, #6]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ff3f 	bl	8000e3c <lcd_DrawPoint>
				x++;
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000fc4:	88fa      	ldrh	r2, [r7, #6]
 8000fc6:	8a3b      	ldrh	r3, [r7, #16]
 8000fc8:	1ad2      	subs	r2, r2, r3
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d105      	bne.n	8000fdc <lcd_ShowChar+0x170>
				{
					x=x0;
 8000fd0:	8a3b      	ldrh	r3, [r7, #16]
 8000fd2:	80fb      	strh	r3, [r7, #6]
					y++;
 8000fd4:	88bb      	ldrh	r3, [r7, #4]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	80bb      	strh	r3, [r7, #4]
					break;
 8000fda:	e005      	b.n	8000fe8 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000fdc:	7dbb      	ldrb	r3, [r7, #22]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	75bb      	strb	r3, [r7, #22]
 8000fe2:	7dbb      	ldrb	r3, [r7, #22]
 8000fe4:	2b07      	cmp	r3, #7
 8000fe6:	d9b7      	bls.n	8000f58 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000fe8:	8a7b      	ldrh	r3, [r7, #18]
 8000fea:	3301      	adds	r3, #1
 8000fec:	827b      	strh	r3, [r7, #18]
 8000fee:	8a7a      	ldrh	r2, [r7, #18]
 8000ff0:	89bb      	ldrh	r3, [r7, #12]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d380      	bcc.n	8000ef8 <lcd_ShowChar+0x8c>
 8000ff6:	e000      	b.n	8000ffa <lcd_ShowChar+0x18e>
		else return;
 8000ff8:	bf00      	nop
				}
			}
		}
	}
}
 8000ffa:	371c      	adds	r7, #28
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	08008664 	.word	0x08008664
 8001004:	08008c54 	.word	0x08008c54
 8001008:	08009e24 	.word	0x08009e24

0800100c <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	460a      	mov	r2, r1
 8001016:	71fb      	strb	r3, [r7, #7]
 8001018:	4613      	mov	r3, r2
 800101a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 800101c:	2301      	movs	r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001020:	e004      	b.n	800102c <mypow+0x20>
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	fb02 f303 	mul.w	r3, r2, r3
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	1e5a      	subs	r2, r3, #1
 8001030:	71ba      	strb	r2, [r7, #6]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1f5      	bne.n	8001022 <mypow+0x16>
	return result;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b089      	sub	sp, #36	@ 0x24
 8001048:	af04      	add	r7, sp, #16
 800104a:	4604      	mov	r4, r0
 800104c:	4608      	mov	r0, r1
 800104e:	4611      	mov	r1, r2
 8001050:	461a      	mov	r2, r3
 8001052:	4623      	mov	r3, r4
 8001054:	80fb      	strh	r3, [r7, #6]
 8001056:	4603      	mov	r3, r0
 8001058:	80bb      	strh	r3, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	807b      	strh	r3, [r7, #2]
 800105e:	4613      	mov	r3, r2
 8001060:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001062:	2300      	movs	r3, #0
 8001064:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001066:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800106a:	085b      	lsrs	r3, r3, #1
 800106c:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 800106e:	2300      	movs	r3, #0
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	e059      	b.n	8001128 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001074:	887c      	ldrh	r4, [r7, #2]
 8001076:	787a      	ldrb	r2, [r7, #1]
 8001078:	7bfb      	ldrb	r3, [r7, #15]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	b2db      	uxtb	r3, r3
 800107e:	3b01      	subs	r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4619      	mov	r1, r3
 8001084:	200a      	movs	r0, #10
 8001086:	f7ff ffc1 	bl	800100c <mypow>
 800108a:	4603      	mov	r3, r0
 800108c:	fbb4 f1f3 	udiv	r1, r4, r3
 8001090:	4b2a      	ldr	r3, [pc, #168]	@ (800113c <lcd_ShowIntNum+0xf8>)
 8001092:	fba3 2301 	umull	r2, r3, r3, r1
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	1aca      	subs	r2, r1, r3
 80010a2:	4613      	mov	r3, r2
 80010a4:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d121      	bne.n	80010f0 <lcd_ShowIntNum+0xac>
 80010ac:	7bfa      	ldrb	r2, [r7, #15]
 80010ae:	787b      	ldrb	r3, [r7, #1]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	429a      	cmp	r2, r3
 80010b4:	da1c      	bge.n	80010f0 <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 80010b6:	7b3b      	ldrb	r3, [r7, #12]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d117      	bne.n	80010ec <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	7b7b      	ldrb	r3, [r7, #13]
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	fb12 f303 	smulbb	r3, r2, r3
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	4413      	add	r3, r2
 80010ce:	b298      	uxth	r0, r3
 80010d0:	8c3a      	ldrh	r2, [r7, #32]
 80010d2:	88b9      	ldrh	r1, [r7, #4]
 80010d4:	2300      	movs	r3, #0
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	4613      	mov	r3, r2
 80010e4:	2220      	movs	r2, #32
 80010e6:	f7ff fec1 	bl	8000e6c <lcd_ShowChar>
				continue;
 80010ea:	e01a      	b.n	8001122 <lcd_ShowIntNum+0xde>
			}else enshow=1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	7b7b      	ldrb	r3, [r7, #13]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	fb12 f303 	smulbb	r3, r2, r3
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	4413      	add	r3, r2
 8001102:	b298      	uxth	r0, r3
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	3330      	adds	r3, #48	@ 0x30
 8001108:	b2da      	uxtb	r2, r3
 800110a:	8c3c      	ldrh	r4, [r7, #32]
 800110c:	88b9      	ldrh	r1, [r7, #4]
 800110e:	2300      	movs	r3, #0
 8001110:	9302      	str	r3, [sp, #8]
 8001112:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001116:	9301      	str	r3, [sp, #4]
 8001118:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	4623      	mov	r3, r4
 800111e:	f7ff fea5 	bl	8000e6c <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	3301      	adds	r3, #1
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	7bfa      	ldrb	r2, [r7, #15]
 800112a:	787b      	ldrb	r3, [r7, #1]
 800112c:	429a      	cmp	r2, r3
 800112e:	d3a1      	bcc.n	8001074 <lcd_ShowIntNum+0x30>
	}
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	bd90      	pop	{r4, r7, pc}
 800113a:	bf00      	nop
 800113c:	cccccccd 	.word	0xcccccccd

08001140 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	091b      	lsrs	r3, r3, #4
 800114e:	b2db      	uxtb	r3, r3
 8001150:	f003 0303 	and.w	r3, r3, #3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <lcd_SetDir+0x44>)
 800115c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001160:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <lcd_SetDir+0x44>)
 8001164:	22f0      	movs	r2, #240	@ 0xf0
 8001166:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001168:	e006      	b.n	8001178 <lcd_SetDir+0x38>
		lcddev.width=240;
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <lcd_SetDir+0x44>)
 800116c:	22f0      	movs	r2, #240	@ 0xf0
 800116e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <lcd_SetDir+0x44>)
 8001172:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001176:	805a      	strh	r2, [r3, #2]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	2000015c 	.word	0x2000015c

08001188 <lcd_init>:


void lcd_init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800118c:	2200      	movs	r2, #0
 800118e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001192:	48aa      	ldr	r0, [pc, #680]	@ (800143c <lcd_init+0x2b4>)
 8001194:	f002 fb9a 	bl	80038cc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001198:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800119c:	f002 f832 	bl	8003204 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011a6:	48a5      	ldr	r0, [pc, #660]	@ (800143c <lcd_init+0x2b4>)
 80011a8:	f002 fb90 	bl	80038cc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80011ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011b0:	f002 f828 	bl	8003204 <HAL_Delay>
	lcd_SetDir(L2R_U2D);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff ffc3 	bl	8001140 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80011ba:	20d3      	movs	r0, #211	@ 0xd3
 80011bc:	f7ff fd50 	bl	8000c60 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80011c0:	f7ff fd6e 	bl	8000ca0 <LCD_RD_DATA>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b9d      	ldr	r3, [pc, #628]	@ (8001440 <lcd_init+0x2b8>)
 80011ca:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80011cc:	f7ff fd68 	bl	8000ca0 <LCD_RD_DATA>
 80011d0:	4603      	mov	r3, r0
 80011d2:	461a      	mov	r2, r3
 80011d4:	4b9a      	ldr	r3, [pc, #616]	@ (8001440 <lcd_init+0x2b8>)
 80011d6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80011d8:	f7ff fd62 	bl	8000ca0 <LCD_RD_DATA>
 80011dc:	4603      	mov	r3, r0
 80011de:	461a      	mov	r2, r3
 80011e0:	4b97      	ldr	r3, [pc, #604]	@ (8001440 <lcd_init+0x2b8>)
 80011e2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80011e4:	4b96      	ldr	r3, [pc, #600]	@ (8001440 <lcd_init+0x2b8>)
 80011e6:	889b      	ldrh	r3, [r3, #4]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b94      	ldr	r3, [pc, #592]	@ (8001440 <lcd_init+0x2b8>)
 80011ee:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 80011f0:	f7ff fd56 	bl	8000ca0 <LCD_RD_DATA>
 80011f4:	4603      	mov	r3, r0
 80011f6:	461a      	mov	r2, r3
 80011f8:	4b91      	ldr	r3, [pc, #580]	@ (8001440 <lcd_init+0x2b8>)
 80011fa:	889b      	ldrh	r3, [r3, #4]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b29a      	uxth	r2, r3
 8001200:	4b8f      	ldr	r3, [pc, #572]	@ (8001440 <lcd_init+0x2b8>)
 8001202:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001204:	20cf      	movs	r0, #207	@ 0xcf
 8001206:	f7ff fd2b 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff fd38 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001210:	20c1      	movs	r0, #193	@ 0xc1
 8001212:	f7ff fd35 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001216:	2030      	movs	r0, #48	@ 0x30
 8001218:	f7ff fd32 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800121c:	20ed      	movs	r0, #237	@ 0xed
 800121e:	f7ff fd1f 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001222:	2064      	movs	r0, #100	@ 0x64
 8001224:	f7ff fd2c 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001228:	2003      	movs	r0, #3
 800122a:	f7ff fd29 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800122e:	2012      	movs	r0, #18
 8001230:	f7ff fd26 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001234:	2081      	movs	r0, #129	@ 0x81
 8001236:	f7ff fd23 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800123a:	20e8      	movs	r0, #232	@ 0xe8
 800123c:	f7ff fd10 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001240:	2085      	movs	r0, #133	@ 0x85
 8001242:	f7ff fd1d 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001246:	2010      	movs	r0, #16
 8001248:	f7ff fd1a 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800124c:	207a      	movs	r0, #122	@ 0x7a
 800124e:	f7ff fd17 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001252:	20cb      	movs	r0, #203	@ 0xcb
 8001254:	f7ff fd04 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001258:	2039      	movs	r0, #57	@ 0x39
 800125a:	f7ff fd11 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800125e:	202c      	movs	r0, #44	@ 0x2c
 8001260:	f7ff fd0e 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001264:	2000      	movs	r0, #0
 8001266:	f7ff fd0b 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800126a:	2034      	movs	r0, #52	@ 0x34
 800126c:	f7ff fd08 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001270:	2002      	movs	r0, #2
 8001272:	f7ff fd05 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001276:	20f7      	movs	r0, #247	@ 0xf7
 8001278:	f7ff fcf2 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800127c:	2020      	movs	r0, #32
 800127e:	f7ff fcff 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001282:	20ea      	movs	r0, #234	@ 0xea
 8001284:	f7ff fcec 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fcf9 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fcf6 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001294:	20c0      	movs	r0, #192	@ 0xc0
 8001296:	f7ff fce3 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 800129a:	201b      	movs	r0, #27
 800129c:	f7ff fcf0 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80012a0:	20c1      	movs	r0, #193	@ 0xc1
 80012a2:	f7ff fcdd 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80012a6:	2001      	movs	r0, #1
 80012a8:	f7ff fcea 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80012ac:	20c5      	movs	r0, #197	@ 0xc5
 80012ae:	f7ff fcd7 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80012b2:	2030      	movs	r0, #48	@ 0x30
 80012b4:	f7ff fce4 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80012b8:	2030      	movs	r0, #48	@ 0x30
 80012ba:	f7ff fce1 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80012be:	20c7      	movs	r0, #199	@ 0xc7
 80012c0:	f7ff fcce 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80012c4:	20b7      	movs	r0, #183	@ 0xb7
 80012c6:	f7ff fcdb 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80012ca:	2036      	movs	r0, #54	@ 0x36
 80012cc:	f7ff fcc8 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x08|L2R_U2D);
 80012d0:	2008      	movs	r0, #8
 80012d2:	f7ff fcd5 	bl	8000c80 <LCD_WR_DATA>

//	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
	LCD_WR_REG(0x3A);
 80012d6:	203a      	movs	r0, #58	@ 0x3a
 80012d8:	f7ff fcc2 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80012dc:	2055      	movs	r0, #85	@ 0x55
 80012de:	f7ff fccf 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80012e2:	20b1      	movs	r0, #177	@ 0xb1
 80012e4:	f7ff fcbc 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fcc9 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80012ee:	201a      	movs	r0, #26
 80012f0:	f7ff fcc6 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 80012f4:	20b6      	movs	r0, #182	@ 0xb6
 80012f6:	f7ff fcb3 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 80012fa:	200a      	movs	r0, #10
 80012fc:	f7ff fcc0 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001300:	20a2      	movs	r0, #162	@ 0xa2
 8001302:	f7ff fcbd 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001306:	20f2      	movs	r0, #242	@ 0xf2
 8001308:	f7ff fcaa 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff fcb7 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001312:	2026      	movs	r0, #38	@ 0x26
 8001314:	f7ff fca4 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff fcb1 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800131e:	20e0      	movs	r0, #224	@ 0xe0
 8001320:	f7ff fc9e 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001324:	200f      	movs	r0, #15
 8001326:	f7ff fcab 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800132a:	202a      	movs	r0, #42	@ 0x2a
 800132c:	f7ff fca8 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001330:	2028      	movs	r0, #40	@ 0x28
 8001332:	f7ff fca5 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001336:	2008      	movs	r0, #8
 8001338:	f7ff fca2 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800133c:	200e      	movs	r0, #14
 800133e:	f7ff fc9f 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001342:	2008      	movs	r0, #8
 8001344:	f7ff fc9c 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001348:	2054      	movs	r0, #84	@ 0x54
 800134a:	f7ff fc99 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800134e:	20a9      	movs	r0, #169	@ 0xa9
 8001350:	f7ff fc96 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001354:	2043      	movs	r0, #67	@ 0x43
 8001356:	f7ff fc93 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800135a:	200a      	movs	r0, #10
 800135c:	f7ff fc90 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001360:	200f      	movs	r0, #15
 8001362:	f7ff fc8d 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff fc8a 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800136c:	2000      	movs	r0, #0
 800136e:	f7ff fc87 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff fc84 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001378:	2000      	movs	r0, #0
 800137a:	f7ff fc81 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800137e:	20e1      	movs	r0, #225	@ 0xe1
 8001380:	f7ff fc6e 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001384:	2000      	movs	r0, #0
 8001386:	f7ff fc7b 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800138a:	2015      	movs	r0, #21
 800138c:	f7ff fc78 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001390:	2017      	movs	r0, #23
 8001392:	f7ff fc75 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001396:	2007      	movs	r0, #7
 8001398:	f7ff fc72 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 800139c:	2011      	movs	r0, #17
 800139e:	f7ff fc6f 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80013a2:	2006      	movs	r0, #6
 80013a4:	f7ff fc6c 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80013a8:	202b      	movs	r0, #43	@ 0x2b
 80013aa:	f7ff fc69 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80013ae:	2056      	movs	r0, #86	@ 0x56
 80013b0:	f7ff fc66 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80013b4:	203c      	movs	r0, #60	@ 0x3c
 80013b6:	f7ff fc63 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80013ba:	2005      	movs	r0, #5
 80013bc:	f7ff fc60 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80013c0:	2010      	movs	r0, #16
 80013c2:	f7ff fc5d 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013c6:	200f      	movs	r0, #15
 80013c8:	f7ff fc5a 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80013cc:	203f      	movs	r0, #63	@ 0x3f
 80013ce:	f7ff fc57 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80013d2:	203f      	movs	r0, #63	@ 0x3f
 80013d4:	f7ff fc54 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80013d8:	200f      	movs	r0, #15
 80013da:	f7ff fc51 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80013de:	202b      	movs	r0, #43	@ 0x2b
 80013e0:	f7ff fc3e 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fc4b 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fc48 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f7ff fc45 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 80013f6:	203f      	movs	r0, #63	@ 0x3f
 80013f8:	f7ff fc42 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 80013fc:	202a      	movs	r0, #42	@ 0x2a
 80013fe:	f7ff fc2f 	bl	8000c60 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001402:	2000      	movs	r0, #0
 8001404:	f7ff fc3c 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001408:	2000      	movs	r0, #0
 800140a:	f7ff fc39 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800140e:	2000      	movs	r0, #0
 8001410:	f7ff fc36 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001414:	20ef      	movs	r0, #239	@ 0xef
 8001416:	f7ff fc33 	bl	8000c80 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800141a:	2011      	movs	r0, #17
 800141c:	f7ff fc20 	bl	8000c60 <LCD_WR_REG>
	HAL_Delay(120);
 8001420:	2078      	movs	r0, #120	@ 0x78
 8001422:	f001 feef 	bl	8003204 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001426:	2029      	movs	r0, #41	@ 0x29
 8001428:	f7ff fc1a 	bl	8000c60 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001432:	4804      	ldr	r0, [pc, #16]	@ (8001444 <lcd_init+0x2bc>)
 8001434:	f002 fa4a 	bl	80038cc <HAL_GPIO_WritePin>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40020800 	.word	0x40020800
 8001440:	2000015c 	.word	0x2000015c
 8001444:	40020000 	.word	0x40020000

08001448 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,uint8_t *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b08b      	sub	sp, #44	@ 0x2c
 800144c:	af04      	add	r7, sp, #16
 800144e:	60ba      	str	r2, [r7, #8]
 8001450:	461a      	mov	r2, r3
 8001452:	4603      	mov	r3, r0
 8001454:	81fb      	strh	r3, [r7, #14]
 8001456:	460b      	mov	r3, r1
 8001458:	81bb      	strh	r3, [r7, #12]
 800145a:	4613      	mov	r3, r2
 800145c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800145e:	89fb      	ldrh	r3, [r7, #14]
 8001460:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 8001462:	2300      	movs	r3, #0
 8001464:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001466:	e048      	b.n	80014fa <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d145      	bne.n	80014fa <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800146e:	89fa      	ldrh	r2, [r7, #14]
 8001470:	4b26      	ldr	r3, [pc, #152]	@ (800150c <lcd_ShowStr+0xc4>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800147a:	085b      	lsrs	r3, r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	1acb      	subs	r3, r1, r3
 8001480:	429a      	cmp	r2, r3
 8001482:	dc3f      	bgt.n	8001504 <lcd_ShowStr+0xbc>
 8001484:	89ba      	ldrh	r2, [r7, #12]
 8001486:	4b21      	ldr	r3, [pc, #132]	@ (800150c <lcd_ShowStr+0xc4>)
 8001488:	885b      	ldrh	r3, [r3, #2]
 800148a:	4619      	mov	r1, r3
 800148c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001490:	1acb      	subs	r3, r1, r3
 8001492:	429a      	cmp	r2, r3
 8001494:	dc36      	bgt.n	8001504 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b80      	cmp	r3, #128	@ 0x80
 800149c:	d902      	bls.n	80014a4 <lcd_ShowStr+0x5c>
 800149e:	2301      	movs	r3, #1
 80014a0:	75fb      	strb	r3, [r7, #23]
 80014a2:	e02a      	b.n	80014fa <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b0d      	cmp	r3, #13
 80014aa:	d10b      	bne.n	80014c4 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80014ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	89bb      	ldrh	r3, [r7, #12]
 80014b4:	4413      	add	r3, r2
 80014b6:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80014b8:	8abb      	ldrh	r3, [r7, #20]
 80014ba:	81fb      	strh	r3, [r7, #14]
					str++;
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	3301      	adds	r3, #1
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	e017      	b.n	80014f4 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	781a      	ldrb	r2, [r3, #0]
 80014c8:	88fc      	ldrh	r4, [r7, #6]
 80014ca:	89b9      	ldrh	r1, [r7, #12]
 80014cc:	89f8      	ldrh	r0, [r7, #14]
 80014ce:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80014d2:	9302      	str	r3, [sp, #8]
 80014d4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4623      	mov	r3, r4
 80014e0:	f7ff fcc4 	bl	8000e6c <lcd_ShowChar>
					x+=sizey/2;
 80014e4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80014e8:	085b      	lsrs	r3, r3, #1
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	89fb      	ldrh	r3, [r7, #14]
 80014f0:	4413      	add	r3, r2
 80014f2:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	3301      	adds	r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1b2      	bne.n	8001468 <lcd_ShowStr+0x20>
 8001502:	e000      	b.n	8001506 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001504:	bf00      	nop
			}
		}
	}
}
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	2000015c 	.word	0x2000015c

08001510 <led7_init>:
uint8_t arrayOfNum[10] = {0x03, 0x9f, 0x25, 0x0d, 0x99, 0x49, 0x41, 0x1f, 0x01, 0x09};// 9 numbers
uint16_t spi_buffer = 0xffff;

int led7_index = 0;

void led7_init(){
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001514:	2201      	movs	r2, #1
 8001516:	2140      	movs	r1, #64	@ 0x40
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <led7_init+0x14>)
 800151a:	f002 f9d7 	bl	80038cc <HAL_GPIO_WritePin>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40021800 	.word	0x40021800

08001528 <led7_Scan>:

void led7_Scan(){
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 800152c:	4b3f      	ldr	r3, [pc, #252]	@ (800162c <led7_Scan+0x104>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b3d      	ldr	r3, [pc, #244]	@ (800162c <led7_Scan+0x104>)
 8001536:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001538:	4b3d      	ldr	r3, [pc, #244]	@ (8001630 <led7_Scan+0x108>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a3d      	ldr	r2, [pc, #244]	@ (8001634 <led7_Scan+0x10c>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	b21a      	sxth	r2, r3
 8001544:	4b39      	ldr	r3, [pc, #228]	@ (800162c <led7_Scan+0x104>)
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	b21b      	sxth	r3, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	b21b      	sxth	r3, r3
 800154e:	b29a      	uxth	r2, r3
 8001550:	4b36      	ldr	r3, [pc, #216]	@ (800162c <led7_Scan+0x104>)
 8001552:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 8001554:	4b36      	ldr	r3, [pc, #216]	@ (8001630 <led7_Scan+0x108>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b03      	cmp	r3, #3
 800155a:	d847      	bhi.n	80015ec <led7_Scan+0xc4>
 800155c:	a201      	add	r2, pc, #4	@ (adr r2, 8001564 <led7_Scan+0x3c>)
 800155e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001562:	bf00      	nop
 8001564:	08001575 	.word	0x08001575
 8001568:	08001593 	.word	0x08001593
 800156c:	080015b1 	.word	0x080015b1
 8001570:	080015cf 	.word	0x080015cf
	case 0:
		spi_buffer |= 0x00b0;
 8001574:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <led7_Scan+0x104>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b2b      	ldr	r3, [pc, #172]	@ (800162c <led7_Scan+0x104>)
 8001580:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 8001582:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <led7_Scan+0x104>)
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b27      	ldr	r3, [pc, #156]	@ (800162c <led7_Scan+0x104>)
 800158e:	801a      	strh	r2, [r3, #0]
		break;
 8001590:	e02d      	b.n	80015ee <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 8001592:	4b26      	ldr	r3, [pc, #152]	@ (800162c <led7_Scan+0x104>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 800159a:	b29a      	uxth	r2, r3
 800159c:	4b23      	ldr	r3, [pc, #140]	@ (800162c <led7_Scan+0x104>)
 800159e:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 80015a0:	4b22      	ldr	r3, [pc, #136]	@ (800162c <led7_Scan+0x104>)
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	f023 0320 	bic.w	r3, r3, #32
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	4b20      	ldr	r3, [pc, #128]	@ (800162c <led7_Scan+0x104>)
 80015ac:	801a      	strh	r2, [r3, #0]
		break;
 80015ae:	e01e      	b.n	80015ee <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80015b0:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <led7_Scan+0x104>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <led7_Scan+0x104>)
 80015bc:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80015be:	4b1b      	ldr	r3, [pc, #108]	@ (800162c <led7_Scan+0x104>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	f023 0310 	bic.w	r3, r3, #16
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4b18      	ldr	r3, [pc, #96]	@ (800162c <led7_Scan+0x104>)
 80015ca:	801a      	strh	r2, [r3, #0]
		break;
 80015cc:	e00f      	b.n	80015ee <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80015ce:	4b17      	ldr	r3, [pc, #92]	@ (800162c <led7_Scan+0x104>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	4b14      	ldr	r3, [pc, #80]	@ (800162c <led7_Scan+0x104>)
 80015da:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80015dc:	4b13      	ldr	r3, [pc, #76]	@ (800162c <led7_Scan+0x104>)
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <led7_Scan+0x104>)
 80015e8:	801a      	strh	r2, [r3, #0]
		break;
 80015ea:	e000      	b.n	80015ee <led7_Scan+0xc6>
	default:
		break;
 80015ec:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <led7_Scan+0x108>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	3301      	adds	r3, #1
 80015f4:	425a      	negs	r2, r3
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	f002 0203 	and.w	r2, r2, #3
 80015fe:	bf58      	it	pl
 8001600:	4253      	negpl	r3, r2
 8001602:	4a0b      	ldr	r2, [pc, #44]	@ (8001630 <led7_Scan+0x108>)
 8001604:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2140      	movs	r1, #64	@ 0x40
 800160a:	480b      	ldr	r0, [pc, #44]	@ (8001638 <led7_Scan+0x110>)
 800160c:	f002 f95e 	bl	80038cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001610:	2301      	movs	r3, #1
 8001612:	2202      	movs	r2, #2
 8001614:	4905      	ldr	r1, [pc, #20]	@ (800162c <led7_Scan+0x104>)
 8001616:	4809      	ldr	r0, [pc, #36]	@ (800163c <led7_Scan+0x114>)
 8001618:	f003 ffe5 	bl	80055e6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 800161c:	2201      	movs	r2, #1
 800161e:	2140      	movs	r1, #64	@ 0x40
 8001620:	4805      	ldr	r0, [pc, #20]	@ (8001638 <led7_Scan+0x110>)
 8001622:	f002 f953 	bl	80038cc <HAL_GPIO_WritePin>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000004 	.word	0x20000004
 8001630:	20000164 	.word	0x20000164
 8001634:	20000000 	.word	0x20000000
 8001638:	40021800 	.word	0x40021800
 800163c:	2000017c 	.word	0x2000017c

08001640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001644:	f001 fd6c 	bl	8003120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001648:	f000 f826 	bl	8001698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800164c:	f7ff f99a 	bl	8000984 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001650:	f001 fb76 	bl	8002d40 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001654:	f001 fa42 	bl	8002adc <MX_SPI1_Init>
  MX_FSMC_Init();
 8001658:	f7ff f8c4 	bl	80007e4 <MX_FSMC_Init>
  MX_I2C1_Init();
 800165c:	f7ff fa8a 	bl	8000b74 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001660:	f001 fc7c 	bl	8002f5c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  system_init();
 8001664:	f000 f882 	bl	800176c <system_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_Clear(BLACK);
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff fb77 	bl	8000d5c <lcd_Clear>
  updateTime();
 800166e:	f000 f8cd 	bl	800180c <updateTime>
  while (1)
  {
    /* USER CODE END WHILE */
	  while(!flag_timer2);
 8001672:	bf00      	nop
 8001674:	4b07      	ldr	r3, [pc, #28]	@ (8001694 <main+0x54>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0fb      	beq.n	8001674 <main+0x34>
	  flag_timer2 = 0;
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <main+0x54>)
 800167e:	2200      	movs	r2, #0
 8001680:	801a      	strh	r2, [r3, #0]
	  button_Scan();
 8001682:	f7fe ff79 	bl	8000578 <button_Scan>
	  ds3231_ReadTime();
 8001686:	f7ff f849 	bl	800071c <ds3231_ReadTime>
	  test_Uart();
 800168a:	f000 f893 	bl	80017b4 <test_Uart>
	  runSystem();
 800168e:	f000 f8fd 	bl	800188c <runSystem>
	  while(!flag_timer2);
 8001692:	e7ee      	b.n	8001672 <main+0x32>
 8001694:	20000174 	.word	0x20000174

08001698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b094      	sub	sp, #80	@ 0x50
 800169c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169e:	f107 0320 	add.w	r3, r7, #32
 80016a2:	2230      	movs	r2, #48	@ 0x30
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f006 faf2 	bl	8007c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	4b28      	ldr	r3, [pc, #160]	@ (8001764 <SystemClock_Config+0xcc>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	4a27      	ldr	r2, [pc, #156]	@ (8001764 <SystemClock_Config+0xcc>)
 80016c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80016cc:	4b25      	ldr	r3, [pc, #148]	@ (8001764 <SystemClock_Config+0xcc>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	4b22      	ldr	r3, [pc, #136]	@ (8001768 <SystemClock_Config+0xd0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a21      	ldr	r2, [pc, #132]	@ (8001768 <SystemClock_Config+0xd0>)
 80016e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001768 <SystemClock_Config+0xd0>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f0:	607b      	str	r3, [r7, #4]
 80016f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f4:	2302      	movs	r3, #2
 80016f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f8:	2301      	movs	r3, #1
 80016fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016fc:	2310      	movs	r3, #16
 80016fe:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001700:	2302      	movs	r3, #2
 8001702:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001704:	2300      	movs	r3, #0
 8001706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001708:	2308      	movs	r3, #8
 800170a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800170c:	23a8      	movs	r3, #168	@ 0xa8
 800170e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001710:	2302      	movs	r3, #2
 8001712:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001714:	2304      	movs	r3, #4
 8001716:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001718:	f107 0320 	add.w	r3, r7, #32
 800171c:	4618      	mov	r0, r3
 800171e:	f003 fa41 	bl	8004ba4 <HAL_RCC_OscConfig>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001728:	f001 f982 	bl	8002a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800172c:	230f      	movs	r3, #15
 800172e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001730:	2302      	movs	r3, #2
 8001732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001738:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800173c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800173e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	2105      	movs	r1, #5
 800174a:	4618      	mov	r0, r3
 800174c:	f003 fca2 	bl	8005094 <HAL_RCC_ClockConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001756:	f001 f96b 	bl	8002a30 <Error_Handler>
  }
}
 800175a:	bf00      	nop
 800175c:	3750      	adds	r7, #80	@ 0x50
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40007000 	.word	0x40007000

0800176c <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(OUTPUT_Y0_GPIO_Port, OUTPUT_Y0_Pin, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2120      	movs	r1, #32
 8001774:	480e      	ldr	r0, [pc, #56]	@ (80017b0 <system_init+0x44>)
 8001776:	f002 f8a9 	bl	80038cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(OUTPUT_Y1_GPIO_Port, OUTPUT_Y1_Pin, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2140      	movs	r1, #64	@ 0x40
 800177e:	480c      	ldr	r0, [pc, #48]	@ (80017b0 <system_init+0x44>)
 8001780:	f002 f8a4 	bl	80038cc <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	2110      	movs	r1, #16
 8001788:	4809      	ldr	r0, [pc, #36]	@ (80017b0 <system_init+0x44>)
 800178a:	f002 f89f 	bl	80038cc <HAL_GPIO_WritePin>

	  timer_init();
 800178e:	f001 f955 	bl	8002a3c <timer_init>
	  led7_init();
 8001792:	f7ff febd 	bl	8001510 <led7_init>
	  button_init();
 8001796:	f7fe fee3 	bl	8000560 <button_init>
	  lcd_init();
 800179a:	f7ff fcf5 	bl	8001188 <lcd_init>
	  uart_init_rs232();
 800179e:	f001 fb41 	bl	8002e24 <uart_init_rs232>
	  ds3231_init();
 80017a2:	f7fe ff55 	bl	8000650 <ds3231_init>
	  setTimer2(50);
 80017a6:	2032      	movs	r0, #50	@ 0x32
 80017a8:	f001 f952 	bl	8002a50 <setTimer2>
}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	40021000 	.word	0x40021000

080017b4 <test_Uart>:
			led7_SetDigit(i%10, 3, 0);
		}
	}
}

void test_Uart(){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	if(button_count [13] == 1){
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <test_Uart+0x40>)
 80017ba:	8b5b      	ldrh	r3, [r3, #26]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d117      	bne.n	80017f0 <test_Uart+0x3c>
		uart_Rs232SendNum (ds3231_hours);
 80017c0:	4b0d      	ldr	r3, [pc, #52]	@ (80017f8 <test_Uart+0x44>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f001 fb55 	bl	8002e74 <uart_Rs232SendNum>
		uart_Rs232SendString (":");
 80017ca:	480c      	ldr	r0, [pc, #48]	@ (80017fc <test_Uart+0x48>)
 80017cc:	f001 fb38 	bl	8002e40 <uart_Rs232SendString>
		uart_Rs232SendNum ( ds3231_min );
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <test_Uart+0x4c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f001 fb4d 	bl	8002e74 <uart_Rs232SendNum>
		uart_Rs232SendString (":");
 80017da:	4808      	ldr	r0, [pc, #32]	@ (80017fc <test_Uart+0x48>)
 80017dc:	f001 fb30 	bl	8002e40 <uart_Rs232SendString>
		uart_Rs232SendNum ( ds3231_sec );
 80017e0:	4b08      	ldr	r3, [pc, #32]	@ (8001804 <test_Uart+0x50>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f001 fb45 	bl	8002e74 <uart_Rs232SendNum>
		uart_Rs232SendString ("\n");
 80017ea:	4807      	ldr	r0, [pc, #28]	@ (8001808 <test_Uart+0x54>)
 80017ec:	f001 fb28 	bl	8002e40 <uart_Rs232SendString>
	}
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000080 	.word	0x20000080
 80017f8:	200000ab 	.word	0x200000ab
 80017fc:	080085a8 	.word	0x080085a8
 8001800:	200000ac 	.word	0x200000ac
 8001804:	200000ad 	.word	0x200000ad
 8001808:	080085ac 	.word	0x080085ac

0800180c <updateTime>:

void updateTime(){
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
	ds3231_Write(ADDRESS_YEAR, 24);
 8001810:	2118      	movs	r1, #24
 8001812:	2006      	movs	r0, #6
 8001814:	f7fe ff60 	bl	80006d8 <ds3231_Write>
	ds3231_Write(ADDRESS_MONTH, 11);
 8001818:	210b      	movs	r1, #11
 800181a:	2005      	movs	r0, #5
 800181c:	f7fe ff5c 	bl	80006d8 <ds3231_Write>
	ds3231_Write(ADDRESS_DATE, 29);
 8001820:	211d      	movs	r1, #29
 8001822:	2004      	movs	r0, #4
 8001824:	f7fe ff58 	bl	80006d8 <ds3231_Write>
	ds3231_Write(ADDRESS_DAY, 6);
 8001828:	2106      	movs	r1, #6
 800182a:	2003      	movs	r0, #3
 800182c:	f7fe ff54 	bl	80006d8 <ds3231_Write>
	ds3231_Write(ADDRESS_HOUR, 9);
 8001830:	2109      	movs	r1, #9
 8001832:	2002      	movs	r0, #2
 8001834:	f7fe ff50 	bl	80006d8 <ds3231_Write>
	ds3231_Write(ADDRESS_MIN, 10);
 8001838:	210a      	movs	r1, #10
 800183a:	2001      	movs	r0, #1
 800183c:	f7fe ff4c 	bl	80006d8 <ds3231_Write>
	ds3231_Write(ADDRESS_SEC, 00);
 8001840:	2100      	movs	r1, #0
 8001842:	2000      	movs	r0, #0
 8001844:	f7fe ff48 	bl	80006d8 <ds3231_Write>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <isButtonUp>:

uint8_t isButtonUp()
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
    if (button_count[3] == 1)
 8001850:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <isButtonUp+0x1c>)
 8001852:	88db      	ldrh	r3, [r3, #6]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d101      	bne.n	800185c <isButtonUp+0x10>
        return 1;
 8001858:	2301      	movs	r3, #1
 800185a:	e000      	b.n	800185e <isButtonUp+0x12>
    else
        return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	20000080 	.word	0x20000080

0800186c <isButtonDown>:
uint8_t isButtonDown()
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
    if (button_count[7] == 1)
 8001870:	4b05      	ldr	r3, [pc, #20]	@ (8001888 <isButtonDown+0x1c>)
 8001872:	89db      	ldrh	r3, [r3, #14]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d101      	bne.n	800187c <isButtonDown+0x10>
        return 1;
 8001878:	2301      	movs	r3, #1
 800187a:	e000      	b.n	800187e <isButtonDown+0x12>
    else
        return 0;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	20000080 	.word	0x20000080

0800188c <runSystem>:
//uint8_t systemState = 0; // 0: INIT, 1: NORMAL, 2: MODIFY, 3: ALARM
//uint8_t modifyState = 0; // 0: modify HOUR; 1: modify MIN, 2: modify SEC
//uint8_t count_blink = 0;
//uint8_t blink_state = 0;
uint8_t temp_time;
void runSystem(){
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af04      	add	r7, sp, #16
	switch(systemState){
 8001892:	4b77      	ldr	r3, [pc, #476]	@ (8001a70 <runSystem+0x1e4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b08      	cmp	r3, #8
 8001898:	f201 8037 	bhi.w	800290a <runSystem+0x107e>
 800189c:	a201      	add	r2, pc, #4	@ (adr r2, 80018a4 <runSystem+0x18>)
 800189e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a2:	bf00      	nop
 80018a4:	080018c9 	.word	0x080018c9
 80018a8:	08001911 	.word	0x08001911
 80018ac:	080019ef 	.word	0x080019ef
 80018b0:	08001c95 	.word	0x08001c95
 80018b4:	08001f35 	.word	0x08001f35
 80018b8:	080021d3 	.word	0x080021d3
 80018bc:	08002479 	.word	0x08002479
 80018c0:	0800290b 	.word	0x0800290b
 80018c4:	08002711 	.word	0x08002711
	case INIT:
		ds3231_Write(ADDRESS_YEAR, 24);
 80018c8:	2118      	movs	r1, #24
 80018ca:	2006      	movs	r0, #6
 80018cc:	f7fe ff04 	bl	80006d8 <ds3231_Write>
		ds3231_Write(ADDRESS_MONTH, 11);
 80018d0:	210b      	movs	r1, #11
 80018d2:	2005      	movs	r0, #5
 80018d4:	f7fe ff00 	bl	80006d8 <ds3231_Write>
		ds3231_Write(ADDRESS_DATE, 28);
 80018d8:	211c      	movs	r1, #28
 80018da:	2004      	movs	r0, #4
 80018dc:	f7fe fefc 	bl	80006d8 <ds3231_Write>
		ds3231_Write(ADDRESS_DAY, 5);
 80018e0:	2105      	movs	r1, #5
 80018e2:	2003      	movs	r0, #3
 80018e4:	f7fe fef8 	bl	80006d8 <ds3231_Write>
		ds3231_Write(ADDRESS_HOUR, 10);
 80018e8:	210a      	movs	r1, #10
 80018ea:	2002      	movs	r0, #2
 80018ec:	f7fe fef4 	bl	80006d8 <ds3231_Write>
		ds3231_Write(ADDRESS_MIN, 47);
 80018f0:	212f      	movs	r1, #47	@ 0x2f
 80018f2:	2001      	movs	r0, #1
 80018f4:	f7fe fef0 	bl	80006d8 <ds3231_Write>
		ds3231_Write(ADDRESS_SEC, 50);
 80018f8:	2132      	movs	r1, #50	@ 0x32
 80018fa:	2000      	movs	r0, #0
 80018fc:	f7fe feec 	bl	80006d8 <ds3231_Write>
		systemState = NORMAL;
 8001900:	4b5b      	ldr	r3, [pc, #364]	@ (8001a70 <runSystem+0x1e4>)
 8001902:	2201      	movs	r2, #1
 8001904:	601a      	str	r2, [r3, #0]
		lcd_Clear(BLACK);
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff fa28 	bl	8000d5c <lcd_Clear>
		break;
 800190c:	f000 bffd 	b.w	800290a <runSystem+0x107e>
	case NORMAL:
		ds3231_ReadTime();
 8001910:	f7fe ff04 	bl	800071c <ds3231_ReadTime>
		displayTime();
 8001914:	f001 f80e 	bl	8002934 <displayTime>
		if(button_count[0] == 1){
 8001918:	4b56      	ldr	r3, [pc, #344]	@ (8001a74 <runSystem+0x1e8>)
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d109      	bne.n	8001934 <runSystem+0xa8>
			systemState = MODIFY_HOUR;
 8001920:	4b53      	ldr	r3, [pc, #332]	@ (8001a70 <runSystem+0x1e4>)
 8001922:	2202      	movs	r2, #2
 8001924:	601a      	str	r2, [r3, #0]
			temp_time = ds3231_hours;
 8001926:	4b54      	ldr	r3, [pc, #336]	@ (8001a78 <runSystem+0x1ec>)
 8001928:	781a      	ldrb	r2, [r3, #0]
 800192a:	4b54      	ldr	r3, [pc, #336]	@ (8001a7c <runSystem+0x1f0>)
 800192c:	701a      	strb	r2, [r3, #0]
			lcd_Clear(BLACK);
 800192e:	2000      	movs	r0, #0
 8001930:	f7ff fa14 	bl	8000d5c <lcd_Clear>
		}
		if(ds3231_hours == alarm_hour && ds3231_min == alarm_min && set_alarm_flag == 1){
 8001934:	4b50      	ldr	r3, [pc, #320]	@ (8001a78 <runSystem+0x1ec>)
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	4b51      	ldr	r3, [pc, #324]	@ (8001a80 <runSystem+0x1f4>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	f040 87d9 	bne.w	80028f4 <runSystem+0x1068>
 8001942:	4b50      	ldr	r3, [pc, #320]	@ (8001a84 <runSystem+0x1f8>)
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	4b50      	ldr	r3, [pc, #320]	@ (8001a88 <runSystem+0x1fc>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	f040 87d2 	bne.w	80028f4 <runSystem+0x1068>
 8001950:	4b4e      	ldr	r3, [pc, #312]	@ (8001a8c <runSystem+0x200>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	f040 87cd 	bne.w	80028f4 <runSystem+0x1068>
			if(ds3231_sec >= 0 && ds3231_sec <= 15){
 800195a:	4b4d      	ldr	r3, [pc, #308]	@ (8001a90 <runSystem+0x204>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b0f      	cmp	r3, #15
 8001960:	d838      	bhi.n	80019d4 <runSystem+0x148>
				count_blink = count_blink + 1;
 8001962:	4b4c      	ldr	r3, [pc, #304]	@ (8001a94 <runSystem+0x208>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	3301      	adds	r3, #1
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a94 <runSystem+0x208>)
 800196c:	701a      	strb	r2, [r3, #0]
				if(count_blink % 10 == 0){
 800196e:	4b49      	ldr	r3, [pc, #292]	@ (8001a94 <runSystem+0x208>)
 8001970:	781a      	ldrb	r2, [r3, #0]
 8001972:	4b49      	ldr	r3, [pc, #292]	@ (8001a98 <runSystem+0x20c>)
 8001974:	fba3 1302 	umull	r1, r3, r3, r2
 8001978:	08d9      	lsrs	r1, r3, #3
 800197a:	460b      	mov	r3, r1
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	440b      	add	r3, r1
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	f040 87b4 	bne.w	80028f4 <runSystem+0x1068>
					if(blink_state == 0){
 800198c:	4b43      	ldr	r3, [pc, #268]	@ (8001a9c <runSystem+0x210>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d10c      	bne.n	80019ae <runSystem+0x122>
						lcd_Fill(20, 30, 150, 100, BLACK);
 8001994:	2300      	movs	r3, #0
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2364      	movs	r3, #100	@ 0x64
 800199a:	2296      	movs	r2, #150	@ 0x96
 800199c:	211e      	movs	r1, #30
 800199e:	2014      	movs	r0, #20
 80019a0:	f7ff fa16 	bl	8000dd0 <lcd_Fill>
						blink_state = 1;
 80019a4:	4b3d      	ldr	r3, [pc, #244]	@ (8001a9c <runSystem+0x210>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	701a      	strb	r2, [r3, #0]
			}else{
				lcd_Fill(20, 30, 150, 100, BLACK);
				set_alarm_flag = 0;
			}
		}
		break;
 80019aa:	f000 bfa3 	b.w	80028f4 <runSystem+0x1068>
						lcd_ShowStr(20, 30, "TIME UP!!!", WHITE, RED, 24, 0);
 80019ae:	2300      	movs	r3, #0
 80019b0:	9302      	str	r3, [sp, #8]
 80019b2:	2318      	movs	r3, #24
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019c0:	4a37      	ldr	r2, [pc, #220]	@ (8001aa0 <runSystem+0x214>)
 80019c2:	211e      	movs	r1, #30
 80019c4:	2014      	movs	r0, #20
 80019c6:	f7ff fd3f 	bl	8001448 <lcd_ShowStr>
						blink_state = 0;
 80019ca:	4b34      	ldr	r3, [pc, #208]	@ (8001a9c <runSystem+0x210>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
		break;
 80019d0:	f000 bf90 	b.w	80028f4 <runSystem+0x1068>
				lcd_Fill(20, 30, 150, 100, BLACK);
 80019d4:	2300      	movs	r3, #0
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	2364      	movs	r3, #100	@ 0x64
 80019da:	2296      	movs	r2, #150	@ 0x96
 80019dc:	211e      	movs	r1, #30
 80019de:	2014      	movs	r0, #20
 80019e0:	f7ff f9f6 	bl	8000dd0 <lcd_Fill>
				set_alarm_flag = 0;
 80019e4:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <runSystem+0x200>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	701a      	strb	r2, [r3, #0]
		break;
 80019ea:	f000 bf83 	b.w	80028f4 <runSystem+0x1068>
	case MODIFY_HOUR:
		lcd_ShowStr(20, 30, "Modify HOUR", WHITE, BLUE, 24, 0);
 80019ee:	2300      	movs	r3, #0
 80019f0:	9302      	str	r3, [sp, #8]
 80019f2:	2318      	movs	r3, #24
 80019f4:	9301      	str	r3, [sp, #4]
 80019f6:	231f      	movs	r3, #31
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80019fe:	4a29      	ldr	r2, [pc, #164]	@ (8001aa4 <runSystem+0x218>)
 8001a00:	211e      	movs	r1, #30
 8001a02:	2014      	movs	r0, #20
 8001a04:	f7ff fd20 	bl	8001448 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001a08:	4b21      	ldr	r3, [pc, #132]	@ (8001a90 <runSystem+0x204>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7fe fe62 	bl	80006d8 <ds3231_Write>
		count_blink = count_blink + 1;
 8001a14:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <runSystem+0x208>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a94 <runSystem+0x208>)
 8001a1e:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 8001a20:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <runSystem+0x208>)
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	4b1c      	ldr	r3, [pc, #112]	@ (8001a98 <runSystem+0x20c>)
 8001a26:	fba3 1302 	umull	r1, r3, r3, r2
 8001a2a:	08d9      	lsrs	r1, r3, #3
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	440b      	add	r3, r1
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d106      	bne.n	8001a4a <runSystem+0x1be>
			blink_state ^= 1;
 8001a3c:	4b17      	ldr	r3, [pc, #92]	@ (8001a9c <runSystem+0x210>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	f083 0301 	eor.w	r3, r3, #1
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4b15      	ldr	r3, [pc, #84]	@ (8001a9c <runSystem+0x210>)
 8001a48:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 8001a4a:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <runSystem+0x210>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d12c      	bne.n	8001aac <runSystem+0x220>
			lcd_ShowStr(70, 100, "  ", GREEN, BLACK, 24, 0);
 8001a52:	2300      	movs	r3, #0
 8001a54:	9302      	str	r3, [sp, #8]
 8001a56:	2318      	movs	r3, #24
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001a62:	4a11      	ldr	r2, [pc, #68]	@ (8001aa8 <runSystem+0x21c>)
 8001a64:	2164      	movs	r1, #100	@ 0x64
 8001a66:	2046      	movs	r0, #70	@ 0x46
 8001a68:	f7ff fcee 	bl	8001448 <lcd_ShowStr>
 8001a6c:	e02d      	b.n	8001aca <runSystem+0x23e>
 8001a6e:	bf00      	nop
 8001a70:	20000168 	.word	0x20000168
 8001a74:	20000080 	.word	0x20000080
 8001a78:	200000ab 	.word	0x200000ab
 8001a7c:	20000173 	.word	0x20000173
 8001a80:	2000016c 	.word	0x2000016c
 8001a84:	200000ac 	.word	0x200000ac
 8001a88:	2000016d 	.word	0x2000016d
 8001a8c:	20000170 	.word	0x20000170
 8001a90:	200000ad 	.word	0x200000ad
 8001a94:	2000016e 	.word	0x2000016e
 8001a98:	cccccccd 	.word	0xcccccccd
 8001a9c:	2000016f 	.word	0x2000016f
 8001aa0:	080085b0 	.word	0x080085b0
 8001aa4:	080085bc 	.word	0x080085bc
 8001aa8:	080085c8 	.word	0x080085c8
		}else{
			lcd_ShowIntNum(70, 100, temp_time, 2, GREEN, BLACK, 24);
 8001aac:	4b99      	ldr	r3, [pc, #612]	@ (8001d14 <runSystem+0x488>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2318      	movs	r3, #24
 8001ab4:	9302      	str	r3, [sp, #8]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	2164      	movs	r1, #100	@ 0x64
 8001ac4:	2046      	movs	r0, #70	@ 0x46
 8001ac6:	f7ff fabd 	bl	8001044 <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8001aca:	4b93      	ldr	r3, [pc, #588]	@ (8001d18 <runSystem+0x48c>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	461a      	mov	r2, r3
 8001ad0:	2318      	movs	r3, #24
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2302      	movs	r3, #2
 8001ae0:	2164      	movs	r1, #100	@ 0x64
 8001ae2:	206e      	movs	r0, #110	@ 0x6e
 8001ae4:	f7ff faae 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001ae8:	4b8c      	ldr	r3, [pc, #560]	@ (8001d1c <runSystem+0x490>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	461a      	mov	r2, r3
 8001aee:	2318      	movs	r3, #24
 8001af0:	9302      	str	r3, [sp, #8]
 8001af2:	2300      	movs	r3, #0
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001afa:	9300      	str	r3, [sp, #0]
 8001afc:	2302      	movs	r3, #2
 8001afe:	2164      	movs	r1, #100	@ 0x64
 8001b00:	2096      	movs	r0, #150	@ 0x96
 8001b02:	f7ff fa9f 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001b06:	4b86      	ldr	r3, [pc, #536]	@ (8001d20 <runSystem+0x494>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	2318      	movs	r3, #24
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	2300      	movs	r3, #0
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	2182      	movs	r1, #130	@ 0x82
 8001b1e:	2014      	movs	r0, #20
 8001b20:	f7ff fa90 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001b24:	4b7f      	ldr	r3, [pc, #508]	@ (8001d24 <runSystem+0x498>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2318      	movs	r3, #24
 8001b2c:	9302      	str	r3, [sp, #8]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	2302      	movs	r3, #2
 8001b3a:	2182      	movs	r1, #130	@ 0x82
 8001b3c:	2046      	movs	r0, #70	@ 0x46
 8001b3e:	f7ff fa81 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001b42:	4b79      	ldr	r3, [pc, #484]	@ (8001d28 <runSystem+0x49c>)
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	461a      	mov	r2, r3
 8001b48:	2318      	movs	r3, #24
 8001b4a:	9302      	str	r3, [sp, #8]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2302      	movs	r3, #2
 8001b58:	2182      	movs	r1, #130	@ 0x82
 8001b5a:	206e      	movs	r0, #110	@ 0x6e
 8001b5c:	f7ff fa72 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001b60:	4b72      	ldr	r3, [pc, #456]	@ (8001d2c <runSystem+0x4a0>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	461a      	mov	r2, r3
 8001b66:	2318      	movs	r3, #24
 8001b68:	9302      	str	r3, [sp, #8]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	2302      	movs	r3, #2
 8001b76:	2182      	movs	r1, #130	@ 0x82
 8001b78:	2096      	movs	r0, #150	@ 0x96
 8001b7a:	f7ff fa63 	bl	8001044 <lcd_ShowIntNum>
		if(isButtonUp()){
 8001b7e:	f7ff fe65 	bl	800184c <isButtonUp>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d00c      	beq.n	8001ba2 <runSystem+0x316>
			temp_time++;
 8001b88:	4b62      	ldr	r3, [pc, #392]	@ (8001d14 <runSystem+0x488>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b60      	ldr	r3, [pc, #384]	@ (8001d14 <runSystem+0x488>)
 8001b92:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 24){
 8001b94:	4b5f      	ldr	r3, [pc, #380]	@ (8001d14 <runSystem+0x488>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b17      	cmp	r3, #23
 8001b9a:	d902      	bls.n	8001ba2 <runSystem+0x316>
				temp_time = 0;
 8001b9c:	4b5d      	ldr	r3, [pc, #372]	@ (8001d14 <runSystem+0x488>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 8001ba2:	f7ff fe63 	bl	800186c <isButtonDown>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00c      	beq.n	8001bc6 <runSystem+0x33a>
			temp_time--;
 8001bac:	4b59      	ldr	r3, [pc, #356]	@ (8001d14 <runSystem+0x488>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b57      	ldr	r3, [pc, #348]	@ (8001d14 <runSystem+0x488>)
 8001bb6:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8001bb8:	4b56      	ldr	r3, [pc, #344]	@ (8001d14 <runSystem+0x488>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d102      	bne.n	8001bc6 <runSystem+0x33a>
				temp_time = 0;
 8001bc0:	4b54      	ldr	r3, [pc, #336]	@ (8001d14 <runSystem+0x488>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 8001bc6:	4b5a      	ldr	r3, [pc, #360]	@ (8001d30 <runSystem+0x4a4>)
 8001bc8:	88db      	ldrh	r3, [r3, #6]
 8001bca:	2b27      	cmp	r3, #39	@ 0x27
 8001bcc:	d916      	bls.n	8001bfc <runSystem+0x370>
 8001bce:	4b59      	ldr	r3, [pc, #356]	@ (8001d34 <runSystem+0x4a8>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10f      	bne.n	8001bfc <runSystem+0x370>
			temp_time++;
 8001bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8001d14 <runSystem+0x488>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b4b      	ldr	r3, [pc, #300]	@ (8001d14 <runSystem+0x488>)
 8001be6:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 24){
 8001be8:	4b4a      	ldr	r3, [pc, #296]	@ (8001d14 <runSystem+0x488>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b17      	cmp	r3, #23
 8001bee:	d902      	bls.n	8001bf6 <runSystem+0x36a>
				temp_time = 0;
 8001bf0:	4b48      	ldr	r3, [pc, #288]	@ (8001d14 <runSystem+0x488>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8001bf6:	4b50      	ldr	r3, [pc, #320]	@ (8001d38 <runSystem+0x4ac>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 8001bfc:	4b4c      	ldr	r3, [pc, #304]	@ (8001d30 <runSystem+0x4a4>)
 8001bfe:	89db      	ldrh	r3, [r3, #14]
 8001c00:	2b27      	cmp	r3, #39	@ 0x27
 8001c02:	d916      	bls.n	8001c32 <runSystem+0x3a6>
 8001c04:	4b4b      	ldr	r3, [pc, #300]	@ (8001d34 <runSystem+0x4a8>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10f      	bne.n	8001c32 <runSystem+0x3a6>
			temp_time--;
 8001c12:	4b40      	ldr	r3, [pc, #256]	@ (8001d14 <runSystem+0x488>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d14 <runSystem+0x488>)
 8001c1c:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d14 <runSystem+0x488>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d102      	bne.n	8001c2c <runSystem+0x3a0>
				temp_time = 0;
 8001c26:	4b3b      	ldr	r3, [pc, #236]	@ (8001d14 <runSystem+0x488>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8001c2c:	4b42      	ldr	r3, [pc, #264]	@ (8001d38 <runSystem+0x4ac>)
 8001c2e:	2201      	movs	r2, #1
 8001c30:	701a      	strb	r2, [r3, #0]
		}

		if(button_count[12] == 1){
 8001c32:	4b3f      	ldr	r3, [pc, #252]	@ (8001d30 <runSystem+0x4a4>)
 8001c34:	8b1b      	ldrh	r3, [r3, #24]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d115      	bne.n	8001c66 <runSystem+0x3da>
			ds3231_Write(ADDRESS_HOUR, temp_time);
 8001c3a:	4b36      	ldr	r3, [pc, #216]	@ (8001d14 <runSystem+0x488>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	2002      	movs	r0, #2
 8001c42:	f7fe fd49 	bl	80006d8 <ds3231_Write>
			count_blink = 0;
 8001c46:	4b3b      	ldr	r3, [pc, #236]	@ (8001d34 <runSystem+0x4a8>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8001c4c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d38 <runSystem+0x4ac>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_min;
 8001c52:	4b31      	ldr	r3, [pc, #196]	@ (8001d18 <runSystem+0x48c>)
 8001c54:	781a      	ldrb	r2, [r3, #0]
 8001c56:	4b2f      	ldr	r3, [pc, #188]	@ (8001d14 <runSystem+0x488>)
 8001c58:	701a      	strb	r2, [r3, #0]
			systemState = MODIFY_MIN;
 8001c5a:	4b38      	ldr	r3, [pc, #224]	@ (8001d3c <runSystem+0x4b0>)
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff f87b 	bl	8000d5c <lcd_Clear>
		}
		if(button_count[0] == 1){
 8001c66:	4b32      	ldr	r3, [pc, #200]	@ (8001d30 <runSystem+0x4a4>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	f040 8644 	bne.w	80028f8 <runSystem+0x106c>
			count_blink = 0;
 8001c70:	4b30      	ldr	r3, [pc, #192]	@ (8001d34 <runSystem+0x4a8>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8001c76:	4b30      	ldr	r3, [pc, #192]	@ (8001d38 <runSystem+0x4ac>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_min;
 8001c7c:	4b26      	ldr	r3, [pc, #152]	@ (8001d18 <runSystem+0x48c>)
 8001c7e:	781a      	ldrb	r2, [r3, #0]
 8001c80:	4b24      	ldr	r3, [pc, #144]	@ (8001d14 <runSystem+0x488>)
 8001c82:	701a      	strb	r2, [r3, #0]
			systemState = MODIFY_MIN;
 8001c84:	4b2d      	ldr	r3, [pc, #180]	@ (8001d3c <runSystem+0x4b0>)
 8001c86:	2203      	movs	r2, #3
 8001c88:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7ff f866 	bl	8000d5c <lcd_Clear>
		}
		break;
 8001c90:	f000 be32 	b.w	80028f8 <runSystem+0x106c>
	case MODIFY_MIN:
		lcd_ShowStr(20, 30, "Modify MIN", WHITE, BLUE, 24, 0);
 8001c94:	2300      	movs	r3, #0
 8001c96:	9302      	str	r3, [sp, #8]
 8001c98:	2318      	movs	r3, #24
 8001c9a:	9301      	str	r3, [sp, #4]
 8001c9c:	231f      	movs	r3, #31
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ca4:	4a26      	ldr	r2, [pc, #152]	@ (8001d40 <runSystem+0x4b4>)
 8001ca6:	211e      	movs	r1, #30
 8001ca8:	2014      	movs	r0, #20
 8001caa:	f7ff fbcd 	bl	8001448 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001cae:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <runSystem+0x490>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7fe fd0f 	bl	80006d8 <ds3231_Write>
		count_blink = count_blink + 1;
 8001cba:	4b1e      	ldr	r3, [pc, #120]	@ (8001d34 <runSystem+0x4a8>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <runSystem+0x4a8>)
 8001cc4:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d34 <runSystem+0x4a8>)
 8001cc8:	781a      	ldrb	r2, [r3, #0]
 8001cca:	4b1e      	ldr	r3, [pc, #120]	@ (8001d44 <runSystem+0x4b8>)
 8001ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8001cd0:	08d9      	lsrs	r1, r3, #3
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d106      	bne.n	8001cf0 <runSystem+0x464>
			blink_state ^= 1;
 8001ce2:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <runSystem+0x4ac>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	f083 0301 	eor.w	r3, r3, #1
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <runSystem+0x4ac>)
 8001cee:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 8001cf0:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <runSystem+0x4ac>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d129      	bne.n	8001d4c <runSystem+0x4c0>
			lcd_ShowStr(110, 100, "  ", GREEN, BLACK, 24, 0);
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9302      	str	r3, [sp, #8]
 8001cfc:	2318      	movs	r3, #24
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	2300      	movs	r3, #0
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d08:	4a0f      	ldr	r2, [pc, #60]	@ (8001d48 <runSystem+0x4bc>)
 8001d0a:	2164      	movs	r1, #100	@ 0x64
 8001d0c:	206e      	movs	r0, #110	@ 0x6e
 8001d0e:	f7ff fb9b 	bl	8001448 <lcd_ShowStr>
 8001d12:	e02a      	b.n	8001d6a <runSystem+0x4de>
 8001d14:	20000173 	.word	0x20000173
 8001d18:	200000ac 	.word	0x200000ac
 8001d1c:	200000ad 	.word	0x200000ad
 8001d20:	200000af 	.word	0x200000af
 8001d24:	200000ae 	.word	0x200000ae
 8001d28:	200000b0 	.word	0x200000b0
 8001d2c:	200000b1 	.word	0x200000b1
 8001d30:	20000080 	.word	0x20000080
 8001d34:	2000016e 	.word	0x2000016e
 8001d38:	2000016f 	.word	0x2000016f
 8001d3c:	20000168 	.word	0x20000168
 8001d40:	080085cc 	.word	0x080085cc
 8001d44:	cccccccd 	.word	0xcccccccd
 8001d48:	080085c8 	.word	0x080085c8
		}else{
			lcd_ShowIntNum(110, 100, temp_time, 2, GREEN, BLACK, 24);
 8001d4c:	4b99      	ldr	r3, [pc, #612]	@ (8001fb4 <runSystem+0x728>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	461a      	mov	r2, r3
 8001d52:	2318      	movs	r3, #24
 8001d54:	9302      	str	r3, [sp, #8]
 8001d56:	2300      	movs	r3, #0
 8001d58:	9301      	str	r3, [sp, #4]
 8001d5a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	2302      	movs	r3, #2
 8001d62:	2164      	movs	r1, #100	@ 0x64
 8001d64:	206e      	movs	r0, #110	@ 0x6e
 8001d66:	f7ff f96d 	bl	8001044 <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8001d6a:	4b93      	ldr	r3, [pc, #588]	@ (8001fb8 <runSystem+0x72c>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	2318      	movs	r3, #24
 8001d72:	9302      	str	r3, [sp, #8]
 8001d74:	2300      	movs	r3, #0
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d7c:	9300      	str	r3, [sp, #0]
 8001d7e:	2302      	movs	r3, #2
 8001d80:	2164      	movs	r1, #100	@ 0x64
 8001d82:	2046      	movs	r0, #70	@ 0x46
 8001d84:	f7ff f95e 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8001d88:	4b8c      	ldr	r3, [pc, #560]	@ (8001fbc <runSystem+0x730>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2318      	movs	r3, #24
 8001d90:	9302      	str	r3, [sp, #8]
 8001d92:	2300      	movs	r3, #0
 8001d94:	9301      	str	r3, [sp, #4]
 8001d96:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	2164      	movs	r1, #100	@ 0x64
 8001da0:	2096      	movs	r0, #150	@ 0x96
 8001da2:	f7ff f94f 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8001da6:	4b86      	ldr	r3, [pc, #536]	@ (8001fc0 <runSystem+0x734>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	2318      	movs	r3, #24
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	2300      	movs	r3, #0
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2302      	movs	r3, #2
 8001dbc:	2182      	movs	r1, #130	@ 0x82
 8001dbe:	2014      	movs	r0, #20
 8001dc0:	f7ff f940 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8001dc4:	4b7f      	ldr	r3, [pc, #508]	@ (8001fc4 <runSystem+0x738>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	2318      	movs	r3, #24
 8001dcc:	9302      	str	r3, [sp, #8]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2302      	movs	r3, #2
 8001dda:	2182      	movs	r1, #130	@ 0x82
 8001ddc:	2046      	movs	r0, #70	@ 0x46
 8001dde:	f7ff f931 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8001de2:	4b79      	ldr	r3, [pc, #484]	@ (8001fc8 <runSystem+0x73c>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	461a      	mov	r2, r3
 8001de8:	2318      	movs	r3, #24
 8001dea:	9302      	str	r3, [sp, #8]
 8001dec:	2300      	movs	r3, #0
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001df4:	9300      	str	r3, [sp, #0]
 8001df6:	2302      	movs	r3, #2
 8001df8:	2182      	movs	r1, #130	@ 0x82
 8001dfa:	206e      	movs	r0, #110	@ 0x6e
 8001dfc:	f7ff f922 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8001e00:	4b72      	ldr	r3, [pc, #456]	@ (8001fcc <runSystem+0x740>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	2318      	movs	r3, #24
 8001e08:	9302      	str	r3, [sp, #8]
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2302      	movs	r3, #2
 8001e16:	2182      	movs	r1, #130	@ 0x82
 8001e18:	2096      	movs	r0, #150	@ 0x96
 8001e1a:	f7ff f913 	bl	8001044 <lcd_ShowIntNum>
		if(isButtonUp()){
 8001e1e:	f7ff fd15 	bl	800184c <isButtonUp>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00c      	beq.n	8001e42 <runSystem+0x5b6>
			temp_time++;
 8001e28:	4b62      	ldr	r3, [pc, #392]	@ (8001fb4 <runSystem+0x728>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b60      	ldr	r3, [pc, #384]	@ (8001fb4 <runSystem+0x728>)
 8001e32:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8001e34:	4b5f      	ldr	r3, [pc, #380]	@ (8001fb4 <runSystem+0x728>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b3b      	cmp	r3, #59	@ 0x3b
 8001e3a:	d902      	bls.n	8001e42 <runSystem+0x5b6>
				temp_time = 0;
 8001e3c:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb4 <runSystem+0x728>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 8001e42:	f7ff fd13 	bl	800186c <isButtonDown>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00c      	beq.n	8001e66 <runSystem+0x5da>
			temp_time--;
 8001e4c:	4b59      	ldr	r3, [pc, #356]	@ (8001fb4 <runSystem+0x728>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	4b57      	ldr	r3, [pc, #348]	@ (8001fb4 <runSystem+0x728>)
 8001e56:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8001e58:	4b56      	ldr	r3, [pc, #344]	@ (8001fb4 <runSystem+0x728>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <runSystem+0x5da>
				temp_time = 0;
 8001e60:	4b54      	ldr	r3, [pc, #336]	@ (8001fb4 <runSystem+0x728>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 8001e66:	4b5a      	ldr	r3, [pc, #360]	@ (8001fd0 <runSystem+0x744>)
 8001e68:	88db      	ldrh	r3, [r3, #6]
 8001e6a:	2b27      	cmp	r3, #39	@ 0x27
 8001e6c:	d916      	bls.n	8001e9c <runSystem+0x610>
 8001e6e:	4b59      	ldr	r3, [pc, #356]	@ (8001fd4 <runSystem+0x748>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10f      	bne.n	8001e9c <runSystem+0x610>
			temp_time++;
 8001e7c:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb4 <runSystem+0x728>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb4 <runSystem+0x728>)
 8001e86:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8001e88:	4b4a      	ldr	r3, [pc, #296]	@ (8001fb4 <runSystem+0x728>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b3b      	cmp	r3, #59	@ 0x3b
 8001e8e:	d902      	bls.n	8001e96 <runSystem+0x60a>
				temp_time = 0;
 8001e90:	4b48      	ldr	r3, [pc, #288]	@ (8001fb4 <runSystem+0x728>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8001e96:	4b50      	ldr	r3, [pc, #320]	@ (8001fd8 <runSystem+0x74c>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 8001e9c:	4b4c      	ldr	r3, [pc, #304]	@ (8001fd0 <runSystem+0x744>)
 8001e9e:	89db      	ldrh	r3, [r3, #14]
 8001ea0:	2b27      	cmp	r3, #39	@ 0x27
 8001ea2:	d916      	bls.n	8001ed2 <runSystem+0x646>
 8001ea4:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd4 <runSystem+0x748>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	f003 0303 	and.w	r3, r3, #3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d10f      	bne.n	8001ed2 <runSystem+0x646>
			temp_time--;
 8001eb2:	4b40      	ldr	r3, [pc, #256]	@ (8001fb4 <runSystem+0x728>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b2da      	uxtb	r2, r3
 8001eba:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb4 <runSystem+0x728>)
 8001ebc:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb4 <runSystem+0x728>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d102      	bne.n	8001ecc <runSystem+0x640>
				temp_time = 0;
 8001ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb4 <runSystem+0x728>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8001ecc:	4b42      	ldr	r3, [pc, #264]	@ (8001fd8 <runSystem+0x74c>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 8001ed2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd0 <runSystem+0x744>)
 8001ed4:	8b1b      	ldrh	r3, [r3, #24]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d115      	bne.n	8001f06 <runSystem+0x67a>
			ds3231_Write(ADDRESS_MIN, temp_time);
 8001eda:	4b36      	ldr	r3, [pc, #216]	@ (8001fb4 <runSystem+0x728>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f7fe fbf9 	bl	80006d8 <ds3231_Write>
			count_blink = 0;
 8001ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd4 <runSystem+0x748>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8001eec:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd8 <runSystem+0x74c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_sec;
 8001ef2:	4b32      	ldr	r3, [pc, #200]	@ (8001fbc <runSystem+0x730>)
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb4 <runSystem+0x728>)
 8001ef8:	701a      	strb	r2, [r3, #0]
			systemState = MODIFY_SEC;
 8001efa:	4b38      	ldr	r3, [pc, #224]	@ (8001fdc <runSystem+0x750>)
 8001efc:	2204      	movs	r2, #4
 8001efe:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7fe ff2b 	bl	8000d5c <lcd_Clear>
		}
		if(button_count[0] == 1){
 8001f06:	4b32      	ldr	r3, [pc, #200]	@ (8001fd0 <runSystem+0x744>)
 8001f08:	881b      	ldrh	r3, [r3, #0]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	f040 84f6 	bne.w	80028fc <runSystem+0x1070>
			count_blink = 0;
 8001f10:	4b30      	ldr	r3, [pc, #192]	@ (8001fd4 <runSystem+0x748>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8001f16:	4b30      	ldr	r3, [pc, #192]	@ (8001fd8 <runSystem+0x74c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_sec;
 8001f1c:	4b27      	ldr	r3, [pc, #156]	@ (8001fbc <runSystem+0x730>)
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	4b24      	ldr	r3, [pc, #144]	@ (8001fb4 <runSystem+0x728>)
 8001f22:	701a      	strb	r2, [r3, #0]
			systemState = MODIFY_SEC;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	@ (8001fdc <runSystem+0x750>)
 8001f26:	2204      	movs	r2, #4
 8001f28:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f7fe ff16 	bl	8000d5c <lcd_Clear>
		}
		break;
 8001f30:	f000 bce4 	b.w	80028fc <runSystem+0x1070>
	case MODIFY_SEC:
		lcd_ShowStr(20, 30, "Modify SEC", WHITE, BLUE, 24, 0);
 8001f34:	2300      	movs	r3, #0
 8001f36:	9302      	str	r3, [sp, #8]
 8001f38:	2318      	movs	r3, #24
 8001f3a:	9301      	str	r3, [sp, #4]
 8001f3c:	231f      	movs	r3, #31
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f44:	4a26      	ldr	r2, [pc, #152]	@ (8001fe0 <runSystem+0x754>)
 8001f46:	211e      	movs	r1, #30
 8001f48:	2014      	movs	r0, #20
 8001f4a:	f7ff fa7d 	bl	8001448 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <runSystem+0x730>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	4619      	mov	r1, r3
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7fe fbbf 	bl	80006d8 <ds3231_Write>
		count_blink = count_blink + 1;
 8001f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd4 <runSystem+0x748>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd4 <runSystem+0x748>)
 8001f64:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 8001f66:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <runSystem+0x748>)
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe4 <runSystem+0x758>)
 8001f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8001f70:	08d9      	lsrs	r1, r3, #3
 8001f72:	460b      	mov	r3, r1
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <runSystem+0x704>
			blink_state ^= 1;
 8001f82:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <runSystem+0x74c>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	f083 0301 	eor.w	r3, r3, #1
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	4b12      	ldr	r3, [pc, #72]	@ (8001fd8 <runSystem+0x74c>)
 8001f8e:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 8001f90:	4b11      	ldr	r3, [pc, #68]	@ (8001fd8 <runSystem+0x74c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d129      	bne.n	8001fec <runSystem+0x760>
			lcd_ShowStr(150, 100, "  ", GREEN, BLACK, 24, 0);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9302      	str	r3, [sp, #8]
 8001f9c:	2318      	movs	r3, #24
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe8 <runSystem+0x75c>)
 8001faa:	2164      	movs	r1, #100	@ 0x64
 8001fac:	2096      	movs	r0, #150	@ 0x96
 8001fae:	f7ff fa4b 	bl	8001448 <lcd_ShowStr>
 8001fb2:	e02a      	b.n	800200a <runSystem+0x77e>
 8001fb4:	20000173 	.word	0x20000173
 8001fb8:	200000ab 	.word	0x200000ab
 8001fbc:	200000ad 	.word	0x200000ad
 8001fc0:	200000af 	.word	0x200000af
 8001fc4:	200000ae 	.word	0x200000ae
 8001fc8:	200000b0 	.word	0x200000b0
 8001fcc:	200000b1 	.word	0x200000b1
 8001fd0:	20000080 	.word	0x20000080
 8001fd4:	2000016e 	.word	0x2000016e
 8001fd8:	2000016f 	.word	0x2000016f
 8001fdc:	20000168 	.word	0x20000168
 8001fe0:	080085d8 	.word	0x080085d8
 8001fe4:	cccccccd 	.word	0xcccccccd
 8001fe8:	080085c8 	.word	0x080085c8
		}else{
			lcd_ShowIntNum(150, 100, temp_time, 2, GREEN, BLACK, 24);
 8001fec:	4b99      	ldr	r3, [pc, #612]	@ (8002254 <runSystem+0x9c8>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	2318      	movs	r3, #24
 8001ff4:	9302      	str	r3, [sp, #8]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	9301      	str	r3, [sp, #4]
 8001ffa:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	2302      	movs	r3, #2
 8002002:	2164      	movs	r1, #100	@ 0x64
 8002004:	2096      	movs	r0, #150	@ 0x96
 8002006:	f7ff f81d 	bl	8001044 <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 800200a:	4b93      	ldr	r3, [pc, #588]	@ (8002258 <runSystem+0x9cc>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	2318      	movs	r3, #24
 8002012:	9302      	str	r3, [sp, #8]
 8002014:	2300      	movs	r3, #0
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800201c:	9300      	str	r3, [sp, #0]
 800201e:	2302      	movs	r3, #2
 8002020:	2164      	movs	r1, #100	@ 0x64
 8002022:	2046      	movs	r0, #70	@ 0x46
 8002024:	f7ff f80e 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8002028:	4b8c      	ldr	r3, [pc, #560]	@ (800225c <runSystem+0x9d0>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	461a      	mov	r2, r3
 800202e:	2318      	movs	r3, #24
 8002030:	9302      	str	r3, [sp, #8]
 8002032:	2300      	movs	r3, #0
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	2302      	movs	r3, #2
 800203e:	2164      	movs	r1, #100	@ 0x64
 8002040:	206e      	movs	r0, #110	@ 0x6e
 8002042:	f7fe ffff 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8002046:	4b86      	ldr	r3, [pc, #536]	@ (8002260 <runSystem+0x9d4>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	2318      	movs	r3, #24
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	2300      	movs	r3, #0
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	2302      	movs	r3, #2
 800205c:	2182      	movs	r1, #130	@ 0x82
 800205e:	2014      	movs	r0, #20
 8002060:	f7fe fff0 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8002064:	4b7f      	ldr	r3, [pc, #508]	@ (8002264 <runSystem+0x9d8>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	2318      	movs	r3, #24
 800206c:	9302      	str	r3, [sp, #8]
 800206e:	2300      	movs	r3, #0
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2302      	movs	r3, #2
 800207a:	2182      	movs	r1, #130	@ 0x82
 800207c:	2046      	movs	r0, #70	@ 0x46
 800207e:	f7fe ffe1 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8002082:	4b79      	ldr	r3, [pc, #484]	@ (8002268 <runSystem+0x9dc>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	2318      	movs	r3, #24
 800208a:	9302      	str	r3, [sp, #8]
 800208c:	2300      	movs	r3, #0
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	2302      	movs	r3, #2
 8002098:	2182      	movs	r1, #130	@ 0x82
 800209a:	206e      	movs	r0, #110	@ 0x6e
 800209c:	f7fe ffd2 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80020a0:	4b72      	ldr	r3, [pc, #456]	@ (800226c <runSystem+0x9e0>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	461a      	mov	r2, r3
 80020a6:	2318      	movs	r3, #24
 80020a8:	9302      	str	r3, [sp, #8]
 80020aa:	2300      	movs	r3, #0
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2302      	movs	r3, #2
 80020b6:	2182      	movs	r1, #130	@ 0x82
 80020b8:	2096      	movs	r0, #150	@ 0x96
 80020ba:	f7fe ffc3 	bl	8001044 <lcd_ShowIntNum>
		if(isButtonUp()){
 80020be:	f7ff fbc5 	bl	800184c <isButtonUp>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00c      	beq.n	80020e2 <runSystem+0x856>
			temp_time++;
 80020c8:	4b62      	ldr	r3, [pc, #392]	@ (8002254 <runSystem+0x9c8>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	3301      	adds	r3, #1
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b60      	ldr	r3, [pc, #384]	@ (8002254 <runSystem+0x9c8>)
 80020d2:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 80020d4:	4b5f      	ldr	r3, [pc, #380]	@ (8002254 <runSystem+0x9c8>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b3b      	cmp	r3, #59	@ 0x3b
 80020da:	d902      	bls.n	80020e2 <runSystem+0x856>
				temp_time = 0;
 80020dc:	4b5d      	ldr	r3, [pc, #372]	@ (8002254 <runSystem+0x9c8>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 80020e2:	f7ff fbc3 	bl	800186c <isButtonDown>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00c      	beq.n	8002106 <runSystem+0x87a>
			temp_time--;
 80020ec:	4b59      	ldr	r3, [pc, #356]	@ (8002254 <runSystem+0x9c8>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	4b57      	ldr	r3, [pc, #348]	@ (8002254 <runSystem+0x9c8>)
 80020f6:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 80020f8:	4b56      	ldr	r3, [pc, #344]	@ (8002254 <runSystem+0x9c8>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <runSystem+0x87a>
				temp_time = 0;
 8002100:	4b54      	ldr	r3, [pc, #336]	@ (8002254 <runSystem+0x9c8>)
 8002102:	2200      	movs	r2, #0
 8002104:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 8002106:	4b5a      	ldr	r3, [pc, #360]	@ (8002270 <runSystem+0x9e4>)
 8002108:	88db      	ldrh	r3, [r3, #6]
 800210a:	2b27      	cmp	r3, #39	@ 0x27
 800210c:	d916      	bls.n	800213c <runSystem+0x8b0>
 800210e:	4b59      	ldr	r3, [pc, #356]	@ (8002274 <runSystem+0x9e8>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10f      	bne.n	800213c <runSystem+0x8b0>
			temp_time++;
 800211c:	4b4d      	ldr	r3, [pc, #308]	@ (8002254 <runSystem+0x9c8>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b4b      	ldr	r3, [pc, #300]	@ (8002254 <runSystem+0x9c8>)
 8002126:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8002128:	4b4a      	ldr	r3, [pc, #296]	@ (8002254 <runSystem+0x9c8>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b3b      	cmp	r3, #59	@ 0x3b
 800212e:	d902      	bls.n	8002136 <runSystem+0x8aa>
				temp_time = 0;
 8002130:	4b48      	ldr	r3, [pc, #288]	@ (8002254 <runSystem+0x9c8>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8002136:	4b50      	ldr	r3, [pc, #320]	@ (8002278 <runSystem+0x9ec>)
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 800213c:	4b4c      	ldr	r3, [pc, #304]	@ (8002270 <runSystem+0x9e4>)
 800213e:	89db      	ldrh	r3, [r3, #14]
 8002140:	2b27      	cmp	r3, #39	@ 0x27
 8002142:	d916      	bls.n	8002172 <runSystem+0x8e6>
 8002144:	4b4b      	ldr	r3, [pc, #300]	@ (8002274 <runSystem+0x9e8>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	f003 0303 	and.w	r3, r3, #3
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10f      	bne.n	8002172 <runSystem+0x8e6>
			temp_time--;
 8002152:	4b40      	ldr	r3, [pc, #256]	@ (8002254 <runSystem+0x9c8>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	3b01      	subs	r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	4b3e      	ldr	r3, [pc, #248]	@ (8002254 <runSystem+0x9c8>)
 800215c:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 800215e:	4b3d      	ldr	r3, [pc, #244]	@ (8002254 <runSystem+0x9c8>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d102      	bne.n	800216c <runSystem+0x8e0>
				temp_time = 0;
 8002166:	4b3b      	ldr	r3, [pc, #236]	@ (8002254 <runSystem+0x9c8>)
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 800216c:	4b42      	ldr	r3, [pc, #264]	@ (8002278 <runSystem+0x9ec>)
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 8002172:	4b3f      	ldr	r3, [pc, #252]	@ (8002270 <runSystem+0x9e4>)
 8002174:	8b1b      	ldrh	r3, [r3, #24]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d115      	bne.n	80021a6 <runSystem+0x91a>
			ds3231_Write(ADDRESS_SEC, temp_time);
 800217a:	4b36      	ldr	r3, [pc, #216]	@ (8002254 <runSystem+0x9c8>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	4619      	mov	r1, r3
 8002180:	2000      	movs	r0, #0
 8002182:	f7fe faa9 	bl	80006d8 <ds3231_Write>
			count_blink = 0;
 8002186:	4b3b      	ldr	r3, [pc, #236]	@ (8002274 <runSystem+0x9e8>)
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 800218c:	4b3a      	ldr	r3, [pc, #232]	@ (8002278 <runSystem+0x9ec>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_hours;
 8002192:	4b31      	ldr	r3, [pc, #196]	@ (8002258 <runSystem+0x9cc>)
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	4b2f      	ldr	r3, [pc, #188]	@ (8002254 <runSystem+0x9c8>)
 8002198:	701a      	strb	r2, [r3, #0]
			systemState = ALARM_HOUR;
 800219a:	4b38      	ldr	r3, [pc, #224]	@ (800227c <runSystem+0x9f0>)
 800219c:	2205      	movs	r2, #5
 800219e:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7fe fddb 	bl	8000d5c <lcd_Clear>
		}
		if(button_count[0] == 1){
 80021a6:	4b32      	ldr	r3, [pc, #200]	@ (8002270 <runSystem+0x9e4>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	f040 83a8 	bne.w	8002900 <runSystem+0x1074>
			count_blink = 0;
 80021b0:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <runSystem+0x9e8>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 80021b6:	4b30      	ldr	r3, [pc, #192]	@ (8002278 <runSystem+0x9ec>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_hours;
 80021bc:	4b26      	ldr	r3, [pc, #152]	@ (8002258 <runSystem+0x9cc>)
 80021be:	781a      	ldrb	r2, [r3, #0]
 80021c0:	4b24      	ldr	r3, [pc, #144]	@ (8002254 <runSystem+0x9c8>)
 80021c2:	701a      	strb	r2, [r3, #0]
			systemState = ALARM_HOUR;
 80021c4:	4b2d      	ldr	r3, [pc, #180]	@ (800227c <runSystem+0x9f0>)
 80021c6:	2205      	movs	r2, #5
 80021c8:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7fe fdc6 	bl	8000d5c <lcd_Clear>
		}
		break;
 80021d0:	e396      	b.n	8002900 <runSystem+0x1074>
	case ALARM_HOUR:
		lcd_ShowStr(20, 30, "set Alarm - HOUR", WHITE, BLUE, 24, 0);
 80021d2:	2300      	movs	r3, #0
 80021d4:	9302      	str	r3, [sp, #8]
 80021d6:	2318      	movs	r3, #24
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	231f      	movs	r3, #31
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021e2:	4a27      	ldr	r2, [pc, #156]	@ (8002280 <runSystem+0x9f4>)
 80021e4:	211e      	movs	r1, #30
 80021e6:	2014      	movs	r0, #20
 80021e8:	f7ff f92e 	bl	8001448 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 80021ec:	4b25      	ldr	r3, [pc, #148]	@ (8002284 <runSystem+0x9f8>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7fe fa70 	bl	80006d8 <ds3231_Write>
		count_blink = count_blink + 1;
 80021f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002274 <runSystem+0x9e8>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b1c      	ldr	r3, [pc, #112]	@ (8002274 <runSystem+0x9e8>)
 8002202:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 8002204:	4b1b      	ldr	r3, [pc, #108]	@ (8002274 <runSystem+0x9e8>)
 8002206:	781a      	ldrb	r2, [r3, #0]
 8002208:	4b1f      	ldr	r3, [pc, #124]	@ (8002288 <runSystem+0x9fc>)
 800220a:	fba3 1302 	umull	r1, r3, r3, r2
 800220e:	08d9      	lsrs	r1, r3, #3
 8002210:	460b      	mov	r3, r1
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <runSystem+0x9a2>
			blink_state ^= 1;
 8002220:	4b15      	ldr	r3, [pc, #84]	@ (8002278 <runSystem+0x9ec>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	f083 0301 	eor.w	r3, r3, #1
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <runSystem+0x9ec>)
 800222c:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 800222e:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <runSystem+0x9ec>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d12c      	bne.n	8002290 <runSystem+0xa04>
			lcd_ShowStr(70, 100, "  ", GREEN, BLACK, 24, 0);
 8002236:	2300      	movs	r3, #0
 8002238:	9302      	str	r3, [sp, #8]
 800223a:	2318      	movs	r3, #24
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	2300      	movs	r3, #0
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002246:	4a11      	ldr	r2, [pc, #68]	@ (800228c <runSystem+0xa00>)
 8002248:	2164      	movs	r1, #100	@ 0x64
 800224a:	2046      	movs	r0, #70	@ 0x46
 800224c:	f7ff f8fc 	bl	8001448 <lcd_ShowStr>
 8002250:	e02d      	b.n	80022ae <runSystem+0xa22>
 8002252:	bf00      	nop
 8002254:	20000173 	.word	0x20000173
 8002258:	200000ab 	.word	0x200000ab
 800225c:	200000ac 	.word	0x200000ac
 8002260:	200000af 	.word	0x200000af
 8002264:	200000ae 	.word	0x200000ae
 8002268:	200000b0 	.word	0x200000b0
 800226c:	200000b1 	.word	0x200000b1
 8002270:	20000080 	.word	0x20000080
 8002274:	2000016e 	.word	0x2000016e
 8002278:	2000016f 	.word	0x2000016f
 800227c:	20000168 	.word	0x20000168
 8002280:	080085e4 	.word	0x080085e4
 8002284:	200000ad 	.word	0x200000ad
 8002288:	cccccccd 	.word	0xcccccccd
 800228c:	080085c8 	.word	0x080085c8
		}else{
			lcd_ShowIntNum(70, 100, temp_time, 2, GREEN, BLACK, 24);
 8002290:	4b99      	ldr	r3, [pc, #612]	@ (80024f8 <runSystem+0xc6c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	2318      	movs	r3, #24
 8002298:	9302      	str	r3, [sp, #8]
 800229a:	2300      	movs	r3, #0
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	2302      	movs	r3, #2
 80022a6:	2164      	movs	r1, #100	@ 0x64
 80022a8:	2046      	movs	r0, #70	@ 0x46
 80022aa:	f7fe fecb 	bl	8001044 <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 80022ae:	4b93      	ldr	r3, [pc, #588]	@ (80024fc <runSystem+0xc70>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	2318      	movs	r3, #24
 80022b6:	9302      	str	r3, [sp, #8]
 80022b8:	2300      	movs	r3, #0
 80022ba:	9301      	str	r3, [sp, #4]
 80022bc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2302      	movs	r3, #2
 80022c4:	2164      	movs	r1, #100	@ 0x64
 80022c6:	206e      	movs	r0, #110	@ 0x6e
 80022c8:	f7fe febc 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 80022cc:	4b8c      	ldr	r3, [pc, #560]	@ (8002500 <runSystem+0xc74>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	2318      	movs	r3, #24
 80022d4:	9302      	str	r3, [sp, #8]
 80022d6:	2300      	movs	r3, #0
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	2302      	movs	r3, #2
 80022e2:	2164      	movs	r1, #100	@ 0x64
 80022e4:	2096      	movs	r0, #150	@ 0x96
 80022e6:	f7fe fead 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 80022ea:	4b86      	ldr	r3, [pc, #536]	@ (8002504 <runSystem+0xc78>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	2318      	movs	r3, #24
 80022f2:	9302      	str	r3, [sp, #8]
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	2302      	movs	r3, #2
 8002300:	2182      	movs	r1, #130	@ 0x82
 8002302:	2014      	movs	r0, #20
 8002304:	f7fe fe9e 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 8002308:	4b7f      	ldr	r3, [pc, #508]	@ (8002508 <runSystem+0xc7c>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	461a      	mov	r2, r3
 800230e:	2318      	movs	r3, #24
 8002310:	9302      	str	r3, [sp, #8]
 8002312:	2300      	movs	r3, #0
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2302      	movs	r3, #2
 800231e:	2182      	movs	r1, #130	@ 0x82
 8002320:	2046      	movs	r0, #70	@ 0x46
 8002322:	f7fe fe8f 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 8002326:	4b79      	ldr	r3, [pc, #484]	@ (800250c <runSystem+0xc80>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	2318      	movs	r3, #24
 800232e:	9302      	str	r3, [sp, #8]
 8002330:	2300      	movs	r3, #0
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2302      	movs	r3, #2
 800233c:	2182      	movs	r1, #130	@ 0x82
 800233e:	206e      	movs	r0, #110	@ 0x6e
 8002340:	f7fe fe80 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 8002344:	4b72      	ldr	r3, [pc, #456]	@ (8002510 <runSystem+0xc84>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	2318      	movs	r3, #24
 800234c:	9302      	str	r3, [sp, #8]
 800234e:	2300      	movs	r3, #0
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2302      	movs	r3, #2
 800235a:	2182      	movs	r1, #130	@ 0x82
 800235c:	2096      	movs	r0, #150	@ 0x96
 800235e:	f7fe fe71 	bl	8001044 <lcd_ShowIntNum>
		if(isButtonUp()){
 8002362:	f7ff fa73 	bl	800184c <isButtonUp>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00c      	beq.n	8002386 <runSystem+0xafa>
			temp_time++;
 800236c:	4b62      	ldr	r3, [pc, #392]	@ (80024f8 <runSystem+0xc6c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b60      	ldr	r3, [pc, #384]	@ (80024f8 <runSystem+0xc6c>)
 8002376:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 24){
 8002378:	4b5f      	ldr	r3, [pc, #380]	@ (80024f8 <runSystem+0xc6c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b17      	cmp	r3, #23
 800237e:	d902      	bls.n	8002386 <runSystem+0xafa>
				temp_time = 0;
 8002380:	4b5d      	ldr	r3, [pc, #372]	@ (80024f8 <runSystem+0xc6c>)
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 8002386:	f7ff fa71 	bl	800186c <isButtonDown>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00c      	beq.n	80023aa <runSystem+0xb1e>
			temp_time--;
 8002390:	4b59      	ldr	r3, [pc, #356]	@ (80024f8 <runSystem+0xc6c>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	3b01      	subs	r3, #1
 8002396:	b2da      	uxtb	r2, r3
 8002398:	4b57      	ldr	r3, [pc, #348]	@ (80024f8 <runSystem+0xc6c>)
 800239a:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 800239c:	4b56      	ldr	r3, [pc, #344]	@ (80024f8 <runSystem+0xc6c>)
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <runSystem+0xb1e>
				temp_time = 0;
 80023a4:	4b54      	ldr	r3, [pc, #336]	@ (80024f8 <runSystem+0xc6c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 80023aa:	4b5a      	ldr	r3, [pc, #360]	@ (8002514 <runSystem+0xc88>)
 80023ac:	88db      	ldrh	r3, [r3, #6]
 80023ae:	2b27      	cmp	r3, #39	@ 0x27
 80023b0:	d916      	bls.n	80023e0 <runSystem+0xb54>
 80023b2:	4b59      	ldr	r3, [pc, #356]	@ (8002518 <runSystem+0xc8c>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10f      	bne.n	80023e0 <runSystem+0xb54>
			temp_time++;
 80023c0:	4b4d      	ldr	r3, [pc, #308]	@ (80024f8 <runSystem+0xc6c>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b4b      	ldr	r3, [pc, #300]	@ (80024f8 <runSystem+0xc6c>)
 80023ca:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 24){
 80023cc:	4b4a      	ldr	r3, [pc, #296]	@ (80024f8 <runSystem+0xc6c>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b17      	cmp	r3, #23
 80023d2:	d902      	bls.n	80023da <runSystem+0xb4e>
				temp_time = 0;
 80023d4:	4b48      	ldr	r3, [pc, #288]	@ (80024f8 <runSystem+0xc6c>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 80023da:	4b50      	ldr	r3, [pc, #320]	@ (800251c <runSystem+0xc90>)
 80023dc:	2201      	movs	r2, #1
 80023de:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 80023e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002514 <runSystem+0xc88>)
 80023e2:	89db      	ldrh	r3, [r3, #14]
 80023e4:	2b27      	cmp	r3, #39	@ 0x27
 80023e6:	d916      	bls.n	8002416 <runSystem+0xb8a>
 80023e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002518 <runSystem+0xc8c>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	f003 0303 	and.w	r3, r3, #3
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d10f      	bne.n	8002416 <runSystem+0xb8a>
			temp_time--;
 80023f6:	4b40      	ldr	r3, [pc, #256]	@ (80024f8 <runSystem+0xc6c>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4b3e      	ldr	r3, [pc, #248]	@ (80024f8 <runSystem+0xc6c>)
 8002400:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8002402:	4b3d      	ldr	r3, [pc, #244]	@ (80024f8 <runSystem+0xc6c>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <runSystem+0xb84>
				temp_time = 0;
 800240a:	4b3b      	ldr	r3, [pc, #236]	@ (80024f8 <runSystem+0xc6c>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8002410:	4b42      	ldr	r3, [pc, #264]	@ (800251c <runSystem+0xc90>)
 8002412:	2201      	movs	r2, #1
 8002414:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 8002416:	4b3f      	ldr	r3, [pc, #252]	@ (8002514 <runSystem+0xc88>)
 8002418:	8b1b      	ldrh	r3, [r3, #24]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d116      	bne.n	800244c <runSystem+0xbc0>
			alarm_hour = temp_time;
 800241e:	4b36      	ldr	r3, [pc, #216]	@ (80024f8 <runSystem+0xc6c>)
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	4b3f      	ldr	r3, [pc, #252]	@ (8002520 <runSystem+0xc94>)
 8002424:	701a      	strb	r2, [r3, #0]
			hour_alarm_flag = 1;
 8002426:	4b3f      	ldr	r3, [pc, #252]	@ (8002524 <runSystem+0xc98>)
 8002428:	2201      	movs	r2, #1
 800242a:	701a      	strb	r2, [r3, #0]
			count_blink = 0;
 800242c:	4b3a      	ldr	r3, [pc, #232]	@ (8002518 <runSystem+0xc8c>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 8002432:	4b3a      	ldr	r3, [pc, #232]	@ (800251c <runSystem+0xc90>)
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_min;
 8002438:	4b30      	ldr	r3, [pc, #192]	@ (80024fc <runSystem+0xc70>)
 800243a:	781a      	ldrb	r2, [r3, #0]
 800243c:	4b2e      	ldr	r3, [pc, #184]	@ (80024f8 <runSystem+0xc6c>)
 800243e:	701a      	strb	r2, [r3, #0]
			systemState = ALARM_MIN;
 8002440:	4b39      	ldr	r3, [pc, #228]	@ (8002528 <runSystem+0xc9c>)
 8002442:	2206      	movs	r2, #6
 8002444:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8002446:	2000      	movs	r0, #0
 8002448:	f7fe fc88 	bl	8000d5c <lcd_Clear>
		}
		if(button_count[0] == 1){
 800244c:	4b31      	ldr	r3, [pc, #196]	@ (8002514 <runSystem+0xc88>)
 800244e:	881b      	ldrh	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	f040 8257 	bne.w	8002904 <runSystem+0x1078>
			count_blink = 0;
 8002456:	4b30      	ldr	r3, [pc, #192]	@ (8002518 <runSystem+0xc8c>)
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 800245c:	4b2f      	ldr	r3, [pc, #188]	@ (800251c <runSystem+0xc90>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
			temp_time = ds3231_min;
 8002462:	4b26      	ldr	r3, [pc, #152]	@ (80024fc <runSystem+0xc70>)
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	4b24      	ldr	r3, [pc, #144]	@ (80024f8 <runSystem+0xc6c>)
 8002468:	701a      	strb	r2, [r3, #0]
			systemState = ALARM_MIN;
 800246a:	4b2f      	ldr	r3, [pc, #188]	@ (8002528 <runSystem+0xc9c>)
 800246c:	2206      	movs	r2, #6
 800246e:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8002470:	2000      	movs	r0, #0
 8002472:	f7fe fc73 	bl	8000d5c <lcd_Clear>
		}
		break;
 8002476:	e245      	b.n	8002904 <runSystem+0x1078>
	case ALARM_MIN:
		lcd_ShowStr(20, 30, "set Alarm - MIN", WHITE, BLUE, 24, 0);
 8002478:	2300      	movs	r3, #0
 800247a:	9302      	str	r3, [sp, #8]
 800247c:	2318      	movs	r3, #24
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	231f      	movs	r3, #31
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002488:	4a28      	ldr	r2, [pc, #160]	@ (800252c <runSystem+0xca0>)
 800248a:	211e      	movs	r1, #30
 800248c:	2014      	movs	r0, #20
 800248e:	f7fe ffdb 	bl	8001448 <lcd_ShowStr>
		ds3231_Write(ADDRESS_SEC, ds3231_sec);
 8002492:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <runSystem+0xc74>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4619      	mov	r1, r3
 8002498:	2000      	movs	r0, #0
 800249a:	f7fe f91d 	bl	80006d8 <ds3231_Write>
		count_blink = count_blink + 1;
 800249e:	4b1e      	ldr	r3, [pc, #120]	@ (8002518 <runSystem+0xc8c>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002518 <runSystem+0xc8c>)
 80024a8:	701a      	strb	r2, [r3, #0]
		if(count_blink % 10 == 0){
 80024aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <runSystem+0xc8c>)
 80024ac:	781a      	ldrb	r2, [r3, #0]
 80024ae:	4b20      	ldr	r3, [pc, #128]	@ (8002530 <runSystem+0xca4>)
 80024b0:	fba3 1302 	umull	r1, r3, r3, r2
 80024b4:	08d9      	lsrs	r1, r3, #3
 80024b6:	460b      	mov	r3, r1
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <runSystem+0xc48>
			blink_state ^= 1;
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <runSystem+0xc90>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	f083 0301 	eor.w	r3, r3, #1
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b12      	ldr	r3, [pc, #72]	@ (800251c <runSystem+0xc90>)
 80024d2:	701a      	strb	r2, [r3, #0]
		}
		if(blink_state == 0){
 80024d4:	4b11      	ldr	r3, [pc, #68]	@ (800251c <runSystem+0xc90>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d12d      	bne.n	8002538 <runSystem+0xcac>
			lcd_ShowStr(110, 100, "  ", GREEN, BLACK, 24, 0);
 80024dc:	2300      	movs	r3, #0
 80024de:	9302      	str	r3, [sp, #8]
 80024e0:	2318      	movs	r3, #24
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	2300      	movs	r3, #0
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80024ec:	4a11      	ldr	r2, [pc, #68]	@ (8002534 <runSystem+0xca8>)
 80024ee:	2164      	movs	r1, #100	@ 0x64
 80024f0:	206e      	movs	r0, #110	@ 0x6e
 80024f2:	f7fe ffa9 	bl	8001448 <lcd_ShowStr>
 80024f6:	e02e      	b.n	8002556 <runSystem+0xcca>
 80024f8:	20000173 	.word	0x20000173
 80024fc:	200000ac 	.word	0x200000ac
 8002500:	200000ad 	.word	0x200000ad
 8002504:	200000af 	.word	0x200000af
 8002508:	200000ae 	.word	0x200000ae
 800250c:	200000b0 	.word	0x200000b0
 8002510:	200000b1 	.word	0x200000b1
 8002514:	20000080 	.word	0x20000080
 8002518:	2000016e 	.word	0x2000016e
 800251c:	2000016f 	.word	0x2000016f
 8002520:	2000016c 	.word	0x2000016c
 8002524:	20000171 	.word	0x20000171
 8002528:	20000168 	.word	0x20000168
 800252c:	080085f8 	.word	0x080085f8
 8002530:	cccccccd 	.word	0xcccccccd
 8002534:	080085c8 	.word	0x080085c8
		}else{
			lcd_ShowIntNum(110, 100, temp_time, 2, GREEN, BLACK, 24);
 8002538:	4ba1      	ldr	r3, [pc, #644]	@ (80027c0 <runSystem+0xf34>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	461a      	mov	r2, r3
 800253e:	2318      	movs	r3, #24
 8002540:	9302      	str	r3, [sp, #8]
 8002542:	2300      	movs	r3, #0
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2302      	movs	r3, #2
 800254e:	2164      	movs	r1, #100	@ 0x64
 8002550:	206e      	movs	r0, #110	@ 0x6e
 8002552:	f7fe fd77 	bl	8001044 <lcd_ShowIntNum>
		}
		lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 8002556:	4b9b      	ldr	r3, [pc, #620]	@ (80027c4 <runSystem+0xf38>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	461a      	mov	r2, r3
 800255c:	2318      	movs	r3, #24
 800255e:	9302      	str	r3, [sp, #8]
 8002560:	2300      	movs	r3, #0
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2302      	movs	r3, #2
 800256c:	2164      	movs	r1, #100	@ 0x64
 800256e:	2046      	movs	r0, #70	@ 0x46
 8002570:	f7fe fd68 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8002574:	4b94      	ldr	r3, [pc, #592]	@ (80027c8 <runSystem+0xf3c>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	461a      	mov	r2, r3
 800257a:	2318      	movs	r3, #24
 800257c:	9302      	str	r3, [sp, #8]
 800257e:	2300      	movs	r3, #0
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	2302      	movs	r3, #2
 800258a:	2164      	movs	r1, #100	@ 0x64
 800258c:	2096      	movs	r0, #150	@ 0x96
 800258e:	f7fe fd59 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8002592:	4b8e      	ldr	r3, [pc, #568]	@ (80027cc <runSystem+0xf40>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	2318      	movs	r3, #24
 800259a:	9302      	str	r3, [sp, #8]
 800259c:	2300      	movs	r3, #0
 800259e:	9301      	str	r3, [sp, #4]
 80025a0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	2302      	movs	r3, #2
 80025a8:	2182      	movs	r1, #130	@ 0x82
 80025aa:	2014      	movs	r0, #20
 80025ac:	f7fe fd4a 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 80025b0:	4b87      	ldr	r3, [pc, #540]	@ (80027d0 <runSystem+0xf44>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	2318      	movs	r3, #24
 80025b8:	9302      	str	r3, [sp, #8]
 80025ba:	2300      	movs	r3, #0
 80025bc:	9301      	str	r3, [sp, #4]
 80025be:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2302      	movs	r3, #2
 80025c6:	2182      	movs	r1, #130	@ 0x82
 80025c8:	2046      	movs	r0, #70	@ 0x46
 80025ca:	f7fe fd3b 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 80025ce:	4b81      	ldr	r3, [pc, #516]	@ (80027d4 <runSystem+0xf48>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	461a      	mov	r2, r3
 80025d4:	2318      	movs	r3, #24
 80025d6:	9302      	str	r3, [sp, #8]
 80025d8:	2300      	movs	r3, #0
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2302      	movs	r3, #2
 80025e4:	2182      	movs	r1, #130	@ 0x82
 80025e6:	206e      	movs	r0, #110	@ 0x6e
 80025e8:	f7fe fd2c 	bl	8001044 <lcd_ShowIntNum>
		lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80025ec:	4b7a      	ldr	r3, [pc, #488]	@ (80027d8 <runSystem+0xf4c>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	461a      	mov	r2, r3
 80025f2:	2318      	movs	r3, #24
 80025f4:	9302      	str	r3, [sp, #8]
 80025f6:	2300      	movs	r3, #0
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80025fe:	9300      	str	r3, [sp, #0]
 8002600:	2302      	movs	r3, #2
 8002602:	2182      	movs	r1, #130	@ 0x82
 8002604:	2096      	movs	r0, #150	@ 0x96
 8002606:	f7fe fd1d 	bl	8001044 <lcd_ShowIntNum>
		if(isButtonUp()){
 800260a:	f7ff f91f 	bl	800184c <isButtonUp>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00c      	beq.n	800262e <runSystem+0xda2>
			temp_time++;
 8002614:	4b6a      	ldr	r3, [pc, #424]	@ (80027c0 <runSystem+0xf34>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	3301      	adds	r3, #1
 800261a:	b2da      	uxtb	r2, r3
 800261c:	4b68      	ldr	r3, [pc, #416]	@ (80027c0 <runSystem+0xf34>)
 800261e:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8002620:	4b67      	ldr	r3, [pc, #412]	@ (80027c0 <runSystem+0xf34>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b3b      	cmp	r3, #59	@ 0x3b
 8002626:	d902      	bls.n	800262e <runSystem+0xda2>
				temp_time = 0;
 8002628:	4b65      	ldr	r3, [pc, #404]	@ (80027c0 <runSystem+0xf34>)
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
			}
		}
		if(isButtonDown()){
 800262e:	f7ff f91d 	bl	800186c <isButtonDown>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00c      	beq.n	8002652 <runSystem+0xdc6>
			temp_time--;
 8002638:	4b61      	ldr	r3, [pc, #388]	@ (80027c0 <runSystem+0xf34>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	3b01      	subs	r3, #1
 800263e:	b2da      	uxtb	r2, r3
 8002640:	4b5f      	ldr	r3, [pc, #380]	@ (80027c0 <runSystem+0xf34>)
 8002642:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 8002644:	4b5e      	ldr	r3, [pc, #376]	@ (80027c0 <runSystem+0xf34>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d102      	bne.n	8002652 <runSystem+0xdc6>
				temp_time = 0;
 800264c:	4b5c      	ldr	r3, [pc, #368]	@ (80027c0 <runSystem+0xf34>)
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
			}
		}
		if(button_count[3] >= 40 && count_blink % 4 == 0){
 8002652:	4b62      	ldr	r3, [pc, #392]	@ (80027dc <runSystem+0xf50>)
 8002654:	88db      	ldrh	r3, [r3, #6]
 8002656:	2b27      	cmp	r3, #39	@ 0x27
 8002658:	d916      	bls.n	8002688 <runSystem+0xdfc>
 800265a:	4b61      	ldr	r3, [pc, #388]	@ (80027e0 <runSystem+0xf54>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d10f      	bne.n	8002688 <runSystem+0xdfc>
			temp_time++;
 8002668:	4b55      	ldr	r3, [pc, #340]	@ (80027c0 <runSystem+0xf34>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	b2da      	uxtb	r2, r3
 8002670:	4b53      	ldr	r3, [pc, #332]	@ (80027c0 <runSystem+0xf34>)
 8002672:	701a      	strb	r2, [r3, #0]
			if(temp_time >= 60){
 8002674:	4b52      	ldr	r3, [pc, #328]	@ (80027c0 <runSystem+0xf34>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b3b      	cmp	r3, #59	@ 0x3b
 800267a:	d902      	bls.n	8002682 <runSystem+0xdf6>
				temp_time = 0;
 800267c:	4b50      	ldr	r3, [pc, #320]	@ (80027c0 <runSystem+0xf34>)
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 8002682:	4b58      	ldr	r3, [pc, #352]	@ (80027e4 <runSystem+0xf58>)
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[7] >= 40 && count_blink % 4 == 0){
 8002688:	4b54      	ldr	r3, [pc, #336]	@ (80027dc <runSystem+0xf50>)
 800268a:	89db      	ldrh	r3, [r3, #14]
 800268c:	2b27      	cmp	r3, #39	@ 0x27
 800268e:	d916      	bls.n	80026be <runSystem+0xe32>
 8002690:	4b53      	ldr	r3, [pc, #332]	@ (80027e0 <runSystem+0xf54>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <runSystem+0xe32>
			temp_time--;
 800269e:	4b48      	ldr	r3, [pc, #288]	@ (80027c0 <runSystem+0xf34>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b46      	ldr	r3, [pc, #280]	@ (80027c0 <runSystem+0xf34>)
 80026a8:	701a      	strb	r2, [r3, #0]
			if(temp_time <= 0){
 80026aa:	4b45      	ldr	r3, [pc, #276]	@ (80027c0 <runSystem+0xf34>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d102      	bne.n	80026b8 <runSystem+0xe2c>
				temp_time = 0;
 80026b2:	4b43      	ldr	r3, [pc, #268]	@ (80027c0 <runSystem+0xf34>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
			}
			blink_state = 1;
 80026b8:	4b4a      	ldr	r3, [pc, #296]	@ (80027e4 <runSystem+0xf58>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
		}
		if(button_count[12] == 1){
 80026be:	4b47      	ldr	r3, [pc, #284]	@ (80027dc <runSystem+0xf50>)
 80026c0:	8b1b      	ldrh	r3, [r3, #24]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d112      	bne.n	80026ec <runSystem+0xe60>
			alarm_min = temp_time;
 80026c6:	4b3e      	ldr	r3, [pc, #248]	@ (80027c0 <runSystem+0xf34>)
 80026c8:	781a      	ldrb	r2, [r3, #0]
 80026ca:	4b47      	ldr	r3, [pc, #284]	@ (80027e8 <runSystem+0xf5c>)
 80026cc:	701a      	strb	r2, [r3, #0]
			min_alarm_flag = 1;
 80026ce:	4b47      	ldr	r3, [pc, #284]	@ (80027ec <runSystem+0xf60>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
			count_blink = 0;
 80026d4:	4b42      	ldr	r3, [pc, #264]	@ (80027e0 <runSystem+0xf54>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 80026da:	4b42      	ldr	r3, [pc, #264]	@ (80027e4 <runSystem+0xf58>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
			systemState = CHECK_ALARM;
 80026e0:	4b43      	ldr	r3, [pc, #268]	@ (80027f0 <runSystem+0xf64>)
 80026e2:	2208      	movs	r2, #8
 80026e4:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7fe fb38 	bl	8000d5c <lcd_Clear>
		}
		if(button_count[0] == 1){
 80026ec:	4b3b      	ldr	r3, [pc, #236]	@ (80027dc <runSystem+0xf50>)
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	f040 8109 	bne.w	8002908 <runSystem+0x107c>
			count_blink = 0;
 80026f6:	4b3a      	ldr	r3, [pc, #232]	@ (80027e0 <runSystem+0xf54>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 80026fc:	4b39      	ldr	r3, [pc, #228]	@ (80027e4 <runSystem+0xf58>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]
			systemState = CHECK_ALARM;
 8002702:	4b3b      	ldr	r3, [pc, #236]	@ (80027f0 <runSystem+0xf64>)
 8002704:	2208      	movs	r2, #8
 8002706:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 8002708:	2000      	movs	r0, #0
 800270a:	f7fe fb27 	bl	8000d5c <lcd_Clear>
		}
		break;
 800270e:	e0fb      	b.n	8002908 <runSystem+0x107c>
	case CHECK_ALARM:
		count_blink = count_blink + 1;
 8002710:	4b33      	ldr	r3, [pc, #204]	@ (80027e0 <runSystem+0xf54>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	3301      	adds	r3, #1
 8002716:	b2da      	uxtb	r2, r3
 8002718:	4b31      	ldr	r3, [pc, #196]	@ (80027e0 <runSystem+0xf54>)
 800271a:	701a      	strb	r2, [r3, #0]
		if(hour_alarm_flag == 1 && min_alarm_flag == 1){
 800271c:	4b35      	ldr	r3, [pc, #212]	@ (80027f4 <runSystem+0xf68>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d173      	bne.n	800280c <runSystem+0xf80>
 8002724:	4b31      	ldr	r3, [pc, #196]	@ (80027ec <runSystem+0xf60>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d16f      	bne.n	800280c <runSystem+0xf80>
			lcd_ShowStr(20, 30, "set Alarm Success", WHITE, BLUE, 24, 0);
 800272c:	2300      	movs	r3, #0
 800272e:	9302      	str	r3, [sp, #8]
 8002730:	2318      	movs	r3, #24
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	231f      	movs	r3, #31
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800273c:	4a2e      	ldr	r2, [pc, #184]	@ (80027f8 <runSystem+0xf6c>)
 800273e:	211e      	movs	r1, #30
 8002740:	2014      	movs	r0, #20
 8002742:	f7fe fe81 	bl	8001448 <lcd_ShowStr>
			lcd_ShowStr(20, 60, "HOUR: ", WHITE, BLACK, 24, 0);
 8002746:	2300      	movs	r3, #0
 8002748:	9302      	str	r3, [sp, #8]
 800274a:	2318      	movs	r3, #24
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	2300      	movs	r3, #0
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002756:	4a29      	ldr	r2, [pc, #164]	@ (80027fc <runSystem+0xf70>)
 8002758:	213c      	movs	r1, #60	@ 0x3c
 800275a:	2014      	movs	r0, #20
 800275c:	f7fe fe74 	bl	8001448 <lcd_ShowStr>
			lcd_ShowIntNum(100, 60, alarm_hour, 2, GREEN, BLACK, 24);
 8002760:	4b27      	ldr	r3, [pc, #156]	@ (8002800 <runSystem+0xf74>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	461a      	mov	r2, r3
 8002766:	2318      	movs	r3, #24
 8002768:	9302      	str	r3, [sp, #8]
 800276a:	2300      	movs	r3, #0
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	2302      	movs	r3, #2
 8002776:	213c      	movs	r1, #60	@ 0x3c
 8002778:	2064      	movs	r0, #100	@ 0x64
 800277a:	f7fe fc63 	bl	8001044 <lcd_ShowIntNum>
			lcd_ShowStr(20, 90, "MIN: ", WHITE, BLACK, 24, 0);
 800277e:	2300      	movs	r3, #0
 8002780:	9302      	str	r3, [sp, #8]
 8002782:	2318      	movs	r3, #24
 8002784:	9301      	str	r3, [sp, #4]
 8002786:	2300      	movs	r3, #0
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800278e:	4a1d      	ldr	r2, [pc, #116]	@ (8002804 <runSystem+0xf78>)
 8002790:	215a      	movs	r1, #90	@ 0x5a
 8002792:	2014      	movs	r0, #20
 8002794:	f7fe fe58 	bl	8001448 <lcd_ShowStr>
			lcd_ShowIntNum(100, 90, alarm_min, 2, GREEN, BLACK, 24);
 8002798:	4b13      	ldr	r3, [pc, #76]	@ (80027e8 <runSystem+0xf5c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	461a      	mov	r2, r3
 800279e:	2318      	movs	r3, #24
 80027a0:	9302      	str	r3, [sp, #8]
 80027a2:	2300      	movs	r3, #0
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2302      	movs	r3, #2
 80027ae:	215a      	movs	r1, #90	@ 0x5a
 80027b0:	2064      	movs	r0, #100	@ 0x64
 80027b2:	f7fe fc47 	bl	8001044 <lcd_ShowIntNum>
			set_alarm_flag = 1;
 80027b6:	4b14      	ldr	r3, [pc, #80]	@ (8002808 <runSystem+0xf7c>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
 80027bc:	e079      	b.n	80028b2 <runSystem+0x1026>
 80027be:	bf00      	nop
 80027c0:	20000173 	.word	0x20000173
 80027c4:	200000ab 	.word	0x200000ab
 80027c8:	200000ad 	.word	0x200000ad
 80027cc:	200000af 	.word	0x200000af
 80027d0:	200000ae 	.word	0x200000ae
 80027d4:	200000b0 	.word	0x200000b0
 80027d8:	200000b1 	.word	0x200000b1
 80027dc:	20000080 	.word	0x20000080
 80027e0:	2000016e 	.word	0x2000016e
 80027e4:	2000016f 	.word	0x2000016f
 80027e8:	2000016d 	.word	0x2000016d
 80027ec:	20000172 	.word	0x20000172
 80027f0:	20000168 	.word	0x20000168
 80027f4:	20000171 	.word	0x20000171
 80027f8:	08008608 	.word	0x08008608
 80027fc:	0800861c 	.word	0x0800861c
 8002800:	2000016c 	.word	0x2000016c
 8002804:	08008624 	.word	0x08008624
 8002808:	20000170 	.word	0x20000170
		}else if(hour_alarm_flag == 0 && min_alarm_flag == 1){
 800280c:	4b40      	ldr	r3, [pc, #256]	@ (8002910 <runSystem+0x1084>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d11e      	bne.n	8002852 <runSystem+0xfc6>
 8002814:	4b3f      	ldr	r3, [pc, #252]	@ (8002914 <runSystem+0x1088>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d11a      	bne.n	8002852 <runSystem+0xfc6>
			lcd_ShowStr(20, 30, "Not set alarm", WHITE, BLUE, 24, 0);
 800281c:	2300      	movs	r3, #0
 800281e:	9302      	str	r3, [sp, #8]
 8002820:	2318      	movs	r3, #24
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	231f      	movs	r3, #31
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800282c:	4a3a      	ldr	r2, [pc, #232]	@ (8002918 <runSystem+0x108c>)
 800282e:	211e      	movs	r1, #30
 8002830:	2014      	movs	r0, #20
 8002832:	f7fe fe09 	bl	8001448 <lcd_ShowStr>
			lcd_ShowStr(22, 60, "hour yet", WHITE, BLUE, 24, 0);
 8002836:	2300      	movs	r3, #0
 8002838:	9302      	str	r3, [sp, #8]
 800283a:	2318      	movs	r3, #24
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	231f      	movs	r3, #31
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002846:	4a35      	ldr	r2, [pc, #212]	@ (800291c <runSystem+0x1090>)
 8002848:	213c      	movs	r1, #60	@ 0x3c
 800284a:	2016      	movs	r0, #22
 800284c:	f7fe fdfc 	bl	8001448 <lcd_ShowStr>
 8002850:	e02f      	b.n	80028b2 <runSystem+0x1026>
		}else if(hour_alarm_flag == 1 && min_alarm_flag == 0){
 8002852:	4b2f      	ldr	r3, [pc, #188]	@ (8002910 <runSystem+0x1084>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d11e      	bne.n	8002898 <runSystem+0x100c>
 800285a:	4b2e      	ldr	r3, [pc, #184]	@ (8002914 <runSystem+0x1088>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d11a      	bne.n	8002898 <runSystem+0x100c>
			lcd_ShowStr(20, 30, "Not set alarm", WHITE, BLUE, 24, 0);
 8002862:	2300      	movs	r3, #0
 8002864:	9302      	str	r3, [sp, #8]
 8002866:	2318      	movs	r3, #24
 8002868:	9301      	str	r3, [sp, #4]
 800286a:	231f      	movs	r3, #31
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002872:	4a29      	ldr	r2, [pc, #164]	@ (8002918 <runSystem+0x108c>)
 8002874:	211e      	movs	r1, #30
 8002876:	2014      	movs	r0, #20
 8002878:	f7fe fde6 	bl	8001448 <lcd_ShowStr>
			lcd_ShowStr(22, 60, "min yet", WHITE, BLUE, 24, 0);
 800287c:	2300      	movs	r3, #0
 800287e:	9302      	str	r3, [sp, #8]
 8002880:	2318      	movs	r3, #24
 8002882:	9301      	str	r3, [sp, #4]
 8002884:	231f      	movs	r3, #31
 8002886:	9300      	str	r3, [sp, #0]
 8002888:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800288c:	4a24      	ldr	r2, [pc, #144]	@ (8002920 <runSystem+0x1094>)
 800288e:	213c      	movs	r1, #60	@ 0x3c
 8002890:	2016      	movs	r0, #22
 8002892:	f7fe fdd9 	bl	8001448 <lcd_ShowStr>
 8002896:	e00c      	b.n	80028b2 <runSystem+0x1026>
		}else{
			lcd_ShowStr(20, 30, "Not set alarm", WHITE, BLUE, 24, 0);
 8002898:	2300      	movs	r3, #0
 800289a:	9302      	str	r3, [sp, #8]
 800289c:	2318      	movs	r3, #24
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	231f      	movs	r3, #31
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80028a8:	4a1b      	ldr	r2, [pc, #108]	@ (8002918 <runSystem+0x108c>)
 80028aa:	211e      	movs	r1, #30
 80028ac:	2014      	movs	r0, #20
 80028ae:	f7fe fdcb 	bl	8001448 <lcd_ShowStr>
		}
		if(count_blink%60 == 0){
 80028b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002924 <runSystem+0x1098>)
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002928 <runSystem+0x109c>)
 80028b8:	fba3 1302 	umull	r1, r3, r3, r2
 80028bc:	0959      	lsrs	r1, r3, #5
 80028be:	460b      	mov	r3, r1
 80028c0:	011b      	lsls	r3, r3, #4
 80028c2:	1a5b      	subs	r3, r3, r1
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d11d      	bne.n	800290a <runSystem+0x107e>
			hour_alarm_flag = 0;
 80028ce:	4b10      	ldr	r3, [pc, #64]	@ (8002910 <runSystem+0x1084>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
			min_alarm_flag = 0;
 80028d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002914 <runSystem+0x1088>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	701a      	strb	r2, [r3, #0]
			count_blink = 0;
 80028da:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <runSystem+0x1098>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
			blink_state = 0;
 80028e0:	4b12      	ldr	r3, [pc, #72]	@ (800292c <runSystem+0x10a0>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	701a      	strb	r2, [r3, #0]
			systemState = NORMAL;
 80028e6:	4b12      	ldr	r3, [pc, #72]	@ (8002930 <runSystem+0x10a4>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
			lcd_Clear(BLACK);
 80028ec:	2000      	movs	r0, #0
 80028ee:	f7fe fa35 	bl	8000d5c <lcd_Clear>
		}
	}

}
 80028f2:	e00a      	b.n	800290a <runSystem+0x107e>
		break;
 80028f4:	bf00      	nop
 80028f6:	e008      	b.n	800290a <runSystem+0x107e>
		break;
 80028f8:	bf00      	nop
 80028fa:	e006      	b.n	800290a <runSystem+0x107e>
		break;
 80028fc:	bf00      	nop
 80028fe:	e004      	b.n	800290a <runSystem+0x107e>
		break;
 8002900:	bf00      	nop
 8002902:	e002      	b.n	800290a <runSystem+0x107e>
		break;
 8002904:	bf00      	nop
 8002906:	e000      	b.n	800290a <runSystem+0x107e>
		break;
 8002908:	bf00      	nop
}
 800290a:	bf00      	nop
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000171 	.word	0x20000171
 8002914:	20000172 	.word	0x20000172
 8002918:	0800862c 	.word	0x0800862c
 800291c:	0800863c 	.word	0x0800863c
 8002920:	08008648 	.word	0x08008648
 8002924:	2000016e 	.word	0x2000016e
 8002928:	88888889 	.word	0x88888889
 800292c:	2000016f 	.word	0x2000016f
 8002930:	20000168 	.word	0x20000168

08002934 <displayTime>:
void displayTime(){
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af04      	add	r7, sp, #16
	lcd_ShowIntNum(70, 100, ds3231_hours, 2, GREEN, BLACK, 24);
 800293a:	4b36      	ldr	r3, [pc, #216]	@ (8002a14 <displayTime+0xe0>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	2318      	movs	r3, #24
 8002942:	9302      	str	r3, [sp, #8]
 8002944:	2300      	movs	r3, #0
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2302      	movs	r3, #2
 8002950:	2164      	movs	r1, #100	@ 0x64
 8002952:	2046      	movs	r0, #70	@ 0x46
 8002954:	f7fe fb76 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 100, ds3231_min, 2, GREEN, BLACK, 24);
 8002958:	4b2f      	ldr	r3, [pc, #188]	@ (8002a18 <displayTime+0xe4>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	2318      	movs	r3, #24
 8002960:	9302      	str	r3, [sp, #8]
 8002962:	2300      	movs	r3, #0
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	2302      	movs	r3, #2
 800296e:	2164      	movs	r1, #100	@ 0x64
 8002970:	206e      	movs	r0, #110	@ 0x6e
 8002972:	f7fe fb67 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 100, ds3231_sec, 2, GREEN, BLACK, 24);
 8002976:	4b29      	ldr	r3, [pc, #164]	@ (8002a1c <displayTime+0xe8>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	461a      	mov	r2, r3
 800297c:	2318      	movs	r3, #24
 800297e:	9302      	str	r3, [sp, #8]
 8002980:	2300      	movs	r3, #0
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	2302      	movs	r3, #2
 800298c:	2164      	movs	r1, #100	@ 0x64
 800298e:	2096      	movs	r0, #150	@ 0x96
 8002990:	f7fe fb58 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(20, 130, ds3231_day, 2, YELLOW, BLACK, 24);
 8002994:	4b22      	ldr	r3, [pc, #136]	@ (8002a20 <displayTime+0xec>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	2318      	movs	r3, #24
 800299c:	9302      	str	r3, [sp, #8]
 800299e:	2300      	movs	r3, #0
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	2302      	movs	r3, #2
 80029aa:	2182      	movs	r1, #130	@ 0x82
 80029ac:	2014      	movs	r0, #20
 80029ae:	f7fe fb49 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(70, 130, ds3231_date, 2, YELLOW, BLACK, 24);
 80029b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a24 <displayTime+0xf0>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	461a      	mov	r2, r3
 80029b8:	2318      	movs	r3, #24
 80029ba:	9302      	str	r3, [sp, #8]
 80029bc:	2300      	movs	r3, #0
 80029be:	9301      	str	r3, [sp, #4]
 80029c0:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	2302      	movs	r3, #2
 80029c8:	2182      	movs	r1, #130	@ 0x82
 80029ca:	2046      	movs	r0, #70	@ 0x46
 80029cc:	f7fe fb3a 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(110, 130, ds3231_month, 2, YELLOW, BLACK, 24);
 80029d0:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <displayTime+0xf4>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	2318      	movs	r3, #24
 80029d8:	9302      	str	r3, [sp, #8]
 80029da:	2300      	movs	r3, #0
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2302      	movs	r3, #2
 80029e6:	2182      	movs	r1, #130	@ 0x82
 80029e8:	206e      	movs	r0, #110	@ 0x6e
 80029ea:	f7fe fb2b 	bl	8001044 <lcd_ShowIntNum>
	lcd_ShowIntNum(150, 130, ds3231_year, 2, YELLOW, BLACK, 24);
 80029ee:	4b0f      	ldr	r3, [pc, #60]	@ (8002a2c <displayTime+0xf8>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	2318      	movs	r3, #24
 80029f6:	9302      	str	r3, [sp, #8]
 80029f8:	2300      	movs	r3, #0
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2302      	movs	r3, #2
 8002a04:	2182      	movs	r1, #130	@ 0x82
 8002a06:	2096      	movs	r0, #150	@ 0x96
 8002a08:	f7fe fb1c 	bl	8001044 <lcd_ShowIntNum>
}
 8002a0c:	bf00      	nop
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200000ab 	.word	0x200000ab
 8002a18:	200000ac 	.word	0x200000ac
 8002a1c:	200000ad 	.word	0x200000ad
 8002a20:	200000af 	.word	0x200000af
 8002a24:	200000ae 	.word	0x200000ae
 8002a28:	200000b0 	.word	0x200000b0
 8002a2c:	200000b1 	.word	0x200000b1

08002a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a34:	b672      	cpsid	i
}
 8002a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a38:	bf00      	nop
 8002a3a:	e7fd      	b.n	8002a38 <Error_Handler+0x8>

08002a3c <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8002a40:	4802      	ldr	r0, [pc, #8]	@ (8002a4c <timer_init+0x10>)
 8002a42:	f003 fbb1 	bl	80061a8 <HAL_TIM_Base_Start_IT>
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	200001d8 	.word	0x200001d8

08002a50 <setTimer2>:

void setTimer2(uint16_t duration){
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 8002a5a:	4a08      	ldr	r2, [pc, #32]	@ (8002a7c <setTimer2+0x2c>)
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8002a60:	4b06      	ldr	r3, [pc, #24]	@ (8002a7c <setTimer2+0x2c>)
 8002a62:	881a      	ldrh	r2, [r3, #0]
 8002a64:	4b06      	ldr	r3, [pc, #24]	@ (8002a80 <setTimer2+0x30>)
 8002a66:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 8002a68:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <setTimer2+0x34>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	801a      	strh	r2, [r3, #0]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000178 	.word	0x20000178
 8002a80:	20000176 	.word	0x20000176
 8002a84:	20000174 	.word	0x20000174

08002a88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a98:	d116      	bne.n	8002ac8 <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 8002a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d010      	beq.n	8002ac4 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002aac:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8002aae:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 8002ab6:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002ab8:	2201      	movs	r2, #1
 8002aba:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8002abc:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002abe:	881a      	ldrh	r2, [r3, #0]
 8002ac0:	4b03      	ldr	r3, [pc, #12]	@ (8002ad0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ac2:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8002ac4:	f7fe fd30 	bl	8001528 <led7_Scan>
	}
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000176 	.word	0x20000176
 8002ad4:	20000174 	.word	0x20000174
 8002ad8:	20000178 	.word	0x20000178

08002adc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002ae0:	4b17      	ldr	r3, [pc, #92]	@ (8002b40 <MX_SPI1_Init+0x64>)
 8002ae2:	4a18      	ldr	r2, [pc, #96]	@ (8002b44 <MX_SPI1_Init+0x68>)
 8002ae4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ae6:	4b16      	ldr	r3, [pc, #88]	@ (8002b40 <MX_SPI1_Init+0x64>)
 8002ae8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002aec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aee:	4b14      	ldr	r3, [pc, #80]	@ (8002b40 <MX_SPI1_Init+0x64>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002af4:	4b12      	ldr	r3, [pc, #72]	@ (8002b40 <MX_SPI1_Init+0x64>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002afa:	4b11      	ldr	r3, [pc, #68]	@ (8002b40 <MX_SPI1_Init+0x64>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b00:	4b0f      	ldr	r3, [pc, #60]	@ (8002b40 <MX_SPI1_Init+0x64>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b06:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <MX_SPI1_Init+0x64>)
 8002b08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b40 <MX_SPI1_Init+0x64>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b14:	4b0a      	ldr	r3, [pc, #40]	@ (8002b40 <MX_SPI1_Init+0x64>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b1a:	4b09      	ldr	r3, [pc, #36]	@ (8002b40 <MX_SPI1_Init+0x64>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b20:	4b07      	ldr	r3, [pc, #28]	@ (8002b40 <MX_SPI1_Init+0x64>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b26:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <MX_SPI1_Init+0x64>)
 8002b28:	220a      	movs	r2, #10
 8002b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b2c:	4804      	ldr	r0, [pc, #16]	@ (8002b40 <MX_SPI1_Init+0x64>)
 8002b2e:	f002 fcd1 	bl	80054d4 <HAL_SPI_Init>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b38:	f7ff ff7a 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	2000017c 	.word	0x2000017c
 8002b44:	40013000 	.word	0x40013000

08002b48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b08a      	sub	sp, #40	@ 0x28
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b50:	f107 0314 	add.w	r3, r7, #20
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
 8002b5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a19      	ldr	r2, [pc, #100]	@ (8002bcc <HAL_SPI_MspInit+0x84>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d12b      	bne.n	8002bc2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	4b18      	ldr	r3, [pc, #96]	@ (8002bd0 <HAL_SPI_MspInit+0x88>)
 8002b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b72:	4a17      	ldr	r2, [pc, #92]	@ (8002bd0 <HAL_SPI_MspInit+0x88>)
 8002b74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b7a:	4b15      	ldr	r3, [pc, #84]	@ (8002bd0 <HAL_SPI_MspInit+0x88>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
 8002b8a:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <HAL_SPI_MspInit+0x88>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	4a10      	ldr	r2, [pc, #64]	@ (8002bd0 <HAL_SPI_MspInit+0x88>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b96:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd0 <HAL_SPI_MspInit+0x88>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002ba2:	2338      	movs	r3, #56	@ 0x38
 8002ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bb2:	2305      	movs	r3, #5
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4805      	ldr	r0, [pc, #20]	@ (8002bd4 <HAL_SPI_MspInit+0x8c>)
 8002bbe:	f000 fce9 	bl	8003594 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	3728      	adds	r7, #40	@ 0x28
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40013000 	.word	0x40013000
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	40020400 	.word	0x40020400

08002bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	4b10      	ldr	r3, [pc, #64]	@ (8002c24 <HAL_MspInit+0x4c>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be6:	4a0f      	ldr	r2, [pc, #60]	@ (8002c24 <HAL_MspInit+0x4c>)
 8002be8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bee:	4b0d      	ldr	r3, [pc, #52]	@ (8002c24 <HAL_MspInit+0x4c>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bf6:	607b      	str	r3, [r7, #4]
 8002bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	4b09      	ldr	r3, [pc, #36]	@ (8002c24 <HAL_MspInit+0x4c>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	4a08      	ldr	r2, [pc, #32]	@ (8002c24 <HAL_MspInit+0x4c>)
 8002c04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c0a:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_MspInit+0x4c>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800

08002c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c2c:	bf00      	nop
 8002c2e:	e7fd      	b.n	8002c2c <NMI_Handler+0x4>

08002c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c34:	bf00      	nop
 8002c36:	e7fd      	b.n	8002c34 <HardFault_Handler+0x4>

08002c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c3c:	bf00      	nop
 8002c3e:	e7fd      	b.n	8002c3c <MemManage_Handler+0x4>

08002c40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <BusFault_Handler+0x4>

08002c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c4c:	bf00      	nop
 8002c4e:	e7fd      	b.n	8002c4c <UsageFault_Handler+0x4>

08002c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c7e:	f000 faa1 	bl	80031c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c8c:	4802      	ldr	r0, [pc, #8]	@ (8002c98 <TIM2_IRQHandler+0x10>)
 8002c8e:	f003 fafb 	bl	8006288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200001d8 	.word	0x200001d8

08002c9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ca0:	4802      	ldr	r0, [pc, #8]	@ (8002cac <USART1_IRQHandler+0x10>)
 8002ca2:	f003 ffa7 	bl	8006bf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000288 	.word	0x20000288

08002cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb8:	4a14      	ldr	r2, [pc, #80]	@ (8002d0c <_sbrk+0x5c>)
 8002cba:	4b15      	ldr	r3, [pc, #84]	@ (8002d10 <_sbrk+0x60>)
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc4:	4b13      	ldr	r3, [pc, #76]	@ (8002d14 <_sbrk+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ccc:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <_sbrk+0x64>)
 8002cce:	4a12      	ldr	r2, [pc, #72]	@ (8002d18 <_sbrk+0x68>)
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cd2:	4b10      	ldr	r3, [pc, #64]	@ (8002d14 <_sbrk+0x64>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d207      	bcs.n	8002cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce0:	f004 ffde 	bl	8007ca0 <__errno>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	e009      	b.n	8002d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf0:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <_sbrk+0x64>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cf6:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <_sbrk+0x64>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4a05      	ldr	r2, [pc, #20]	@ (8002d14 <_sbrk+0x64>)
 8002d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d02:	68fb      	ldr	r3, [r7, #12]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	20020000 	.word	0x20020000
 8002d10:	00000400 	.word	0x00000400
 8002d14:	200001d4 	.word	0x200001d4
 8002d18:	20000420 	.word	0x20000420

08002d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d20:	4b06      	ldr	r3, [pc, #24]	@ (8002d3c <SystemInit+0x20>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d26:	4a05      	ldr	r2, [pc, #20]	@ (8002d3c <SystemInit+0x20>)
 8002d28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d46:	f107 0308 	add.w	r3, r7, #8
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d54:	463b      	mov	r3, r7
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd4 <MX_TIM2_Init+0x94>)
 8002d5e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d62:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8002d64:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd4 <MX_TIM2_Init+0x94>)
 8002d66:	f240 3247 	movw	r2, #839	@ 0x347
 8002d6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6c:	4b19      	ldr	r3, [pc, #100]	@ (8002dd4 <MX_TIM2_Init+0x94>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8002d72:	4b18      	ldr	r3, [pc, #96]	@ (8002dd4 <MX_TIM2_Init+0x94>)
 8002d74:	2263      	movs	r2, #99	@ 0x63
 8002d76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d78:	4b16      	ldr	r3, [pc, #88]	@ (8002dd4 <MX_TIM2_Init+0x94>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d7e:	4b15      	ldr	r3, [pc, #84]	@ (8002dd4 <MX_TIM2_Init+0x94>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d84:	4813      	ldr	r0, [pc, #76]	@ (8002dd4 <MX_TIM2_Init+0x94>)
 8002d86:	f003 f9bf 	bl	8006108 <HAL_TIM_Base_Init>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d001      	beq.n	8002d94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002d90:	f7ff fe4e 	bl	8002a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002d9a:	f107 0308 	add.w	r3, r7, #8
 8002d9e:	4619      	mov	r1, r3
 8002da0:	480c      	ldr	r0, [pc, #48]	@ (8002dd4 <MX_TIM2_Init+0x94>)
 8002da2:	f003 fb61 	bl	8006468 <HAL_TIM_ConfigClockSource>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002dac:	f7ff fe40 	bl	8002a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002db0:	2300      	movs	r3, #0
 8002db2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002db4:	2300      	movs	r3, #0
 8002db6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002db8:	463b      	mov	r3, r7
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4805      	ldr	r0, [pc, #20]	@ (8002dd4 <MX_TIM2_Init+0x94>)
 8002dbe:	f003 fd89 	bl	80068d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002dc8:	f7ff fe32 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002dcc:	bf00      	nop
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	200001d8 	.word	0x200001d8

08002dd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002de8:	d115      	bne.n	8002e16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
 8002dee:	4b0c      	ldr	r3, [pc, #48]	@ (8002e20 <HAL_TIM_Base_MspInit+0x48>)
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	4a0b      	ldr	r2, [pc, #44]	@ (8002e20 <HAL_TIM_Base_MspInit+0x48>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dfa:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <HAL_TIM_Base_MspInit+0x48>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2100      	movs	r1, #0
 8002e0a:	201c      	movs	r0, #28
 8002e0c:	f000 faf9 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002e10:	201c      	movs	r0, #28
 8002e12:	f000 fb12 	bl	800343a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800

08002e24 <uart_init_rs232>:
#include "uart.h"

uint8_t receive_buffer1 = 0;
uint8_t msg[100];

void uart_init_rs232(){
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002e28:	2201      	movs	r2, #1
 8002e2a:	4903      	ldr	r1, [pc, #12]	@ (8002e38 <uart_init_rs232+0x14>)
 8002e2c:	4803      	ldr	r0, [pc, #12]	@ (8002e3c <uart_init_rs232+0x18>)
 8002e2e:	f003 febc 	bl	8006baa <HAL_UART_Receive_IT>
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000220 	.word	0x20000220
 8002e3c:	20000288 	.word	0x20000288

08002e40 <uart_Rs232SendString>:

void uart_Rs232SendString(uint8_t* str){
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (void*)msg, sprintf((void*)msg,"%s",str), 10);
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	4907      	ldr	r1, [pc, #28]	@ (8002e68 <uart_Rs232SendString+0x28>)
 8002e4c:	4807      	ldr	r0, [pc, #28]	@ (8002e6c <uart_Rs232SendString+0x2c>)
 8002e4e:	f004 feff 	bl	8007c50 <siprintf>
 8002e52:	4603      	mov	r3, r0
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	230a      	movs	r3, #10
 8002e58:	4904      	ldr	r1, [pc, #16]	@ (8002e6c <uart_Rs232SendString+0x2c>)
 8002e5a:	4805      	ldr	r0, [pc, #20]	@ (8002e70 <uart_Rs232SendString+0x30>)
 8002e5c:	f003 fe1a 	bl	8006a94 <HAL_UART_Transmit>
}
 8002e60:	bf00      	nop
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	08008650 	.word	0x08008650
 8002e6c:	20000224 	.word	0x20000224
 8002e70:	20000288 	.word	0x20000288

08002e74 <uart_Rs232SendNum>:

void uart_Rs232SendBytes(uint8_t* bytes, uint16_t size){
	HAL_UART_Transmit(&huart1, bytes, size, 10);
}

void uart_Rs232SendNum(uint32_t num){
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	if(num == 0){
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <uart_Rs232SendNum+0x16>
		uart_Rs232SendString("0");
 8002e82:	4824      	ldr	r0, [pc, #144]	@ (8002f14 <uart_Rs232SendNum+0xa0>)
 8002e84:	f7ff ffdc 	bl	8002e40 <uart_Rs232SendString>
		return;
 8002e88:	e040      	b.n	8002f0c <uart_Rs232SendNum+0x98>
	}
    uint8_t num_flag = 0;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
    int i;
	if(num < 0) uart_Rs232SendString("-");
    for(i = 10; i > 0; i--)
 8002e8e:	230a      	movs	r3, #10
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	e038      	b.n	8002f06 <uart_Rs232SendNum+0x92>
    {
        if((num / mypow(10, i-1)) != 0)
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	4619      	mov	r1, r3
 8002e9a:	200a      	movs	r0, #10
 8002e9c:	f7fe f8b6 	bl	800100c <mypow>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d315      	bcc.n	8002ed6 <uart_Rs232SendNum+0x62>
        {
            num_flag = 1;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	73fb      	strb	r3, [r7, #15]
            sprintf((void*)msg,"%d",num/mypow(10, i-1));
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	200a      	movs	r0, #10
 8002eb6:	f7fe f8a9 	bl	800100c <mypow>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4914      	ldr	r1, [pc, #80]	@ (8002f18 <uart_Rs232SendNum+0xa4>)
 8002ec8:	4814      	ldr	r0, [pc, #80]	@ (8002f1c <uart_Rs232SendNum+0xa8>)
 8002eca:	f004 fec1 	bl	8007c50 <siprintf>
            uart_Rs232SendString(msg);
 8002ece:	4813      	ldr	r0, [pc, #76]	@ (8002f1c <uart_Rs232SendNum+0xa8>)
 8002ed0:	f7ff ffb6 	bl	8002e40 <uart_Rs232SendString>
 8002ed4:	e005      	b.n	8002ee2 <uart_Rs232SendNum+0x6e>
        }
        else
        {
            if(num_flag != 0)
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <uart_Rs232SendNum+0x6e>
            	uart_Rs232SendString("0");
 8002edc:	480d      	ldr	r0, [pc, #52]	@ (8002f14 <uart_Rs232SendNum+0xa0>)
 8002ede:	f7ff ffaf 	bl	8002e40 <uart_Rs232SendString>
        }
        num %= mypow(10, i-1);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	200a      	movs	r0, #10
 8002eea:	f7fe f88f 	bl	800100c <mypow>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002ef8:	fb01 f202 	mul.w	r2, r1, r2
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	607b      	str	r3, [r7, #4]
    for(i = 10; i > 0; i--)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	dcc3      	bgt.n	8002e94 <uart_Rs232SendNum+0x20>
    }
}
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	08008654 	.word	0x08008654
 8002f18:	08008658 	.word	0x08008658
 8002f1c:	20000224 	.word	0x20000224

08002f20 <HAL_UART_RxCpltCallback>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a08      	ldr	r2, [pc, #32]	@ (8002f50 <HAL_UART_RxCpltCallback+0x30>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d10a      	bne.n	8002f48 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8002f32:	230a      	movs	r3, #10
 8002f34:	2201      	movs	r2, #1
 8002f36:	4907      	ldr	r1, [pc, #28]	@ (8002f54 <HAL_UART_RxCpltCallback+0x34>)
 8002f38:	4807      	ldr	r0, [pc, #28]	@ (8002f58 <HAL_UART_RxCpltCallback+0x38>)
 8002f3a:	f003 fdab 	bl	8006a94 <HAL_UART_Transmit>


		// turn on the receice interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8002f3e:	2201      	movs	r2, #1
 8002f40:	4904      	ldr	r1, [pc, #16]	@ (8002f54 <HAL_UART_RxCpltCallback+0x34>)
 8002f42:	4805      	ldr	r0, [pc, #20]	@ (8002f58 <HAL_UART_RxCpltCallback+0x38>)
 8002f44:	f003 fe31 	bl	8006baa <HAL_UART_Receive_IT>
	}
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40011000 	.word	0x40011000
 8002f54:	20000220 	.word	0x20000220
 8002f58:	20000288 	.word	0x20000288

08002f5c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f60:	4b11      	ldr	r3, [pc, #68]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f62:	4a12      	ldr	r2, [pc, #72]	@ (8002fac <MX_USART1_UART_Init+0x50>)
 8002f64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f66:	4b10      	ldr	r3, [pc, #64]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f74:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f80:	4b09      	ldr	r3, [pc, #36]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f82:	220c      	movs	r2, #12
 8002f84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f86:	4b08      	ldr	r3, [pc, #32]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f92:	4805      	ldr	r0, [pc, #20]	@ (8002fa8 <MX_USART1_UART_Init+0x4c>)
 8002f94:	f003 fd2e 	bl	80069f4 <HAL_UART_Init>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002f9e:	f7ff fd47 	bl	8002a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000288 	.word	0x20000288
 8002fac:	40011000 	.word	0x40011000

08002fb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b08a      	sub	sp, #40	@ 0x28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fb8:	f107 0314 	add.w	r3, r7, #20
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	605a      	str	r2, [r3, #4]
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	60da      	str	r2, [r3, #12]
 8002fc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8003044 <HAL_UART_MspInit+0x94>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d134      	bne.n	800303c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003048 <HAL_UART_MspInit+0x98>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fda:	4a1b      	ldr	r2, [pc, #108]	@ (8003048 <HAL_UART_MspInit+0x98>)
 8002fdc:	f043 0310 	orr.w	r3, r3, #16
 8002fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fe2:	4b19      	ldr	r3, [pc, #100]	@ (8003048 <HAL_UART_MspInit+0x98>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe6:	f003 0310 	and.w	r3, r3, #16
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fee:	2300      	movs	r3, #0
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	4b15      	ldr	r3, [pc, #84]	@ (8003048 <HAL_UART_MspInit+0x98>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	4a14      	ldr	r2, [pc, #80]	@ (8003048 <HAL_UART_MspInit+0x98>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ffe:	4b12      	ldr	r3, [pc, #72]	@ (8003048 <HAL_UART_MspInit+0x98>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800300a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800300e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003018:	2303      	movs	r3, #3
 800301a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800301c:	2307      	movs	r3, #7
 800301e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003020:	f107 0314 	add.w	r3, r7, #20
 8003024:	4619      	mov	r1, r3
 8003026:	4809      	ldr	r0, [pc, #36]	@ (800304c <HAL_UART_MspInit+0x9c>)
 8003028:	f000 fab4 	bl	8003594 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800302c:	2200      	movs	r2, #0
 800302e:	2100      	movs	r1, #0
 8003030:	2025      	movs	r0, #37	@ 0x25
 8003032:	f000 f9e6 	bl	8003402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003036:	2025      	movs	r0, #37	@ 0x25
 8003038:	f000 f9ff 	bl	800343a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800303c:	bf00      	nop
 800303e:	3728      	adds	r7, #40	@ 0x28
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40011000 	.word	0x40011000
 8003048:	40023800 	.word	0x40023800
 800304c:	40020000 	.word	0x40020000

08003050 <BCD2DEC>:
 *  Created on: Sep 26, 2023
 *      Author: HaHuyen
 */
#include "utils.h"

uint8_t BCD2DEC(uint8_t data) {
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	4603      	mov	r3, r0
 8003058:	71fb      	strb	r3, [r7, #7]
	return (data >> 4) * 10 + (data & 0x0f);
 800305a:	79fb      	ldrb	r3, [r7, #7]
 800305c:	091b      	lsrs	r3, r3, #4
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
 8003062:	0092      	lsls	r2, r2, #2
 8003064:	4413      	add	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	b2da      	uxtb	r2, r3
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	b2db      	uxtb	r3, r3
 8003072:	4413      	add	r3, r2
 8003074:	b2db      	uxtb	r3, r3
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <DEC2BCD>:

uint8_t DEC2BCD(uint8_t data) {
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	4603      	mov	r3, r0
 800308c:	71fb      	strb	r3, [r7, #7]
	return (data / 10) << 4 | (data % 10);
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	4a0d      	ldr	r2, [pc, #52]	@ (80030c8 <DEC2BCD+0x44>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	08db      	lsrs	r3, r3, #3
 8003098:	b2db      	uxtb	r3, r3
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	b258      	sxtb	r0, r3
 800309e:	79fa      	ldrb	r2, [r7, #7]
 80030a0:	4b09      	ldr	r3, [pc, #36]	@ (80030c8 <DEC2BCD+0x44>)
 80030a2:	fba3 1302 	umull	r1, r3, r3, r2
 80030a6:	08d9      	lsrs	r1, r3, #3
 80030a8:	460b      	mov	r3, r1
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	b25b      	sxtb	r3, r3
 80030b6:	4303      	orrs	r3, r0
 80030b8:	b25b      	sxtb	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
}
 80030bc:	4618      	mov	r0, r3
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	cccccccd 	.word	0xcccccccd

080030cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80030cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003104 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80030d0:	f7ff fe24 	bl	8002d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030d4:	480c      	ldr	r0, [pc, #48]	@ (8003108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030d6:	490d      	ldr	r1, [pc, #52]	@ (800310c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030dc:	e002      	b.n	80030e4 <LoopCopyDataInit>

080030de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030e2:	3304      	adds	r3, #4

080030e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e8:	d3f9      	bcc.n	80030de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f0:	e001      	b.n	80030f6 <LoopFillZerobss>

080030f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f4:	3204      	adds	r2, #4

080030f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f8:	d3fb      	bcc.n	80030f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030fa:	f004 fdd7 	bl	8007cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030fe:	f7fe fa9f 	bl	8001640 <main>
  bx  lr    
 8003102:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800310c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8003110:	0800b640 	.word	0x0800b640
  ldr r2, =_sbss
 8003114:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8003118:	2000041c 	.word	0x2000041c

0800311c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800311c:	e7fe      	b.n	800311c <ADC_IRQHandler>
	...

08003120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003124:	4b0e      	ldr	r3, [pc, #56]	@ (8003160 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0d      	ldr	r2, [pc, #52]	@ (8003160 <HAL_Init+0x40>)
 800312a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800312e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003130:	4b0b      	ldr	r3, [pc, #44]	@ (8003160 <HAL_Init+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0a      	ldr	r2, [pc, #40]	@ (8003160 <HAL_Init+0x40>)
 8003136:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800313a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800313c:	4b08      	ldr	r3, [pc, #32]	@ (8003160 <HAL_Init+0x40>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a07      	ldr	r2, [pc, #28]	@ (8003160 <HAL_Init+0x40>)
 8003142:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003148:	2003      	movs	r0, #3
 800314a:	f000 f94f 	bl	80033ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800314e:	200f      	movs	r0, #15
 8003150:	f000 f808 	bl	8003164 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003154:	f7ff fd40 	bl	8002bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023c00 	.word	0x40023c00

08003164 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800316c:	4b12      	ldr	r3, [pc, #72]	@ (80031b8 <HAL_InitTick+0x54>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b12      	ldr	r3, [pc, #72]	@ (80031bc <HAL_InitTick+0x58>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	4619      	mov	r1, r3
 8003176:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800317a:	fbb3 f3f1 	udiv	r3, r3, r1
 800317e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f967 	bl	8003456 <HAL_SYSTICK_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e00e      	b.n	80031b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b0f      	cmp	r3, #15
 8003196:	d80a      	bhi.n	80031ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003198:	2200      	movs	r2, #0
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	f04f 30ff 	mov.w	r0, #4294967295
 80031a0:	f000 f92f 	bl	8003402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031a4:	4a06      	ldr	r2, [pc, #24]	@ (80031c0 <HAL_InitTick+0x5c>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	20000008 	.word	0x20000008
 80031bc:	20000010 	.word	0x20000010
 80031c0:	2000000c 	.word	0x2000000c

080031c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031c8:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <HAL_IncTick+0x20>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	4b06      	ldr	r3, [pc, #24]	@ (80031e8 <HAL_IncTick+0x24>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	4a04      	ldr	r2, [pc, #16]	@ (80031e8 <HAL_IncTick+0x24>)
 80031d6:	6013      	str	r3, [r2, #0]
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000010 	.word	0x20000010
 80031e8:	200002d0 	.word	0x200002d0

080031ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return uwTick;
 80031f0:	4b03      	ldr	r3, [pc, #12]	@ (8003200 <HAL_GetTick+0x14>)
 80031f2:	681b      	ldr	r3, [r3, #0]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr
 80031fe:	bf00      	nop
 8003200:	200002d0 	.word	0x200002d0

08003204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800320c:	f7ff ffee 	bl	80031ec <HAL_GetTick>
 8003210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321c:	d005      	beq.n	800322a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800321e:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <HAL_Delay+0x44>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4413      	add	r3, r2
 8003228:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800322a:	bf00      	nop
 800322c:	f7ff ffde 	bl	80031ec <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	429a      	cmp	r2, r3
 800323a:	d8f7      	bhi.n	800322c <HAL_Delay+0x28>
  {
  }
}
 800323c:	bf00      	nop
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	20000010 	.word	0x20000010

0800324c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800325c:	4b0c      	ldr	r3, [pc, #48]	@ (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003268:	4013      	ands	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003274:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003278:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800327c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800327e:	4a04      	ldr	r2, [pc, #16]	@ (8003290 <__NVIC_SetPriorityGrouping+0x44>)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	60d3      	str	r3, [r2, #12]
}
 8003284:	bf00      	nop
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003298:	4b04      	ldr	r3, [pc, #16]	@ (80032ac <__NVIC_GetPriorityGrouping+0x18>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	0a1b      	lsrs	r3, r3, #8
 800329e:	f003 0307 	and.w	r3, r3, #7
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	db0b      	blt.n	80032da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032c2:	79fb      	ldrb	r3, [r7, #7]
 80032c4:	f003 021f 	and.w	r2, r3, #31
 80032c8:	4907      	ldr	r1, [pc, #28]	@ (80032e8 <__NVIC_EnableIRQ+0x38>)
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	2001      	movs	r0, #1
 80032d2:	fa00 f202 	lsl.w	r2, r0, r2
 80032d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	e000e100 	.word	0xe000e100

080032ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	db0a      	blt.n	8003316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	b2da      	uxtb	r2, r3
 8003304:	490c      	ldr	r1, [pc, #48]	@ (8003338 <__NVIC_SetPriority+0x4c>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	440b      	add	r3, r1
 8003310:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003314:	e00a      	b.n	800332c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b2da      	uxtb	r2, r3
 800331a:	4908      	ldr	r1, [pc, #32]	@ (800333c <__NVIC_SetPriority+0x50>)
 800331c:	79fb      	ldrb	r3, [r7, #7]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	3b04      	subs	r3, #4
 8003324:	0112      	lsls	r2, r2, #4
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	440b      	add	r3, r1
 800332a:	761a      	strb	r2, [r3, #24]
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000e100 	.word	0xe000e100
 800333c:	e000ed00 	.word	0xe000ed00

08003340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003340:	b480      	push	{r7}
 8003342:	b089      	sub	sp, #36	@ 0x24
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f1c3 0307 	rsb	r3, r3, #7
 800335a:	2b04      	cmp	r3, #4
 800335c:	bf28      	it	cs
 800335e:	2304      	movcs	r3, #4
 8003360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3304      	adds	r3, #4
 8003366:	2b06      	cmp	r3, #6
 8003368:	d902      	bls.n	8003370 <NVIC_EncodePriority+0x30>
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3b03      	subs	r3, #3
 800336e:	e000      	b.n	8003372 <NVIC_EncodePriority+0x32>
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003374:	f04f 32ff 	mov.w	r2, #4294967295
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	401a      	ands	r2, r3
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003388:	f04f 31ff 	mov.w	r1, #4294967295
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	43d9      	mvns	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003398:	4313      	orrs	r3, r2
         );
}
 800339a:	4618      	mov	r0, r3
 800339c:	3724      	adds	r7, #36	@ 0x24
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033b8:	d301      	bcc.n	80033be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ba:	2301      	movs	r3, #1
 80033bc:	e00f      	b.n	80033de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033be:	4a0a      	ldr	r2, [pc, #40]	@ (80033e8 <SysTick_Config+0x40>)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033c6:	210f      	movs	r1, #15
 80033c8:	f04f 30ff 	mov.w	r0, #4294967295
 80033cc:	f7ff ff8e 	bl	80032ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033d0:	4b05      	ldr	r3, [pc, #20]	@ (80033e8 <SysTick_Config+0x40>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d6:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <SysTick_Config+0x40>)
 80033d8:	2207      	movs	r2, #7
 80033da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	e000e010 	.word	0xe000e010

080033ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ff29 	bl	800324c <__NVIC_SetPriorityGrouping>
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	4603      	mov	r3, r0
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	607a      	str	r2, [r7, #4]
 800340e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003414:	f7ff ff3e 	bl	8003294 <__NVIC_GetPriorityGrouping>
 8003418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	6978      	ldr	r0, [r7, #20]
 8003420:	f7ff ff8e 	bl	8003340 <NVIC_EncodePriority>
 8003424:	4602      	mov	r2, r0
 8003426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800342a:	4611      	mov	r1, r2
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff ff5d 	bl	80032ec <__NVIC_SetPriority>
}
 8003432:	bf00      	nop
 8003434:	3718      	adds	r7, #24
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}

0800343a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800343a:	b580      	push	{r7, lr}
 800343c:	b082      	sub	sp, #8
 800343e:	af00      	add	r7, sp, #0
 8003440:	4603      	mov	r3, r0
 8003442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff ff31 	bl	80032b0 <__NVIC_EnableIRQ>
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff ffa2 	bl	80033a8 <SysTick_Config>
 8003464:	4603      	mov	r3, r0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b084      	sub	sp, #16
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800347c:	f7ff feb6 	bl	80031ec <HAL_GetTick>
 8003480:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d008      	beq.n	80034a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2280      	movs	r2, #128	@ 0x80
 8003492:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e052      	b.n	8003546 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0216 	bic.w	r2, r2, #22
 80034ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80034be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d103      	bne.n	80034d0 <HAL_DMA_Abort+0x62>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d007      	beq.n	80034e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0208 	bic.w	r2, r2, #8
 80034de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f0:	e013      	b.n	800351a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034f2:	f7ff fe7b 	bl	80031ec <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b05      	cmp	r3, #5
 80034fe:	d90c      	bls.n	800351a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2203      	movs	r2, #3
 800350a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e015      	b.n	8003546 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1e4      	bne.n	80034f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	223f      	movs	r2, #63	@ 0x3f
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d004      	beq.n	800356c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2280      	movs	r2, #128	@ 0x80
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e00c      	b.n	8003586 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2205      	movs	r2, #5
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f022 0201 	bic.w	r2, r2, #1
 8003582:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
	...

08003594 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003594:	b480      	push	{r7}
 8003596:	b089      	sub	sp, #36	@ 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	e16b      	b.n	8003888 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035b0:	2201      	movs	r2, #1
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	f040 815a 	bne.w	8003882 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d005      	beq.n	80035e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d130      	bne.n	8003648 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	2203      	movs	r2, #3
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	fa02 f303 	lsl.w	r3, r2, r3
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	4313      	orrs	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800361c:	2201      	movs	r2, #1
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	091b      	lsrs	r3, r3, #4
 8003632:	f003 0201 	and.w	r2, r3, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0303 	and.w	r3, r3, #3
 8003650:	2b03      	cmp	r3, #3
 8003652:	d017      	beq.n	8003684 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	2203      	movs	r2, #3
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d123      	bne.n	80036d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	08da      	lsrs	r2, r3, #3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3208      	adds	r2, #8
 8003698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800369c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	220f      	movs	r2, #15
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	43db      	mvns	r3, r3
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4013      	ands	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	08da      	lsrs	r2, r3, #3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	3208      	adds	r2, #8
 80036d2:	69b9      	ldr	r1, [r7, #24]
 80036d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	2203      	movs	r2, #3
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0203 	and.w	r2, r3, #3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	005b      	lsls	r3, r3, #1
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4313      	orrs	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80b4 	beq.w	8003882 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	4b60      	ldr	r3, [pc, #384]	@ (80038a0 <HAL_GPIO_Init+0x30c>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003722:	4a5f      	ldr	r2, [pc, #380]	@ (80038a0 <HAL_GPIO_Init+0x30c>)
 8003724:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003728:	6453      	str	r3, [r2, #68]	@ 0x44
 800372a:	4b5d      	ldr	r3, [pc, #372]	@ (80038a0 <HAL_GPIO_Init+0x30c>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003732:	60fb      	str	r3, [r7, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003736:	4a5b      	ldr	r2, [pc, #364]	@ (80038a4 <HAL_GPIO_Init+0x310>)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	3302      	adds	r3, #2
 800373e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	220f      	movs	r2, #15
 800374e:	fa02 f303 	lsl.w	r3, r2, r3
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a52      	ldr	r2, [pc, #328]	@ (80038a8 <HAL_GPIO_Init+0x314>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d02b      	beq.n	80037ba <HAL_GPIO_Init+0x226>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a51      	ldr	r2, [pc, #324]	@ (80038ac <HAL_GPIO_Init+0x318>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d025      	beq.n	80037b6 <HAL_GPIO_Init+0x222>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a50      	ldr	r2, [pc, #320]	@ (80038b0 <HAL_GPIO_Init+0x31c>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d01f      	beq.n	80037b2 <HAL_GPIO_Init+0x21e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a4f      	ldr	r2, [pc, #316]	@ (80038b4 <HAL_GPIO_Init+0x320>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d019      	beq.n	80037ae <HAL_GPIO_Init+0x21a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a4e      	ldr	r2, [pc, #312]	@ (80038b8 <HAL_GPIO_Init+0x324>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_GPIO_Init+0x216>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a4d      	ldr	r2, [pc, #308]	@ (80038bc <HAL_GPIO_Init+0x328>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00d      	beq.n	80037a6 <HAL_GPIO_Init+0x212>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a4c      	ldr	r2, [pc, #304]	@ (80038c0 <HAL_GPIO_Init+0x32c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <HAL_GPIO_Init+0x20e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a4b      	ldr	r2, [pc, #300]	@ (80038c4 <HAL_GPIO_Init+0x330>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_GPIO_Init+0x20a>
 800379a:	2307      	movs	r3, #7
 800379c:	e00e      	b.n	80037bc <HAL_GPIO_Init+0x228>
 800379e:	2308      	movs	r3, #8
 80037a0:	e00c      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037a2:	2306      	movs	r3, #6
 80037a4:	e00a      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037a6:	2305      	movs	r3, #5
 80037a8:	e008      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037aa:	2304      	movs	r3, #4
 80037ac:	e006      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037ae:	2303      	movs	r3, #3
 80037b0:	e004      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e002      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_GPIO_Init+0x228>
 80037ba:	2300      	movs	r3, #0
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	f002 0203 	and.w	r2, r2, #3
 80037c2:	0092      	lsls	r2, r2, #2
 80037c4:	4093      	lsls	r3, r2
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037cc:	4935      	ldr	r1, [pc, #212]	@ (80038a4 <HAL_GPIO_Init+0x310>)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	089b      	lsrs	r3, r3, #2
 80037d2:	3302      	adds	r3, #2
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037da:	4b3b      	ldr	r3, [pc, #236]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4013      	ands	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037fe:	4a32      	ldr	r2, [pc, #200]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003804:	4b30      	ldr	r3, [pc, #192]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d003      	beq.n	8003828 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003828:	4a27      	ldr	r2, [pc, #156]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800382e:	4b26      	ldr	r3, [pc, #152]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	43db      	mvns	r3, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4013      	ands	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003852:	4a1d      	ldr	r2, [pc, #116]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003858:	4b1b      	ldr	r3, [pc, #108]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800387c:	4a12      	ldr	r2, [pc, #72]	@ (80038c8 <HAL_GPIO_Init+0x334>)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	3301      	adds	r3, #1
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	2b0f      	cmp	r3, #15
 800388c:	f67f ae90 	bls.w	80035b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003890:	bf00      	nop
 8003892:	bf00      	nop
 8003894:	3724      	adds	r7, #36	@ 0x24
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40013800 	.word	0x40013800
 80038a8:	40020000 	.word	0x40020000
 80038ac:	40020400 	.word	0x40020400
 80038b0:	40020800 	.word	0x40020800
 80038b4:	40020c00 	.word	0x40020c00
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40021400 	.word	0x40021400
 80038c0:	40021800 	.word	0x40021800
 80038c4:	40021c00 	.word	0x40021c00
 80038c8:	40013c00 	.word	0x40013c00

080038cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	807b      	strh	r3, [r7, #2]
 80038d8:	4613      	mov	r3, r2
 80038da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038dc:	787b      	ldrb	r3, [r7, #1]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038e2:	887a      	ldrh	r2, [r7, #2]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038e8:	e003      	b.n	80038f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038ea:	887b      	ldrh	r3, [r7, #2]
 80038ec:	041a      	lsls	r2, r3, #16
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	619a      	str	r2, [r3, #24]
}
 80038f2:	bf00      	nop
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e12b      	b.n	8003b6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d106      	bne.n	800392c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7fd f952 	bl	8000bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2224      	movs	r2, #36	@ 0x24
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0201 	bic.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003964:	f001 fd8e 	bl	8005484 <HAL_RCC_GetPCLK1Freq>
 8003968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4a81      	ldr	r2, [pc, #516]	@ (8003b74 <HAL_I2C_Init+0x274>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d807      	bhi.n	8003984 <HAL_I2C_Init+0x84>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4a80      	ldr	r2, [pc, #512]	@ (8003b78 <HAL_I2C_Init+0x278>)
 8003978:	4293      	cmp	r3, r2
 800397a:	bf94      	ite	ls
 800397c:	2301      	movls	r3, #1
 800397e:	2300      	movhi	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	e006      	b.n	8003992 <HAL_I2C_Init+0x92>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4a7d      	ldr	r2, [pc, #500]	@ (8003b7c <HAL_I2C_Init+0x27c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	bf94      	ite	ls
 800398c:	2301      	movls	r3, #1
 800398e:	2300      	movhi	r3, #0
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e0e7      	b.n	8003b6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4a78      	ldr	r2, [pc, #480]	@ (8003b80 <HAL_I2C_Init+0x280>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0c9b      	lsrs	r3, r3, #18
 80039a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003b74 <HAL_I2C_Init+0x274>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d802      	bhi.n	80039d4 <HAL_I2C_Init+0xd4>
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	3301      	adds	r3, #1
 80039d2:	e009      	b.n	80039e8 <HAL_I2C_Init+0xe8>
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80039da:	fb02 f303 	mul.w	r3, r2, r3
 80039de:	4a69      	ldr	r2, [pc, #420]	@ (8003b84 <HAL_I2C_Init+0x284>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	099b      	lsrs	r3, r3, #6
 80039e6:	3301      	adds	r3, #1
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6812      	ldr	r2, [r2, #0]
 80039ec:	430b      	orrs	r3, r1
 80039ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	495c      	ldr	r1, [pc, #368]	@ (8003b74 <HAL_I2C_Init+0x274>)
 8003a04:	428b      	cmp	r3, r1
 8003a06:	d819      	bhi.n	8003a3c <HAL_I2C_Init+0x13c>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e59      	subs	r1, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a16:	1c59      	adds	r1, r3, #1
 8003a18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00a      	beq.n	8003a38 <HAL_I2C_Init+0x138>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	1e59      	subs	r1, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a30:	3301      	adds	r3, #1
 8003a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a36:	e051      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a38:	2304      	movs	r3, #4
 8003a3a:	e04f      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d111      	bne.n	8003a68 <HAL_I2C_Init+0x168>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	1e58      	subs	r0, r3, #1
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6859      	ldr	r1, [r3, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	440b      	add	r3, r1
 8003a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a56:	3301      	adds	r3, #1
 8003a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e012      	b.n	8003a8e <HAL_I2C_Init+0x18e>
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1e58      	subs	r0, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6859      	ldr	r1, [r3, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	0099      	lsls	r1, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a7e:	3301      	adds	r3, #1
 8003a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Init+0x196>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e022      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10e      	bne.n	8003abc <HAL_I2C_Init+0x1bc>
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	1e58      	subs	r0, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	440b      	add	r3, r1
 8003aac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aba:	e00f      	b.n	8003adc <HAL_I2C_Init+0x1dc>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1e58      	subs	r0, r3, #1
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6859      	ldr	r1, [r3, #4]
 8003ac4:	460b      	mov	r3, r1
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	0099      	lsls	r1, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003adc:	6879      	ldr	r1, [r7, #4]
 8003ade:	6809      	ldr	r1, [r1, #0]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	69da      	ldr	r2, [r3, #28]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6911      	ldr	r1, [r2, #16]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68d2      	ldr	r2, [r2, #12]
 8003b16:	4311      	orrs	r1, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695a      	ldr	r2, [r3, #20]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	431a      	orrs	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0201 	orr.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2220      	movs	r2, #32
 8003b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	000186a0 	.word	0x000186a0
 8003b78:	001e847f 	.word	0x001e847f
 8003b7c:	003d08ff 	.word	0x003d08ff
 8003b80:	431bde83 	.word	0x431bde83
 8003b84:	10624dd3 	.word	0x10624dd3

08003b88 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	4608      	mov	r0, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	461a      	mov	r2, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	817b      	strh	r3, [r7, #10]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	813b      	strh	r3, [r7, #8]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ba2:	f7ff fb23 	bl	80031ec <HAL_GetTick>
 8003ba6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	f040 80d9 	bne.w	8003d68 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	2319      	movs	r3, #25
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	496d      	ldr	r1, [pc, #436]	@ (8003d74 <HAL_I2C_Mem_Write+0x1ec>)
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 fdb9 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d001      	beq.n	8003bd0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e0cc      	b.n	8003d6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d101      	bne.n	8003bde <HAL_I2C_Mem_Write+0x56>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	e0c5      	b.n	8003d6a <HAL_I2C_Mem_Write+0x1e2>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d007      	beq.n	8003c04 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0201 	orr.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c12:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2221      	movs	r2, #33	@ 0x21
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2240      	movs	r2, #64	@ 0x40
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a3a      	ldr	r2, [r7, #32]
 8003c2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4a4d      	ldr	r2, [pc, #308]	@ (8003d78 <HAL_I2C_Mem_Write+0x1f0>)
 8003c44:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c46:	88f8      	ldrh	r0, [r7, #6]
 8003c48:	893a      	ldrh	r2, [r7, #8]
 8003c4a:	8979      	ldrh	r1, [r7, #10]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	9301      	str	r3, [sp, #4]
 8003c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	4603      	mov	r3, r0
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fbf0 	bl	800443c <I2C_RequestMemoryWrite>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d052      	beq.n	8003d08 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e081      	b.n	8003d6a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f000 fe7e 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00d      	beq.n	8003c92 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d107      	bne.n	8003c8e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e06b      	b.n	8003d6a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca2:	1c5a      	adds	r2, r3, #1
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d11b      	bne.n	8003d08 <HAL_I2C_Mem_Write+0x180>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d017      	beq.n	8003d08 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	781a      	ldrb	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	3b01      	subs	r3, #1
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1aa      	bne.n	8003c66 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 fe71 	bl	80049fc <I2C_WaitOnBTFFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	2b04      	cmp	r3, #4
 8003d26:	d107      	bne.n	8003d38 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d36:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e016      	b.n	8003d6a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	e000      	b.n	8003d6a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d68:	2302      	movs	r3, #2
  }
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	00100002 	.word	0x00100002
 8003d78:	ffff0000 	.word	0xffff0000

08003d7c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08c      	sub	sp, #48	@ 0x30
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	4608      	mov	r0, r1
 8003d86:	4611      	mov	r1, r2
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	817b      	strh	r3, [r7, #10]
 8003d8e:	460b      	mov	r3, r1
 8003d90:	813b      	strh	r3, [r7, #8]
 8003d92:	4613      	mov	r3, r2
 8003d94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d96:	f7ff fa29 	bl	80031ec <HAL_GetTick>
 8003d9a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	f040 8214 	bne.w	80041d2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	2319      	movs	r3, #25
 8003db0:	2201      	movs	r2, #1
 8003db2:	497b      	ldr	r1, [pc, #492]	@ (8003fa0 <HAL_I2C_Mem_Read+0x224>)
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fcbf 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e207      	b.n	80041d4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d101      	bne.n	8003dd2 <HAL_I2C_Mem_Read+0x56>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e200      	b.n	80041d4 <HAL_I2C_Mem_Read+0x458>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d007      	beq.n	8003df8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2222      	movs	r2, #34	@ 0x22
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2240      	movs	r2, #64	@ 0x40
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003e28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4a5b      	ldr	r2, [pc, #364]	@ (8003fa4 <HAL_I2C_Mem_Read+0x228>)
 8003e38:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e3a:	88f8      	ldrh	r0, [r7, #6]
 8003e3c:	893a      	ldrh	r2, [r7, #8]
 8003e3e:	8979      	ldrh	r1, [r7, #10]
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	9301      	str	r3, [sp, #4]
 8003e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	4603      	mov	r3, r0
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fb8c 	bl	8004568 <I2C_RequestMemoryRead>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e1bc      	b.n	80041d4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d113      	bne.n	8003e8a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e62:	2300      	movs	r3, #0
 8003e64:	623b      	str	r3, [r7, #32]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	623b      	str	r3, [r7, #32]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	623b      	str	r3, [r7, #32]
 8003e76:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e190      	b.n	80041ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d11b      	bne.n	8003eca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ea0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	61fb      	str	r3, [r7, #28]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	61fb      	str	r3, [r7, #28]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ec6:	601a      	str	r2, [r3, #0]
 8003ec8:	e170      	b.n	80041ac <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d11b      	bne.n	8003f0a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ee0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ef0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695b      	ldr	r3, [r3, #20]
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	61bb      	str	r3, [r7, #24]
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	e150      	b.n	80041ac <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003f20:	e144      	b.n	80041ac <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	f200 80f1 	bhi.w	800410e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d123      	bne.n	8003f7c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f36:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fda7 	bl	8004a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e145      	b.n	80041d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f7a:	e117      	b.n	80041ac <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d14e      	bne.n	8004022 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	4906      	ldr	r1, [pc, #24]	@ (8003fa8 <HAL_I2C_Mem_Read+0x22c>)
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 fbd2 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d008      	beq.n	8003fac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e11a      	b.n	80041d4 <HAL_I2C_Mem_Read+0x458>
 8003f9e:	bf00      	nop
 8003fa0:	00100002 	.word	0x00100002
 8003fa4:	ffff0000 	.word	0xffff0000
 8003fa8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004020:	e0c4      	b.n	80041ac <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004028:	2200      	movs	r2, #0
 800402a:	496c      	ldr	r1, [pc, #432]	@ (80041dc <HAL_I2C_Mem_Read+0x460>)
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fb83 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0cb      	b.n	80041d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800404a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691a      	ldr	r2, [r3, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	b2d2      	uxtb	r2, r2
 8004058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29a      	uxth	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800407e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004084:	2200      	movs	r2, #0
 8004086:	4955      	ldr	r1, [pc, #340]	@ (80041dc <HAL_I2C_Mem_Read+0x460>)
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 fb55 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d001      	beq.n	8004098 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e09d      	b.n	80041d4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691a      	ldr	r2, [r3, #16]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b2:	b2d2      	uxtb	r2, r2
 80040b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e4:	b2d2      	uxtb	r2, r2
 80040e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800410c:	e04e      	b.n	80041ac <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800410e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004110:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fcba 	bl	8004a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e058      	b.n	80041d4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	691a      	ldr	r2, [r3, #16]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800414a:	b29b      	uxth	r3, r3
 800414c:	3b01      	subs	r3, #1
 800414e:	b29a      	uxth	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b04      	cmp	r3, #4
 8004160:	d124      	bne.n	80041ac <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004166:	2b03      	cmp	r3, #3
 8004168:	d107      	bne.n	800417a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004178:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691a      	ldr	r2, [r3, #16]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004196:	3b01      	subs	r3, #1
 8004198:	b29a      	uxth	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f47f aeb6 	bne.w	8003f22 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2220      	movs	r2, #32
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e000      	b.n	80041d4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80041d2:	2302      	movs	r3, #2
  }
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3728      	adds	r7, #40	@ 0x28
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	00010004 	.word	0x00010004

080041e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	@ 0x28
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	460b      	mov	r3, r1
 80041ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80041f0:	f7fe fffc 	bl	80031ec <HAL_GetTick>
 80041f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b20      	cmp	r3, #32
 8004204:	f040 8111 	bne.w	800442a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	2319      	movs	r3, #25
 800420e:	2201      	movs	r2, #1
 8004210:	4988      	ldr	r1, [pc, #544]	@ (8004434 <HAL_I2C_IsDeviceReady+0x254>)
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fa90 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800421e:	2302      	movs	r3, #2
 8004220:	e104      	b.n	800442c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_I2C_IsDeviceReady+0x50>
 800422c:	2302      	movs	r3, #2
 800422e:	e0fd      	b.n	800442c <HAL_I2C_IsDeviceReady+0x24c>
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b01      	cmp	r3, #1
 8004244:	d007      	beq.n	8004256 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0201 	orr.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004264:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2224      	movs	r2, #36	@ 0x24
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4a70      	ldr	r2, [pc, #448]	@ (8004438 <HAL_I2C_IsDeviceReady+0x258>)
 8004278:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004288:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2200      	movs	r2, #0
 8004292:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fa4e 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00d      	beq.n	80042be <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042b0:	d103      	bne.n	80042ba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042b8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e0b6      	b.n	800442c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042be:	897b      	ldrh	r3, [r7, #10]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	461a      	mov	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042cc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80042ce:	f7fe ff8d 	bl	80031ec <HAL_GetTick>
 80042d2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b02      	cmp	r3, #2
 80042e0:	bf0c      	ite	eq
 80042e2:	2301      	moveq	r3, #1
 80042e4:	2300      	movne	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695b      	ldr	r3, [r3, #20]
 80042f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042f8:	bf0c      	ite	eq
 80042fa:	2301      	moveq	r3, #1
 80042fc:	2300      	movne	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004302:	e025      	b.n	8004350 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004304:	f7fe ff72 	bl	80031ec <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d302      	bcc.n	800431a <HAL_I2C_IsDeviceReady+0x13a>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d103      	bne.n	8004322 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	22a0      	movs	r2, #160	@ 0xa0
 800431e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	695b      	ldr	r3, [r3, #20]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b02      	cmp	r3, #2
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2ba0      	cmp	r3, #160	@ 0xa0
 800435a:	d005      	beq.n	8004368 <HAL_I2C_IsDeviceReady+0x188>
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d102      	bne.n	8004368 <HAL_I2C_IsDeviceReady+0x188>
 8004362:	7dbb      	ldrb	r3, [r7, #22]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0cd      	beq.n	8004304 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2220      	movs	r2, #32
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b02      	cmp	r3, #2
 800437c:	d129      	bne.n	80043d2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800438c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	2319      	movs	r3, #25
 80043aa:	2201      	movs	r2, #1
 80043ac:	4921      	ldr	r1, [pc, #132]	@ (8004434 <HAL_I2C_IsDeviceReady+0x254>)
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f9c2 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e036      	b.n	800442c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e02c      	b.n	800442c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043e0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043ea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	2319      	movs	r3, #25
 80043f2:	2201      	movs	r2, #1
 80043f4:	490f      	ldr	r1, [pc, #60]	@ (8004434 <HAL_I2C_IsDeviceReady+0x254>)
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f99e 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e012      	b.n	800442c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	3301      	adds	r3, #1
 800440a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	429a      	cmp	r2, r3
 8004412:	f4ff af32 	bcc.w	800427a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2220      	movs	r2, #32
 800441a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800442a:	2302      	movs	r3, #2
  }
}
 800442c:	4618      	mov	r0, r3
 800442e:	3720      	adds	r7, #32
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	00100002 	.word	0x00100002
 8004438:	ffff0000 	.word	0xffff0000

0800443c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af02      	add	r7, sp, #8
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	4608      	mov	r0, r1
 8004446:	4611      	mov	r1, r2
 8004448:	461a      	mov	r2, r3
 800444a:	4603      	mov	r3, r0
 800444c:	817b      	strh	r3, [r7, #10]
 800444e:	460b      	mov	r3, r1
 8004450:	813b      	strh	r3, [r7, #8]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004464:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	2200      	movs	r2, #0
 800446e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f960 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00d      	beq.n	800449a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800448c:	d103      	bne.n	8004496 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004494:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e05f      	b.n	800455a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800449a:	897b      	ldrh	r3, [r7, #10]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	6a3a      	ldr	r2, [r7, #32]
 80044ae:	492d      	ldr	r1, [pc, #180]	@ (8004564 <I2C_RequestMemoryWrite+0x128>)
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f9bb 	bl	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e04c      	b.n	800455a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044d8:	6a39      	ldr	r1, [r7, #32]
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fa46 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00d      	beq.n	8004502 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d107      	bne.n	80044fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e02b      	b.n	800455a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d105      	bne.n	8004514 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004508:	893b      	ldrh	r3, [r7, #8]
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	611a      	str	r2, [r3, #16]
 8004512:	e021      	b.n	8004558 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004514:	893b      	ldrh	r3, [r7, #8]
 8004516:	0a1b      	lsrs	r3, r3, #8
 8004518:	b29b      	uxth	r3, r3
 800451a:	b2da      	uxtb	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004524:	6a39      	ldr	r1, [r7, #32]
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 fa20 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00d      	beq.n	800454e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	2b04      	cmp	r3, #4
 8004538:	d107      	bne.n	800454a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004548:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e005      	b.n	800455a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800454e:	893b      	ldrh	r3, [r7, #8]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	00010002 	.word	0x00010002

08004568 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	4608      	mov	r0, r1
 8004572:	4611      	mov	r1, r2
 8004574:	461a      	mov	r2, r3
 8004576:	4603      	mov	r3, r0
 8004578:	817b      	strh	r3, [r7, #10]
 800457a:	460b      	mov	r3, r1
 800457c:	813b      	strh	r3, [r7, #8]
 800457e:	4613      	mov	r3, r2
 8004580:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004590:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f000 f8c2 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00d      	beq.n	80045d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045c8:	d103      	bne.n	80045d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e0aa      	b.n	800472c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045d6:	897b      	ldrh	r3, [r7, #10]
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	6a3a      	ldr	r2, [r7, #32]
 80045ea:	4952      	ldr	r1, [pc, #328]	@ (8004734 <I2C_RequestMemoryRead+0x1cc>)
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 f91d 	bl	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e097      	b.n	800472c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	617b      	str	r3, [r7, #20]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004614:	6a39      	ldr	r1, [r7, #32]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 f9a8 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004626:	2b04      	cmp	r3, #4
 8004628:	d107      	bne.n	800463a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004638:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e076      	b.n	800472c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d105      	bne.n	8004650 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004644:	893b      	ldrh	r3, [r7, #8]
 8004646:	b2da      	uxtb	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	611a      	str	r2, [r3, #16]
 800464e:	e021      	b.n	8004694 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004650:	893b      	ldrh	r3, [r7, #8]
 8004652:	0a1b      	lsrs	r3, r3, #8
 8004654:	b29b      	uxth	r3, r3
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800465e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004660:	6a39      	ldr	r1, [r7, #32]
 8004662:	68f8      	ldr	r0, [r7, #12]
 8004664:	f000 f982 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00d      	beq.n	800468a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004672:	2b04      	cmp	r3, #4
 8004674:	d107      	bne.n	8004686 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004684:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e050      	b.n	800472c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800468a:	893b      	ldrh	r3, [r7, #8]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004696:	6a39      	ldr	r1, [r7, #32]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f967 	bl	800496c <I2C_WaitOnTXEFlagUntilTimeout>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d00d      	beq.n	80046c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d107      	bne.n	80046bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e035      	b.n	800472c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	6a3b      	ldr	r3, [r7, #32]
 80046d6:	2200      	movs	r2, #0
 80046d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f82b 	bl	8004738 <I2C_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00d      	beq.n	8004704 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046f6:	d103      	bne.n	8004700 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e013      	b.n	800472c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004704:	897b      	ldrh	r3, [r7, #10]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	b2da      	uxtb	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004716:	6a3a      	ldr	r2, [r7, #32]
 8004718:	4906      	ldr	r1, [pc, #24]	@ (8004734 <I2C_RequestMemoryRead+0x1cc>)
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 f886 	bl	800482c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	00010002 	.word	0x00010002

08004738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004748:	e048      	b.n	80047dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004750:	d044      	beq.n	80047dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004752:	f7fe fd4b 	bl	80031ec <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d302      	bcc.n	8004768 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d139      	bne.n	80047dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	0c1b      	lsrs	r3, r3, #16
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b01      	cmp	r3, #1
 8004770:	d10d      	bne.n	800478e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	43da      	mvns	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4013      	ands	r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	e00c      	b.n	80047a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	43da      	mvns	r2, r3
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	4013      	ands	r3, r2
 800479a:	b29b      	uxth	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	79fb      	ldrb	r3, [r7, #7]
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d116      	bne.n	80047dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c8:	f043 0220 	orr.w	r2, r3, #32
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e023      	b.n	8004824 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	0c1b      	lsrs	r3, r3, #16
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d10d      	bne.n	8004802 <I2C_WaitOnFlagUntilTimeout+0xca>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	43da      	mvns	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4013      	ands	r3, r2
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	e00c      	b.n	800481c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	43da      	mvns	r2, r3
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	4013      	ands	r3, r2
 800480e:	b29b      	uxth	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	bf0c      	ite	eq
 8004814:	2301      	moveq	r3, #1
 8004816:	2300      	movne	r3, #0
 8004818:	b2db      	uxtb	r3, r3
 800481a:	461a      	mov	r2, r3
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	429a      	cmp	r2, r3
 8004820:	d093      	beq.n	800474a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800483a:	e071      	b.n	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800484a:	d123      	bne.n	8004894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800485a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004864:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004880:	f043 0204 	orr.w	r2, r3, #4
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e067      	b.n	8004964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489a:	d041      	beq.n	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800489c:	f7fe fca6 	bl	80031ec <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d302      	bcc.n	80048b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d136      	bne.n	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	0c1b      	lsrs	r3, r3, #16
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d10c      	bne.n	80048d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	43da      	mvns	r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4013      	ands	r3, r2
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	bf14      	ite	ne
 80048ce:	2301      	movne	r3, #1
 80048d0:	2300      	moveq	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	e00b      	b.n	80048ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	43da      	mvns	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4013      	ands	r3, r2
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d016      	beq.n	8004920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	f043 0220 	orr.w	r2, r3, #32
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e021      	b.n	8004964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	0c1b      	lsrs	r3, r3, #16
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b01      	cmp	r3, #1
 8004928:	d10c      	bne.n	8004944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	43da      	mvns	r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4013      	ands	r3, r2
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	bf14      	ite	ne
 800493c:	2301      	movne	r3, #1
 800493e:	2300      	moveq	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	e00b      	b.n	800495c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	43da      	mvns	r2, r3
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4013      	ands	r3, r2
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	bf14      	ite	ne
 8004956:	2301      	movne	r3, #1
 8004958:	2300      	moveq	r3, #0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b00      	cmp	r3, #0
 800495e:	f47f af6d 	bne.w	800483c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004978:	e034      	b.n	80049e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f8e3 	bl	8004b46 <I2C_IsAcknowledgeFailed>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e034      	b.n	80049f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d028      	beq.n	80049e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004992:	f7fe fc2b 	bl	80031ec <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d302      	bcc.n	80049a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d11d      	bne.n	80049e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b2:	2b80      	cmp	r3, #128	@ 0x80
 80049b4:	d016      	beq.n	80049e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d0:	f043 0220 	orr.w	r2, r3, #32
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e007      	b.n	80049f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ee:	2b80      	cmp	r3, #128	@ 0x80
 80049f0:	d1c3      	bne.n	800497a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3710      	adds	r7, #16
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a08:	e034      	b.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f89b 	bl	8004b46 <I2C_IsAcknowledgeFailed>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e034      	b.n	8004a84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a20:	d028      	beq.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a22:	f7fe fbe3 	bl	80031ec <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d302      	bcc.n	8004a38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d11d      	bne.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0304 	and.w	r3, r3, #4
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d016      	beq.n	8004a74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a60:	f043 0220 	orr.w	r2, r3, #32
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e007      	b.n	8004a84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d1c3      	bne.n	8004a0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a98:	e049      	b.n	8004b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d119      	bne.n	8004adc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0210 	mvn.w	r2, #16
 8004ab0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e030      	b.n	8004b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004adc:	f7fe fb86 	bl	80031ec <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d302      	bcc.n	8004af2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d11d      	bne.n	8004b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004afc:	2b40      	cmp	r3, #64	@ 0x40
 8004afe:	d016      	beq.n	8004b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	f043 0220 	orr.w	r2, r3, #32
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e007      	b.n	8004b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b38:	2b40      	cmp	r3, #64	@ 0x40
 8004b3a:	d1ae      	bne.n	8004a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b46:	b480      	push	{r7}
 8004b48:	b083      	sub	sp, #12
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695b      	ldr	r3, [r3, #20]
 8004b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b5c:	d11b      	bne.n	8004b96 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b66:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b82:	f043 0204 	orr.w	r2, r3, #4
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e267      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d075      	beq.n	8004cae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bc2:	4b88      	ldr	r3, [pc, #544]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d00c      	beq.n	8004be8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bce:	4b85      	ldr	r3, [pc, #532]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bd6:	2b08      	cmp	r3, #8
 8004bd8:	d112      	bne.n	8004c00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bda:	4b82      	ldr	r3, [pc, #520]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004be2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004be6:	d10b      	bne.n	8004c00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004be8:	4b7e      	ldr	r3, [pc, #504]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d05b      	beq.n	8004cac <HAL_RCC_OscConfig+0x108>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d157      	bne.n	8004cac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e242      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c08:	d106      	bne.n	8004c18 <HAL_RCC_OscConfig+0x74>
 8004c0a:	4b76      	ldr	r3, [pc, #472]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a75      	ldr	r2, [pc, #468]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004c10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c14:	6013      	str	r3, [r2, #0]
 8004c16:	e01d      	b.n	8004c54 <HAL_RCC_OscConfig+0xb0>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c20:	d10c      	bne.n	8004c3c <HAL_RCC_OscConfig+0x98>
 8004c22:	4b70      	ldr	r3, [pc, #448]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a6f      	ldr	r2, [pc, #444]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004c28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	4b6d      	ldr	r3, [pc, #436]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a6c      	ldr	r2, [pc, #432]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	e00b      	b.n	8004c54 <HAL_RCC_OscConfig+0xb0>
 8004c3c:	4b69      	ldr	r3, [pc, #420]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a68      	ldr	r2, [pc, #416]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004c42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	4b66      	ldr	r3, [pc, #408]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a65      	ldr	r2, [pc, #404]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004c4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d013      	beq.n	8004c84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5c:	f7fe fac6 	bl	80031ec <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c62:	e008      	b.n	8004c76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c64:	f7fe fac2 	bl	80031ec <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b64      	cmp	r3, #100	@ 0x64
 8004c70:	d901      	bls.n	8004c76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e207      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c76:	4b5b      	ldr	r3, [pc, #364]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f0      	beq.n	8004c64 <HAL_RCC_OscConfig+0xc0>
 8004c82:	e014      	b.n	8004cae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c84:	f7fe fab2 	bl	80031ec <HAL_GetTick>
 8004c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c8a:	e008      	b.n	8004c9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c8c:	f7fe faae 	bl	80031ec <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	2b64      	cmp	r3, #100	@ 0x64
 8004c98:	d901      	bls.n	8004c9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e1f3      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c9e:	4b51      	ldr	r3, [pc, #324]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1f0      	bne.n	8004c8c <HAL_RCC_OscConfig+0xe8>
 8004caa:	e000      	b.n	8004cae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d063      	beq.n	8004d82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cba:	4b4a      	ldr	r3, [pc, #296]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f003 030c 	and.w	r3, r3, #12
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00b      	beq.n	8004cde <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cc6:	4b47      	ldr	r3, [pc, #284]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d11c      	bne.n	8004d0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cd2:	4b44      	ldr	r3, [pc, #272]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d116      	bne.n	8004d0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cde:	4b41      	ldr	r3, [pc, #260]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d005      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x152>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d001      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e1c7      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4937      	ldr	r1, [pc, #220]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d0a:	e03a      	b.n	8004d82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d020      	beq.n	8004d56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d14:	4b34      	ldr	r3, [pc, #208]	@ (8004de8 <HAL_RCC_OscConfig+0x244>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1a:	f7fe fa67 	bl	80031ec <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d22:	f7fe fa63 	bl	80031ec <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e1a8      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d34:	4b2b      	ldr	r3, [pc, #172]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d40:	4b28      	ldr	r3, [pc, #160]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	4925      	ldr	r1, [pc, #148]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	600b      	str	r3, [r1, #0]
 8004d54:	e015      	b.n	8004d82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d56:	4b24      	ldr	r3, [pc, #144]	@ (8004de8 <HAL_RCC_OscConfig+0x244>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5c:	f7fe fa46 	bl	80031ec <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d64:	f7fe fa42 	bl	80031ec <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e187      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d76:	4b1b      	ldr	r3, [pc, #108]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1f0      	bne.n	8004d64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0308 	and.w	r3, r3, #8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d036      	beq.n	8004dfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d016      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d96:	4b15      	ldr	r3, [pc, #84]	@ (8004dec <HAL_RCC_OscConfig+0x248>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d9c:	f7fe fa26 	bl	80031ec <HAL_GetTick>
 8004da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da4:	f7fe fa22 	bl	80031ec <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e167      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004db6:	4b0b      	ldr	r3, [pc, #44]	@ (8004de4 <HAL_RCC_OscConfig+0x240>)
 8004db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x200>
 8004dc2:	e01b      	b.n	8004dfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dc4:	4b09      	ldr	r3, [pc, #36]	@ (8004dec <HAL_RCC_OscConfig+0x248>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dca:	f7fe fa0f 	bl	80031ec <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd0:	e00e      	b.n	8004df0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dd2:	f7fe fa0b 	bl	80031ec <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d907      	bls.n	8004df0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e150      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
 8004de4:	40023800 	.word	0x40023800
 8004de8:	42470000 	.word	0x42470000
 8004dec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004df0:	4b88      	ldr	r3, [pc, #544]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1ea      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	f000 8097 	beq.w	8004f38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e0e:	4b81      	ldr	r3, [pc, #516]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10f      	bne.n	8004e3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]
 8004e1e:	4b7d      	ldr	r3, [pc, #500]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	4a7c      	ldr	r2, [pc, #496]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e2a:	4b7a      	ldr	r3, [pc, #488]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e32:	60bb      	str	r3, [r7, #8]
 8004e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e36:	2301      	movs	r3, #1
 8004e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3a:	4b77      	ldr	r3, [pc, #476]	@ (8005018 <HAL_RCC_OscConfig+0x474>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d118      	bne.n	8004e78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e46:	4b74      	ldr	r3, [pc, #464]	@ (8005018 <HAL_RCC_OscConfig+0x474>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a73      	ldr	r2, [pc, #460]	@ (8005018 <HAL_RCC_OscConfig+0x474>)
 8004e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e52:	f7fe f9cb 	bl	80031ec <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e5a:	f7fe f9c7 	bl	80031ec <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e10c      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e6c:	4b6a      	ldr	r3, [pc, #424]	@ (8005018 <HAL_RCC_OscConfig+0x474>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0f0      	beq.n	8004e5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d106      	bne.n	8004e8e <HAL_RCC_OscConfig+0x2ea>
 8004e80:	4b64      	ldr	r3, [pc, #400]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e84:	4a63      	ldr	r2, [pc, #396]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004e86:	f043 0301 	orr.w	r3, r3, #1
 8004e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e8c:	e01c      	b.n	8004ec8 <HAL_RCC_OscConfig+0x324>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	2b05      	cmp	r3, #5
 8004e94:	d10c      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x30c>
 8004e96:	4b5f      	ldr	r3, [pc, #380]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9a:	4a5e      	ldr	r2, [pc, #376]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004e9c:	f043 0304 	orr.w	r3, r3, #4
 8004ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea2:	4b5c      	ldr	r3, [pc, #368]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea6:	4a5b      	ldr	r2, [pc, #364]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eae:	e00b      	b.n	8004ec8 <HAL_RCC_OscConfig+0x324>
 8004eb0:	4b58      	ldr	r3, [pc, #352]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb4:	4a57      	ldr	r2, [pc, #348]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004eb6:	f023 0301 	bic.w	r3, r3, #1
 8004eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ebc:	4b55      	ldr	r3, [pc, #340]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ec0:	4a54      	ldr	r2, [pc, #336]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004ec2:	f023 0304 	bic.w	r3, r3, #4
 8004ec6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d015      	beq.n	8004efc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed0:	f7fe f98c 	bl	80031ec <HAL_GetTick>
 8004ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed6:	e00a      	b.n	8004eee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed8:	f7fe f988 	bl	80031ec <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e0cb      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eee:	4b49      	ldr	r3, [pc, #292]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d0ee      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x334>
 8004efa:	e014      	b.n	8004f26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004efc:	f7fe f976 	bl	80031ec <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f02:	e00a      	b.n	8004f1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f04:	f7fe f972 	bl	80031ec <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e0b5      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f1a:	4b3e      	ldr	r3, [pc, #248]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1ee      	bne.n	8004f04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d105      	bne.n	8004f38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f2c:	4b39      	ldr	r3, [pc, #228]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f30:	4a38      	ldr	r2, [pc, #224]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004f32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 80a1 	beq.w	8005084 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f42:	4b34      	ldr	r3, [pc, #208]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d05c      	beq.n	8005008 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d141      	bne.n	8004fda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f56:	4b31      	ldr	r3, [pc, #196]	@ (800501c <HAL_RCC_OscConfig+0x478>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5c:	f7fe f946 	bl	80031ec <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f64:	f7fe f942 	bl	80031ec <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e087      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f76:	4b27      	ldr	r3, [pc, #156]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f0      	bne.n	8004f64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69da      	ldr	r2, [r3, #28]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f90:	019b      	lsls	r3, r3, #6
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f98:	085b      	lsrs	r3, r3, #1
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	041b      	lsls	r3, r3, #16
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa4:	061b      	lsls	r3, r3, #24
 8004fa6:	491b      	ldr	r1, [pc, #108]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fac:	4b1b      	ldr	r3, [pc, #108]	@ (800501c <HAL_RCC_OscConfig+0x478>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb2:	f7fe f91b 	bl	80031ec <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fba:	f7fe f917 	bl	80031ec <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e05c      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fcc:	4b11      	ldr	r3, [pc, #68]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <HAL_RCC_OscConfig+0x416>
 8004fd8:	e054      	b.n	8005084 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fda:	4b10      	ldr	r3, [pc, #64]	@ (800501c <HAL_RCC_OscConfig+0x478>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe0:	f7fe f904 	bl	80031ec <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe8:	f7fe f900 	bl	80031ec <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e045      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffa:	4b06      	ldr	r3, [pc, #24]	@ (8005014 <HAL_RCC_OscConfig+0x470>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x444>
 8005006:	e03d      	b.n	8005084 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d107      	bne.n	8005020 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e038      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
 8005014:	40023800 	.word	0x40023800
 8005018:	40007000 	.word	0x40007000
 800501c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005020:	4b1b      	ldr	r3, [pc, #108]	@ (8005090 <HAL_RCC_OscConfig+0x4ec>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d028      	beq.n	8005080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005038:	429a      	cmp	r2, r3
 800503a:	d121      	bne.n	8005080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005046:	429a      	cmp	r2, r3
 8005048:	d11a      	bne.n	8005080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005050:	4013      	ands	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005056:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005058:	4293      	cmp	r3, r2
 800505a:	d111      	bne.n	8005080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	3b01      	subs	r3, #1
 800506a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800506c:	429a      	cmp	r2, r3
 800506e:	d107      	bne.n	8005080 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800507c:	429a      	cmp	r2, r3
 800507e:	d001      	beq.n	8005084 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	40023800 	.word	0x40023800

08005094 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d101      	bne.n	80050a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e0cc      	b.n	8005242 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050a8:	4b68      	ldr	r3, [pc, #416]	@ (800524c <HAL_RCC_ClockConfig+0x1b8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0307 	and.w	r3, r3, #7
 80050b0:	683a      	ldr	r2, [r7, #0]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d90c      	bls.n	80050d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050b6:	4b65      	ldr	r3, [pc, #404]	@ (800524c <HAL_RCC_ClockConfig+0x1b8>)
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	b2d2      	uxtb	r2, r2
 80050bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050be:	4b63      	ldr	r3, [pc, #396]	@ (800524c <HAL_RCC_ClockConfig+0x1b8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0307 	and.w	r3, r3, #7
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d001      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0b8      	b.n	8005242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d020      	beq.n	800511e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050e8:	4b59      	ldr	r3, [pc, #356]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	4a58      	ldr	r2, [pc, #352]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 80050ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0308 	and.w	r3, r3, #8
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005100:	4b53      	ldr	r3, [pc, #332]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4a52      	ldr	r2, [pc, #328]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800510a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800510c:	4b50      	ldr	r3, [pc, #320]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	494d      	ldr	r1, [pc, #308]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	4313      	orrs	r3, r2
 800511c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d044      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d107      	bne.n	8005142 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005132:	4b47      	ldr	r3, [pc, #284]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d119      	bne.n	8005172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e07f      	b.n	8005242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b02      	cmp	r3, #2
 8005148:	d003      	beq.n	8005152 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800514e:	2b03      	cmp	r3, #3
 8005150:	d107      	bne.n	8005162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005152:	4b3f      	ldr	r3, [pc, #252]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d109      	bne.n	8005172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e06f      	b.n	8005242 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005162:	4b3b      	ldr	r3, [pc, #236]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	e067      	b.n	8005242 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005172:	4b37      	ldr	r3, [pc, #220]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f023 0203 	bic.w	r2, r3, #3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	4934      	ldr	r1, [pc, #208]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 8005180:	4313      	orrs	r3, r2
 8005182:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005184:	f7fe f832 	bl	80031ec <HAL_GetTick>
 8005188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518a:	e00a      	b.n	80051a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800518c:	f7fe f82e 	bl	80031ec <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	f241 3288 	movw	r2, #5000	@ 0x1388
 800519a:	4293      	cmp	r3, r2
 800519c:	d901      	bls.n	80051a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800519e:	2303      	movs	r3, #3
 80051a0:	e04f      	b.n	8005242 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a2:	4b2b      	ldr	r3, [pc, #172]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 020c 	and.w	r2, r3, #12
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d1eb      	bne.n	800518c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051b4:	4b25      	ldr	r3, [pc, #148]	@ (800524c <HAL_RCC_ClockConfig+0x1b8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d20c      	bcs.n	80051dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051c2:	4b22      	ldr	r3, [pc, #136]	@ (800524c <HAL_RCC_ClockConfig+0x1b8>)
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ca:	4b20      	ldr	r3, [pc, #128]	@ (800524c <HAL_RCC_ClockConfig+0x1b8>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0307 	and.w	r3, r3, #7
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d001      	beq.n	80051dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e032      	b.n	8005242 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0304 	and.w	r3, r3, #4
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051e8:	4b19      	ldr	r3, [pc, #100]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	4916      	ldr	r1, [pc, #88]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d009      	beq.n	800521a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005206:	4b12      	ldr	r3, [pc, #72]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	490e      	ldr	r1, [pc, #56]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 8005216:	4313      	orrs	r3, r2
 8005218:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800521a:	f000 f821 	bl	8005260 <HAL_RCC_GetSysClockFreq>
 800521e:	4602      	mov	r2, r0
 8005220:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <HAL_RCC_ClockConfig+0x1bc>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	091b      	lsrs	r3, r3, #4
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	490a      	ldr	r1, [pc, #40]	@ (8005254 <HAL_RCC_ClockConfig+0x1c0>)
 800522c:	5ccb      	ldrb	r3, [r1, r3]
 800522e:	fa22 f303 	lsr.w	r3, r2, r3
 8005232:	4a09      	ldr	r2, [pc, #36]	@ (8005258 <HAL_RCC_ClockConfig+0x1c4>)
 8005234:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005236:	4b09      	ldr	r3, [pc, #36]	@ (800525c <HAL_RCC_ClockConfig+0x1c8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4618      	mov	r0, r3
 800523c:	f7fd ff92 	bl	8003164 <HAL_InitTick>

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	40023c00 	.word	0x40023c00
 8005250:	40023800 	.word	0x40023800
 8005254:	0800b5e4 	.word	0x0800b5e4
 8005258:	20000008 	.word	0x20000008
 800525c:	2000000c 	.word	0x2000000c

08005260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005264:	b094      	sub	sp, #80	@ 0x50
 8005266:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005278:	4b79      	ldr	r3, [pc, #484]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x200>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 030c 	and.w	r3, r3, #12
 8005280:	2b08      	cmp	r3, #8
 8005282:	d00d      	beq.n	80052a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005284:	2b08      	cmp	r3, #8
 8005286:	f200 80e1 	bhi.w	800544c <HAL_RCC_GetSysClockFreq+0x1ec>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_RCC_GetSysClockFreq+0x34>
 800528e:	2b04      	cmp	r3, #4
 8005290:	d003      	beq.n	800529a <HAL_RCC_GetSysClockFreq+0x3a>
 8005292:	e0db      	b.n	800544c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005294:	4b73      	ldr	r3, [pc, #460]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x204>)
 8005296:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005298:	e0db      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800529a:	4b73      	ldr	r3, [pc, #460]	@ (8005468 <HAL_RCC_GetSysClockFreq+0x208>)
 800529c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800529e:	e0d8      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x200>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x200>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d063      	beq.n	800537e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x200>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	099b      	lsrs	r3, r3, #6
 80052bc:	2200      	movs	r2, #0
 80052be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80052ca:	2300      	movs	r3, #0
 80052cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80052ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052d2:	4622      	mov	r2, r4
 80052d4:	462b      	mov	r3, r5
 80052d6:	f04f 0000 	mov.w	r0, #0
 80052da:	f04f 0100 	mov.w	r1, #0
 80052de:	0159      	lsls	r1, r3, #5
 80052e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052e4:	0150      	lsls	r0, r2, #5
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4621      	mov	r1, r4
 80052ec:	1a51      	subs	r1, r2, r1
 80052ee:	6139      	str	r1, [r7, #16]
 80052f0:	4629      	mov	r1, r5
 80052f2:	eb63 0301 	sbc.w	r3, r3, r1
 80052f6:	617b      	str	r3, [r7, #20]
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005304:	4659      	mov	r1, fp
 8005306:	018b      	lsls	r3, r1, #6
 8005308:	4651      	mov	r1, sl
 800530a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800530e:	4651      	mov	r1, sl
 8005310:	018a      	lsls	r2, r1, #6
 8005312:	4651      	mov	r1, sl
 8005314:	ebb2 0801 	subs.w	r8, r2, r1
 8005318:	4659      	mov	r1, fp
 800531a:	eb63 0901 	sbc.w	r9, r3, r1
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800532a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800532e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005332:	4690      	mov	r8, r2
 8005334:	4699      	mov	r9, r3
 8005336:	4623      	mov	r3, r4
 8005338:	eb18 0303 	adds.w	r3, r8, r3
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	462b      	mov	r3, r5
 8005340:	eb49 0303 	adc.w	r3, r9, r3
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005352:	4629      	mov	r1, r5
 8005354:	024b      	lsls	r3, r1, #9
 8005356:	4621      	mov	r1, r4
 8005358:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800535c:	4621      	mov	r1, r4
 800535e:	024a      	lsls	r2, r1, #9
 8005360:	4610      	mov	r0, r2
 8005362:	4619      	mov	r1, r3
 8005364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005366:	2200      	movs	r2, #0
 8005368:	62bb      	str	r3, [r7, #40]	@ 0x28
 800536a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800536c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005370:	f7fa ff7e 	bl	8000270 <__aeabi_uldivmod>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4613      	mov	r3, r2
 800537a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800537c:	e058      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800537e:	4b38      	ldr	r3, [pc, #224]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x200>)
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	099b      	lsrs	r3, r3, #6
 8005384:	2200      	movs	r2, #0
 8005386:	4618      	mov	r0, r3
 8005388:	4611      	mov	r1, r2
 800538a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800538e:	623b      	str	r3, [r7, #32]
 8005390:	2300      	movs	r3, #0
 8005392:	627b      	str	r3, [r7, #36]	@ 0x24
 8005394:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005398:	4642      	mov	r2, r8
 800539a:	464b      	mov	r3, r9
 800539c:	f04f 0000 	mov.w	r0, #0
 80053a0:	f04f 0100 	mov.w	r1, #0
 80053a4:	0159      	lsls	r1, r3, #5
 80053a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053aa:	0150      	lsls	r0, r2, #5
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4641      	mov	r1, r8
 80053b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80053b6:	4649      	mov	r1, r9
 80053b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053d0:	ebb2 040a 	subs.w	r4, r2, sl
 80053d4:	eb63 050b 	sbc.w	r5, r3, fp
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	00eb      	lsls	r3, r5, #3
 80053e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053e6:	00e2      	lsls	r2, r4, #3
 80053e8:	4614      	mov	r4, r2
 80053ea:	461d      	mov	r5, r3
 80053ec:	4643      	mov	r3, r8
 80053ee:	18e3      	adds	r3, r4, r3
 80053f0:	603b      	str	r3, [r7, #0]
 80053f2:	464b      	mov	r3, r9
 80053f4:	eb45 0303 	adc.w	r3, r5, r3
 80053f8:	607b      	str	r3, [r7, #4]
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	f04f 0300 	mov.w	r3, #0
 8005402:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005406:	4629      	mov	r1, r5
 8005408:	028b      	lsls	r3, r1, #10
 800540a:	4621      	mov	r1, r4
 800540c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005410:	4621      	mov	r1, r4
 8005412:	028a      	lsls	r2, r1, #10
 8005414:	4610      	mov	r0, r2
 8005416:	4619      	mov	r1, r3
 8005418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800541a:	2200      	movs	r2, #0
 800541c:	61bb      	str	r3, [r7, #24]
 800541e:	61fa      	str	r2, [r7, #28]
 8005420:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005424:	f7fa ff24 	bl	8000270 <__aeabi_uldivmod>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4613      	mov	r3, r2
 800542e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <HAL_RCC_GetSysClockFreq+0x200>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	3301      	adds	r3, #1
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005440:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005444:	fbb2 f3f3 	udiv	r3, r2, r3
 8005448:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800544a:	e002      	b.n	8005452 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800544c:	4b05      	ldr	r3, [pc, #20]	@ (8005464 <HAL_RCC_GetSysClockFreq+0x204>)
 800544e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005452:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005454:	4618      	mov	r0, r3
 8005456:	3750      	adds	r7, #80	@ 0x50
 8005458:	46bd      	mov	sp, r7
 800545a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800545e:	bf00      	nop
 8005460:	40023800 	.word	0x40023800
 8005464:	00f42400 	.word	0x00f42400
 8005468:	007a1200 	.word	0x007a1200

0800546c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005470:	4b03      	ldr	r3, [pc, #12]	@ (8005480 <HAL_RCC_GetHCLKFreq+0x14>)
 8005472:	681b      	ldr	r3, [r3, #0]
}
 8005474:	4618      	mov	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000008 	.word	0x20000008

08005484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005488:	f7ff fff0 	bl	800546c <HAL_RCC_GetHCLKFreq>
 800548c:	4602      	mov	r2, r0
 800548e:	4b05      	ldr	r3, [pc, #20]	@ (80054a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	0a9b      	lsrs	r3, r3, #10
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	4903      	ldr	r1, [pc, #12]	@ (80054a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800549a:	5ccb      	ldrb	r3, [r1, r3]
 800549c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40023800 	.word	0x40023800
 80054a8:	0800b5f4 	.word	0x0800b5f4

080054ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054b0:	f7ff ffdc 	bl	800546c <HAL_RCC_GetHCLKFreq>
 80054b4:	4602      	mov	r2, r0
 80054b6:	4b05      	ldr	r3, [pc, #20]	@ (80054cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	0b5b      	lsrs	r3, r3, #13
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	4903      	ldr	r1, [pc, #12]	@ (80054d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054c2:	5ccb      	ldrb	r3, [r1, r3]
 80054c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40023800 	.word	0x40023800
 80054d0:	0800b5f4 	.word	0x0800b5f4

080054d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e07b      	b.n	80055de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d108      	bne.n	8005500 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054f6:	d009      	beq.n	800550c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	61da      	str	r2, [r3, #28]
 80054fe:	e005      	b.n	800550c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fd fb0e 	bl	8002b48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005542:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005554:	431a      	orrs	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800555e:	431a      	orrs	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f003 0302 	and.w	r3, r3, #2
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	699b      	ldr	r3, [r3, #24]
 8005578:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005590:	ea42 0103 	orr.w	r1, r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005598:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	0c1b      	lsrs	r3, r3, #16
 80055aa:	f003 0104 	and.w	r1, r3, #4
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b2:	f003 0210 	and.w	r2, r3, #16
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	69da      	ldr	r2, [r3, #28]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b088      	sub	sp, #32
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	603b      	str	r3, [r7, #0]
 80055f2:	4613      	mov	r3, r2
 80055f4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055f6:	f7fd fdf9 	bl	80031ec <HAL_GetTick>
 80055fa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b01      	cmp	r3, #1
 800560a:	d001      	beq.n	8005610 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800560c:	2302      	movs	r3, #2
 800560e:	e12a      	b.n	8005866 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_SPI_Transmit+0x36>
 8005616:	88fb      	ldrh	r3, [r7, #6]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e122      	b.n	8005866 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_SPI_Transmit+0x48>
 800562a:	2302      	movs	r3, #2
 800562c:	e11b      	b.n	8005866 <HAL_SPI_Transmit+0x280>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2203      	movs	r2, #3
 800563a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	88fa      	ldrh	r2, [r7, #6]
 800564e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800567c:	d10f      	bne.n	800569e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800568c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800569c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a8:	2b40      	cmp	r3, #64	@ 0x40
 80056aa:	d007      	beq.n	80056bc <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056c4:	d152      	bne.n	800576c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_SPI_Transmit+0xee>
 80056ce:	8b7b      	ldrh	r3, [r7, #26]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d145      	bne.n	8005760 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d8:	881a      	ldrh	r2, [r3, #0]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e4:	1c9a      	adds	r2, r3, #2
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29a      	uxth	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056f8:	e032      	b.n	8005760 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b02      	cmp	r3, #2
 8005706:	d112      	bne.n	800572e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800570c:	881a      	ldrh	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005718:	1c9a      	adds	r2, r3, #2
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800572c:	e018      	b.n	8005760 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800572e:	f7fd fd5d 	bl	80031ec <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d803      	bhi.n	8005746 <HAL_SPI_Transmit+0x160>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005744:	d102      	bne.n	800574c <HAL_SPI_Transmit+0x166>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d109      	bne.n	8005760 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e082      	b.n	8005866 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1c7      	bne.n	80056fa <HAL_SPI_Transmit+0x114>
 800576a:	e053      	b.n	8005814 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <HAL_SPI_Transmit+0x194>
 8005774:	8b7b      	ldrh	r3, [r7, #26]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d147      	bne.n	800580a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	7812      	ldrb	r2, [r2, #0]
 8005786:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80057a0:	e033      	b.n	800580a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 0302 	and.w	r3, r3, #2
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d113      	bne.n	80057d8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	7812      	ldrb	r2, [r2, #0]
 80057bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c2:	1c5a      	adds	r2, r3, #1
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	3b01      	subs	r3, #1
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80057d6:	e018      	b.n	800580a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057d8:	f7fd fd08 	bl	80031ec <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	683a      	ldr	r2, [r7, #0]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d803      	bhi.n	80057f0 <HAL_SPI_Transmit+0x20a>
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ee:	d102      	bne.n	80057f6 <HAL_SPI_Transmit+0x210>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d109      	bne.n	800580a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e02d      	b.n	8005866 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1c6      	bne.n	80057a2 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	6839      	ldr	r1, [r7, #0]
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 fbd9 	bl	8005fd0 <SPI_EndRxTxTransaction>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2220      	movs	r2, #32
 8005828:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10a      	bne.n	8005848 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	617b      	str	r3, [r7, #20]
 8005846:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005864:	2300      	movs	r3, #0
  }
}
 8005866:	4618      	mov	r0, r3
 8005868:	3720      	adds	r7, #32
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b088      	sub	sp, #32
 8005872:	af02      	add	r7, sp, #8
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	603b      	str	r3, [r7, #0]
 800587a:	4613      	mov	r3, r2
 800587c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b01      	cmp	r3, #1
 8005888:	d001      	beq.n	800588e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800588a:	2302      	movs	r3, #2
 800588c:	e104      	b.n	8005a98 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005896:	d112      	bne.n	80058be <HAL_SPI_Receive+0x50>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d10e      	bne.n	80058be <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2204      	movs	r2, #4
 80058a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80058a8:	88fa      	ldrh	r2, [r7, #6]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	4613      	mov	r3, r2
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	68b9      	ldr	r1, [r7, #8]
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 f8f3 	bl	8005aa0 <HAL_SPI_TransmitReceive>
 80058ba:	4603      	mov	r3, r0
 80058bc:	e0ec      	b.n	8005a98 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058be:	f7fd fc95 	bl	80031ec <HAL_GetTick>
 80058c2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <HAL_SPI_Receive+0x62>
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0e1      	b.n	8005a98 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_SPI_Receive+0x74>
 80058de:	2302      	movs	r3, #2
 80058e0:	e0da      	b.n	8005a98 <HAL_SPI_Receive+0x22a>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2204      	movs	r2, #4
 80058ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	88fa      	ldrh	r2, [r7, #6]
 8005902:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	88fa      	ldrh	r2, [r7, #6]
 8005908:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005930:	d10f      	bne.n	8005952 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005940:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005950:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595c:	2b40      	cmp	r3, #64	@ 0x40
 800595e:	d007      	beq.n	8005970 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800596e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d170      	bne.n	8005a5a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005978:	e035      	b.n	80059e6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b01      	cmp	r3, #1
 8005986:	d115      	bne.n	80059b4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f103 020c 	add.w	r2, r3, #12
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005994:	7812      	ldrb	r2, [r2, #0]
 8005996:	b2d2      	uxtb	r2, r2
 8005998:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599e:	1c5a      	adds	r2, r3, #1
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	3b01      	subs	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80059b2:	e018      	b.n	80059e6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059b4:	f7fd fc1a 	bl	80031ec <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d803      	bhi.n	80059cc <HAL_SPI_Receive+0x15e>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ca:	d102      	bne.n	80059d2 <HAL_SPI_Receive+0x164>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e058      	b.n	8005a98 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1c4      	bne.n	800597a <HAL_SPI_Receive+0x10c>
 80059f0:	e038      	b.n	8005a64 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d113      	bne.n	8005a28 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0a:	b292      	uxth	r2, r2
 8005a0c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a12:	1c9a      	adds	r2, r3, #2
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	b29a      	uxth	r2, r3
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005a26:	e018      	b.n	8005a5a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a28:	f7fd fbe0 	bl	80031ec <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d803      	bhi.n	8005a40 <HAL_SPI_Receive+0x1d2>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	d102      	bne.n	8005a46 <HAL_SPI_Receive+0x1d8>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d109      	bne.n	8005a5a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e01e      	b.n	8005a98 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1c6      	bne.n	80059f2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	6839      	ldr	r1, [r7, #0]
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fa4b 	bl	8005f04 <SPI_EndRxTransaction>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2220      	movs	r2, #32
 8005a78:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005a96:	2300      	movs	r3, #0
  }
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	@ 0x28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ab2:	f7fd fb9b 	bl	80031ec <HAL_GetTick>
 8005ab6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005abe:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005ac6:	887b      	ldrh	r3, [r7, #2]
 8005ac8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005aca:	7ffb      	ldrb	r3, [r7, #31]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d00c      	beq.n	8005aea <HAL_SPI_TransmitReceive+0x4a>
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005ad6:	d106      	bne.n	8005ae6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d102      	bne.n	8005ae6 <HAL_SPI_TransmitReceive+0x46>
 8005ae0:	7ffb      	ldrb	r3, [r7, #31]
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	d001      	beq.n	8005aea <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e17f      	b.n	8005dea <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d005      	beq.n	8005afc <HAL_SPI_TransmitReceive+0x5c>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d002      	beq.n	8005afc <HAL_SPI_TransmitReceive+0x5c>
 8005af6:	887b      	ldrh	r3, [r7, #2]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e174      	b.n	8005dea <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_SPI_TransmitReceive+0x6e>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e16d      	b.n	8005dea <HAL_SPI_TransmitReceive+0x34a>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b04      	cmp	r3, #4
 8005b20:	d003      	beq.n	8005b2a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2205      	movs	r2, #5
 8005b26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	887a      	ldrh	r2, [r7, #2]
 8005b3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	887a      	ldrh	r2, [r7, #2]
 8005b40:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	887a      	ldrh	r2, [r7, #2]
 8005b4c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	887a      	ldrh	r2, [r7, #2]
 8005b52:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b6a:	2b40      	cmp	r3, #64	@ 0x40
 8005b6c:	d007      	beq.n	8005b7e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b86:	d17e      	bne.n	8005c86 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d002      	beq.n	8005b96 <HAL_SPI_TransmitReceive+0xf6>
 8005b90:	8afb      	ldrh	r3, [r7, #22]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d16c      	bne.n	8005c70 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b9a:	881a      	ldrh	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba6:	1c9a      	adds	r2, r3, #2
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bba:	e059      	b.n	8005c70 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d11b      	bne.n	8005c02 <HAL_SPI_TransmitReceive+0x162>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d016      	beq.n	8005c02 <HAL_SPI_TransmitReceive+0x162>
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d113      	bne.n	8005c02 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bde:	881a      	ldrh	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bea:	1c9a      	adds	r2, r3, #2
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	3b01      	subs	r3, #1
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d119      	bne.n	8005c44 <HAL_SPI_TransmitReceive+0x1a4>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d014      	beq.n	8005c44 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68da      	ldr	r2, [r3, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c24:	b292      	uxth	r2, r2
 8005c26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c2c:	1c9a      	adds	r2, r3, #2
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c40:	2301      	movs	r3, #1
 8005c42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c44:	f7fd fad2 	bl	80031ec <HAL_GetTick>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	6a3b      	ldr	r3, [r7, #32]
 8005c4c:	1ad3      	subs	r3, r2, r3
 8005c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c50:	429a      	cmp	r2, r3
 8005c52:	d80d      	bhi.n	8005c70 <HAL_SPI_TransmitReceive+0x1d0>
 8005c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5a:	d009      	beq.n	8005c70 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e0bc      	b.n	8005dea <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1a0      	bne.n	8005bbc <HAL_SPI_TransmitReceive+0x11c>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d19b      	bne.n	8005bbc <HAL_SPI_TransmitReceive+0x11c>
 8005c84:	e082      	b.n	8005d8c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d002      	beq.n	8005c94 <HAL_SPI_TransmitReceive+0x1f4>
 8005c8e:	8afb      	ldrh	r3, [r7, #22]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d171      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	7812      	ldrb	r2, [r2, #0]
 8005ca0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca6:	1c5a      	adds	r2, r3, #1
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cba:	e05d      	b.n	8005d78 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d11c      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x264>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d017      	beq.n	8005d04 <HAL_SPI_TransmitReceive+0x264>
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d114      	bne.n	8005d04 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	330c      	adds	r3, #12
 8005ce4:	7812      	ldrb	r2, [r2, #0]
 8005ce6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d00:	2300      	movs	r3, #0
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d119      	bne.n	8005d46 <HAL_SPI_TransmitReceive+0x2a6>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d014      	beq.n	8005d46 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d42:	2301      	movs	r3, #1
 8005d44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d46:	f7fd fa51 	bl	80031ec <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	6a3b      	ldr	r3, [r7, #32]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d803      	bhi.n	8005d5e <HAL_SPI_TransmitReceive+0x2be>
 8005d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d102      	bne.n	8005d64 <HAL_SPI_TransmitReceive+0x2c4>
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d109      	bne.n	8005d78 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e038      	b.n	8005dea <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d19c      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x21c>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d197      	bne.n	8005cbc <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d8c:	6a3a      	ldr	r2, [r7, #32]
 8005d8e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d90:	68f8      	ldr	r0, [r7, #12]
 8005d92:	f000 f91d 	bl	8005fd0 <SPI_EndRxTxTransaction>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d008      	beq.n	8005dae <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e01d      	b.n	8005dea <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d10a      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005db6:	2300      	movs	r3, #0
 8005db8:	613b      	str	r3, [r7, #16]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	613b      	str	r3, [r7, #16]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	613b      	str	r3, [r7, #16]
 8005dca:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e000      	b.n	8005dea <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005de8:	2300      	movs	r3, #0
  }
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3728      	adds	r7, #40	@ 0x28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
	...

08005df4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b088      	sub	sp, #32
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	603b      	str	r3, [r7, #0]
 8005e00:	4613      	mov	r3, r2
 8005e02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e04:	f7fd f9f2 	bl	80031ec <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0c:	1a9b      	subs	r3, r3, r2
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	4413      	add	r3, r2
 8005e12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e14:	f7fd f9ea 	bl	80031ec <HAL_GetTick>
 8005e18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e1a:	4b39      	ldr	r3, [pc, #228]	@ (8005f00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	015b      	lsls	r3, r3, #5
 8005e20:	0d1b      	lsrs	r3, r3, #20
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	fb02 f303 	mul.w	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e2a:	e054      	b.n	8005ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e32:	d050      	beq.n	8005ed6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e34:	f7fd f9da 	bl	80031ec <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d902      	bls.n	8005e4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d13d      	bne.n	8005ec6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005e58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e62:	d111      	bne.n	8005e88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e6c:	d004      	beq.n	8005e78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e76:	d107      	bne.n	8005e88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e90:	d10f      	bne.n	8005eb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005eb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e017      	b.n	8005ef6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689a      	ldr	r2, [r3, #8]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	bf0c      	ite	eq
 8005ee6:	2301      	moveq	r3, #1
 8005ee8:	2300      	movne	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	461a      	mov	r2, r3
 8005eee:	79fb      	ldrb	r3, [r7, #7]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d19b      	bne.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3720      	adds	r7, #32
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000008 	.word	0x20000008

08005f04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af02      	add	r7, sp, #8
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f18:	d111      	bne.n	8005f3e <SPI_EndRxTransaction+0x3a>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f22:	d004      	beq.n	8005f2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f2c:	d107      	bne.n	8005f3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f3c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f46:	d12a      	bne.n	8005f9e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f50:	d012      	beq.n	8005f78 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	2180      	movs	r1, #128	@ 0x80
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff ff49 	bl	8005df4 <SPI_WaitFlagStateUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d02d      	beq.n	8005fc4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f6c:	f043 0220 	orr.w	r2, r3, #32
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e026      	b.n	8005fc6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2101      	movs	r1, #1
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff ff36 	bl	8005df4 <SPI_WaitFlagStateUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01a      	beq.n	8005fc4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f92:	f043 0220 	orr.w	r2, r3, #32
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e013      	b.n	8005fc6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f7ff ff23 	bl	8005df4 <SPI_WaitFlagStateUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb8:	f043 0220 	orr.w	r2, r3, #32
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e000      	b.n	8005fc6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af02      	add	r7, sp, #8
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	2102      	movs	r1, #2
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f7ff ff04 	bl	8005df4 <SPI_WaitFlagStateUntilTimeout>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d007      	beq.n	8006002 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff6:	f043 0220 	orr.w	r2, r3, #32
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e032      	b.n	8006068 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006002:	4b1b      	ldr	r3, [pc, #108]	@ (8006070 <SPI_EndRxTxTransaction+0xa0>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a1b      	ldr	r2, [pc, #108]	@ (8006074 <SPI_EndRxTxTransaction+0xa4>)
 8006008:	fba2 2303 	umull	r2, r3, r2, r3
 800600c:	0d5b      	lsrs	r3, r3, #21
 800600e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006012:	fb02 f303 	mul.w	r3, r2, r3
 8006016:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006020:	d112      	bne.n	8006048 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	2200      	movs	r2, #0
 800602a:	2180      	movs	r1, #128	@ 0x80
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f7ff fee1 	bl	8005df4 <SPI_WaitFlagStateUntilTimeout>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d016      	beq.n	8006066 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603c:	f043 0220 	orr.w	r2, r3, #32
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e00f      	b.n	8006068 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	3b01      	subs	r3, #1
 8006052:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800605e:	2b80      	cmp	r3, #128	@ 0x80
 8006060:	d0f2      	beq.n	8006048 <SPI_EndRxTxTransaction+0x78>
 8006062:	e000      	b.n	8006066 <SPI_EndRxTxTransaction+0x96>
        break;
 8006064:	bf00      	nop
  }

  return HAL_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3718      	adds	r7, #24
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20000008 	.word	0x20000008
 8006074:	165e9f81 	.word	0x165e9f81

08006078 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e038      	b.n	8006100 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d106      	bne.n	80060a8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f7fa fc64 	bl	8000970 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	3308      	adds	r3, #8
 80060b0:	4619      	mov	r1, r3
 80060b2:	4610      	mov	r0, r2
 80060b4:	f001 fcf4 	bl	8007aa0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	461a      	mov	r2, r3
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	f001 fd56 	bl	8007b74 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6858      	ldr	r0, [r3, #4]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d4:	6879      	ldr	r1, [r7, #4]
 80060d6:	f001 fd83 	bl	8007be0 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	6892      	ldr	r2, [r2, #8]
 80060e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68fa      	ldr	r2, [r7, #12]
 80060ec:	6892      	ldr	r2, [r2, #8]
 80060ee:	f041 0101 	orr.w	r1, r1, #1
 80060f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e041      	b.n	800619e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006120:	b2db      	uxtb	r3, r3
 8006122:	2b00      	cmp	r3, #0
 8006124:	d106      	bne.n	8006134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f7fc fe52 	bl	8002dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	3304      	adds	r3, #4
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f000 fa7e 	bl	8006648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2201      	movs	r2, #1
 8006170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
	...

080061a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d001      	beq.n	80061c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	e04e      	b.n	800625e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0201 	orr.w	r2, r2, #1
 80061d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a23      	ldr	r2, [pc, #140]	@ (800626c <HAL_TIM_Base_Start_IT+0xc4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d022      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061ea:	d01d      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a1f      	ldr	r2, [pc, #124]	@ (8006270 <HAL_TIM_Base_Start_IT+0xc8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d018      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1e      	ldr	r2, [pc, #120]	@ (8006274 <HAL_TIM_Base_Start_IT+0xcc>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1c      	ldr	r2, [pc, #112]	@ (8006278 <HAL_TIM_Base_Start_IT+0xd0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00e      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1b      	ldr	r2, [pc, #108]	@ (800627c <HAL_TIM_Base_Start_IT+0xd4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d009      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a19      	ldr	r2, [pc, #100]	@ (8006280 <HAL_TIM_Base_Start_IT+0xd8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d004      	beq.n	8006228 <HAL_TIM_Base_Start_IT+0x80>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a18      	ldr	r2, [pc, #96]	@ (8006284 <HAL_TIM_Base_Start_IT+0xdc>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d111      	bne.n	800624c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b06      	cmp	r3, #6
 8006238:	d010      	beq.n	800625c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0201 	orr.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624a:	e007      	b.n	800625c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	40010000 	.word	0x40010000
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40010400 	.word	0x40010400
 8006280:	40014000 	.word	0x40014000
 8006284:	40001800 	.word	0x40001800

08006288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d020      	beq.n	80062ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f003 0302 	and.w	r3, r3, #2
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d01b      	beq.n	80062ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f06f 0202 	mvn.w	r2, #2
 80062bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	f003 0303 	and.w	r3, r3, #3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f999 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 80062d8:	e005      	b.n	80062e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f98b 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f99c 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d020      	beq.n	8006338 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f003 0304 	and.w	r3, r3, #4
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01b      	beq.n	8006338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0204 	mvn.w	r2, #4
 8006308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2202      	movs	r2, #2
 800630e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f973 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 8006324:	e005      	b.n	8006332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f965 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f976 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f003 0308 	and.w	r3, r3, #8
 800633e:	2b00      	cmp	r3, #0
 8006340:	d020      	beq.n	8006384 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01b      	beq.n	8006384 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0208 	mvn.w	r2, #8
 8006354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2204      	movs	r2, #4
 800635a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	69db      	ldr	r3, [r3, #28]
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f94d 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 8006370:	e005      	b.n	800637e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f93f 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f950 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f003 0310 	and.w	r3, r3, #16
 800638a:	2b00      	cmp	r3, #0
 800638c:	d020      	beq.n	80063d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f003 0310 	and.w	r3, r3, #16
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01b      	beq.n	80063d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f06f 0210 	mvn.w	r2, #16
 80063a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2208      	movs	r2, #8
 80063a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f927 	bl	800660a <HAL_TIM_IC_CaptureCallback>
 80063bc:	e005      	b.n	80063ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f919 	bl	80065f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f92a 	bl	800661e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00c      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d007      	beq.n	80063f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f06f 0201 	mvn.w	r2, #1
 80063ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fc fb4a 	bl	8002a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00c      	beq.n	8006418 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006404:	2b00      	cmp	r3, #0
 8006406:	d007      	beq.n	8006418 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fae4 	bl	80069e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00c      	beq.n	800643c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006428:	2b00      	cmp	r3, #0
 800642a:	d007      	beq.n	800643c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f8fb 	bl	8006632 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f003 0320 	and.w	r3, r3, #32
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00c      	beq.n	8006460 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f003 0320 	and.w	r3, r3, #32
 800644c:	2b00      	cmp	r3, #0
 800644e:	d007      	beq.n	8006460 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f06f 0220 	mvn.w	r2, #32
 8006458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fab6 	bl	80069cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006460:	bf00      	nop
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d101      	bne.n	8006484 <HAL_TIM_ConfigClockSource+0x1c>
 8006480:	2302      	movs	r3, #2
 8006482:	e0b4      	b.n	80065ee <HAL_TIM_ConfigClockSource+0x186>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064bc:	d03e      	beq.n	800653c <HAL_TIM_ConfigClockSource+0xd4>
 80064be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064c2:	f200 8087 	bhi.w	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064ca:	f000 8086 	beq.w	80065da <HAL_TIM_ConfigClockSource+0x172>
 80064ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064d2:	d87f      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064d4:	2b70      	cmp	r3, #112	@ 0x70
 80064d6:	d01a      	beq.n	800650e <HAL_TIM_ConfigClockSource+0xa6>
 80064d8:	2b70      	cmp	r3, #112	@ 0x70
 80064da:	d87b      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064dc:	2b60      	cmp	r3, #96	@ 0x60
 80064de:	d050      	beq.n	8006582 <HAL_TIM_ConfigClockSource+0x11a>
 80064e0:	2b60      	cmp	r3, #96	@ 0x60
 80064e2:	d877      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064e4:	2b50      	cmp	r3, #80	@ 0x50
 80064e6:	d03c      	beq.n	8006562 <HAL_TIM_ConfigClockSource+0xfa>
 80064e8:	2b50      	cmp	r3, #80	@ 0x50
 80064ea:	d873      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064ec:	2b40      	cmp	r3, #64	@ 0x40
 80064ee:	d058      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x13a>
 80064f0:	2b40      	cmp	r3, #64	@ 0x40
 80064f2:	d86f      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064f4:	2b30      	cmp	r3, #48	@ 0x30
 80064f6:	d064      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 80064f8:	2b30      	cmp	r3, #48	@ 0x30
 80064fa:	d86b      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 80064fc:	2b20      	cmp	r3, #32
 80064fe:	d060      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006500:	2b20      	cmp	r3, #32
 8006502:	d867      	bhi.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
 8006504:	2b00      	cmp	r3, #0
 8006506:	d05c      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006508:	2b10      	cmp	r3, #16
 800650a:	d05a      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x15a>
 800650c:	e062      	b.n	80065d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800651e:	f000 f9b9 	bl	8006894 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006530:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	609a      	str	r2, [r3, #8]
      break;
 800653a:	e04f      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800654c:	f000 f9a2 	bl	8006894 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800655e:	609a      	str	r2, [r3, #8]
      break;
 8006560:	e03c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800656e:	461a      	mov	r2, r3
 8006570:	f000 f916 	bl	80067a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2150      	movs	r1, #80	@ 0x50
 800657a:	4618      	mov	r0, r3
 800657c:	f000 f96f 	bl	800685e <TIM_ITRx_SetConfig>
      break;
 8006580:	e02c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800658e:	461a      	mov	r2, r3
 8006590:	f000 f935 	bl	80067fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2160      	movs	r1, #96	@ 0x60
 800659a:	4618      	mov	r0, r3
 800659c:	f000 f95f 	bl	800685e <TIM_ITRx_SetConfig>
      break;
 80065a0:	e01c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ae:	461a      	mov	r2, r3
 80065b0:	f000 f8f6 	bl	80067a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2140      	movs	r1, #64	@ 0x40
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 f94f 	bl	800685e <TIM_ITRx_SetConfig>
      break;
 80065c0:	e00c      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4619      	mov	r1, r3
 80065cc:	4610      	mov	r0, r2
 80065ce:	f000 f946 	bl	800685e <TIM_ITRx_SetConfig>
      break;
 80065d2:	e003      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	73fb      	strb	r3, [r7, #15]
      break;
 80065d8:	e000      	b.n	80065dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3710      	adds	r7, #16
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006626:	bf00      	nop
 8006628:	370c      	adds	r7, #12
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
	...

08006648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a46      	ldr	r2, [pc, #280]	@ (8006774 <TIM_Base_SetConfig+0x12c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d013      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006666:	d00f      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a43      	ldr	r2, [pc, #268]	@ (8006778 <TIM_Base_SetConfig+0x130>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00b      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a42      	ldr	r2, [pc, #264]	@ (800677c <TIM_Base_SetConfig+0x134>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d007      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a41      	ldr	r2, [pc, #260]	@ (8006780 <TIM_Base_SetConfig+0x138>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d003      	beq.n	8006688 <TIM_Base_SetConfig+0x40>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a40      	ldr	r2, [pc, #256]	@ (8006784 <TIM_Base_SetConfig+0x13c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d108      	bne.n	800669a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800668e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a35      	ldr	r2, [pc, #212]	@ (8006774 <TIM_Base_SetConfig+0x12c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d02b      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066a8:	d027      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a32      	ldr	r2, [pc, #200]	@ (8006778 <TIM_Base_SetConfig+0x130>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d023      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a31      	ldr	r2, [pc, #196]	@ (800677c <TIM_Base_SetConfig+0x134>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01f      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a30      	ldr	r2, [pc, #192]	@ (8006780 <TIM_Base_SetConfig+0x138>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d01b      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006784 <TIM_Base_SetConfig+0x13c>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d017      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006788 <TIM_Base_SetConfig+0x140>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d013      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a2d      	ldr	r2, [pc, #180]	@ (800678c <TIM_Base_SetConfig+0x144>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d00f      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a2c      	ldr	r2, [pc, #176]	@ (8006790 <TIM_Base_SetConfig+0x148>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00b      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006794 <TIM_Base_SetConfig+0x14c>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d007      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006798 <TIM_Base_SetConfig+0x150>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d003      	beq.n	80066fa <TIM_Base_SetConfig+0xb2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a29      	ldr	r2, [pc, #164]	@ (800679c <TIM_Base_SetConfig+0x154>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d108      	bne.n	800670c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006700:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4313      	orrs	r3, r2
 800670a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	4313      	orrs	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	689a      	ldr	r2, [r3, #8]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a10      	ldr	r2, [pc, #64]	@ (8006774 <TIM_Base_SetConfig+0x12c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d003      	beq.n	8006740 <TIM_Base_SetConfig+0xf8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a12      	ldr	r2, [pc, #72]	@ (8006784 <TIM_Base_SetConfig+0x13c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d103      	bne.n	8006748 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	691a      	ldr	r2, [r3, #16]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f003 0301 	and.w	r3, r3, #1
 8006756:	2b01      	cmp	r3, #1
 8006758:	d105      	bne.n	8006766 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	691b      	ldr	r3, [r3, #16]
 800675e:	f023 0201 	bic.w	r2, r3, #1
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	611a      	str	r2, [r3, #16]
  }
}
 8006766:	bf00      	nop
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	40010000 	.word	0x40010000
 8006778:	40000400 	.word	0x40000400
 800677c:	40000800 	.word	0x40000800
 8006780:	40000c00 	.word	0x40000c00
 8006784:	40010400 	.word	0x40010400
 8006788:	40014000 	.word	0x40014000
 800678c:	40014400 	.word	0x40014400
 8006790:	40014800 	.word	0x40014800
 8006794:	40001800 	.word	0x40001800
 8006798:	40001c00 	.word	0x40001c00
 800679c:	40002000 	.word	0x40002000

080067a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b087      	sub	sp, #28
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	f023 0201 	bic.w	r2, r3, #1
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	f023 030a 	bic.w	r3, r3, #10
 80067dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	621a      	str	r2, [r3, #32]
}
 80067f2:	bf00      	nop
 80067f4:	371c      	adds	r7, #28
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067fe:	b480      	push	{r7}
 8006800:	b087      	sub	sp, #28
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f023 0210 	bic.w	r2, r3, #16
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	699b      	ldr	r3, [r3, #24]
 8006820:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006828:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	031b      	lsls	r3, r3, #12
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	4313      	orrs	r3, r2
 8006832:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800683a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	621a      	str	r2, [r3, #32]
}
 8006852:	bf00      	nop
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800685e:	b480      	push	{r7}
 8006860:	b085      	sub	sp, #20
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006876:	683a      	ldr	r2, [r7, #0]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	f043 0307 	orr.w	r3, r3, #7
 8006880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	609a      	str	r2, [r3, #8]
}
 8006888:	bf00      	nop
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	021a      	lsls	r2, r3, #8
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	431a      	orrs	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4313      	orrs	r3, r2
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	4313      	orrs	r3, r2
 80068c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	609a      	str	r2, [r3, #8]
}
 80068c8:	bf00      	nop
 80068ca:	371c      	adds	r7, #28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d101      	bne.n	80068ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068e8:	2302      	movs	r3, #2
 80068ea:	e05a      	b.n	80069a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2202      	movs	r2, #2
 80068f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a21      	ldr	r2, [pc, #132]	@ (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d022      	beq.n	8006976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006938:	d01d      	beq.n	8006976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1d      	ldr	r2, [pc, #116]	@ (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d018      	beq.n	8006976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1b      	ldr	r2, [pc, #108]	@ (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d013      	beq.n	8006976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1a      	ldr	r2, [pc, #104]	@ (80069bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d00e      	beq.n	8006976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a18      	ldr	r2, [pc, #96]	@ (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d009      	beq.n	8006976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a17      	ldr	r2, [pc, #92]	@ (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d004      	beq.n	8006976 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a15      	ldr	r2, [pc, #84]	@ (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d10c      	bne.n	8006990 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800697c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	4313      	orrs	r3, r2
 8006986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	68ba      	ldr	r2, [r7, #8]
 800698e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40010000 	.word	0x40010000
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40000c00 	.word	0x40000c00
 80069c0:	40010400 	.word	0x40010400
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40001800 	.word	0x40001800

080069cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e042      	b.n	8006a8c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fc fac8 	bl	8002fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2224      	movs	r2, #36	@ 0x24
 8006a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fdbd 	bl	80075b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	695a      	ldr	r2, [r3, #20]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08a      	sub	sp, #40	@ 0x28
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	603b      	str	r3, [r7, #0]
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d175      	bne.n	8006ba0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d002      	beq.n	8006ac0 <HAL_UART_Transmit+0x2c>
 8006aba:	88fb      	ldrh	r3, [r7, #6]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d101      	bne.n	8006ac4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e06e      	b.n	8006ba2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2221      	movs	r2, #33	@ 0x21
 8006ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006ad2:	f7fc fb8b 	bl	80031ec <HAL_GetTick>
 8006ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	88fa      	ldrh	r2, [r7, #6]
 8006adc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	88fa      	ldrh	r2, [r7, #6]
 8006ae2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006aec:	d108      	bne.n	8006b00 <HAL_UART_Transmit+0x6c>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d104      	bne.n	8006b00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	61bb      	str	r3, [r7, #24]
 8006afe:	e003      	b.n	8006b08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b08:	e02e      	b.n	8006b68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2200      	movs	r2, #0
 8006b12:	2180      	movs	r1, #128	@ 0x80
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 fb1f 	bl	8007158 <UART_WaitOnFlagUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2220      	movs	r2, #32
 8006b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e03a      	b.n	8006ba2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d10b      	bne.n	8006b4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	461a      	mov	r2, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	3302      	adds	r3, #2
 8006b46:	61bb      	str	r3, [r7, #24]
 8006b48:	e007      	b.n	8006b5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	781a      	ldrb	r2, [r3, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	3301      	adds	r3, #1
 8006b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1cb      	bne.n	8006b0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	2140      	movs	r1, #64	@ 0x40
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 faeb 	bl	8007158 <UART_WaitOnFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d005      	beq.n	8006b94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2220      	movs	r2, #32
 8006b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e006      	b.n	8006ba2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2220      	movs	r2, #32
 8006b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	e000      	b.n	8006ba2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006ba0:	2302      	movs	r3, #2
  }
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3720      	adds	r7, #32
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	60b9      	str	r1, [r7, #8]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d112      	bne.n	8006bea <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <HAL_UART_Receive_IT+0x26>
 8006bca:	88fb      	ldrh	r3, [r7, #6]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e00b      	b.n	8006bec <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006bda:	88fb      	ldrh	r3, [r7, #6]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f000 fb12 	bl	800720a <UART_Start_Receive_IT>
 8006be6:	4603      	mov	r3, r0
 8006be8:	e000      	b.n	8006bec <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006bea:	2302      	movs	r3, #2
  }
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b0ba      	sub	sp, #232	@ 0xe8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695b      	ldr	r3, [r3, #20]
 8006c16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006c20:	2300      	movs	r3, #0
 8006c22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d10f      	bne.n	8006c5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d009      	beq.n	8006c5a <HAL_UART_IRQHandler+0x66>
 8006c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c4a:	f003 0320 	and.w	r3, r3, #32
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fbf2 	bl	800743c <UART_Receive_IT>
      return;
 8006c58:	e25b      	b.n	8007112 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006c5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 80de 	beq.w	8006e20 <HAL_UART_IRQHandler+0x22c>
 8006c64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c68:	f003 0301 	and.w	r3, r3, #1
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d106      	bne.n	8006c7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c74:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	f000 80d1 	beq.w	8006e20 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006c7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00b      	beq.n	8006ca2 <HAL_UART_IRQHandler+0xae>
 8006c8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d005      	beq.n	8006ca2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c9a:	f043 0201 	orr.w	r2, r3, #1
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ca6:	f003 0304 	and.w	r3, r3, #4
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <HAL_UART_IRQHandler+0xd2>
 8006cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d005      	beq.n	8006cc6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cbe:	f043 0202 	orr.w	r2, r3, #2
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cca:	f003 0302 	and.w	r3, r3, #2
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00b      	beq.n	8006cea <HAL_UART_IRQHandler+0xf6>
 8006cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006cd6:	f003 0301 	and.w	r3, r3, #1
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d005      	beq.n	8006cea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce2:	f043 0204 	orr.w	r2, r3, #4
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cee:	f003 0308 	and.w	r3, r3, #8
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d011      	beq.n	8006d1a <HAL_UART_IRQHandler+0x126>
 8006cf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d105      	bne.n	8006d0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006d02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d12:	f043 0208 	orr.w	r2, r3, #8
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 81f2 	beq.w	8007108 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d28:	f003 0320 	and.w	r3, r3, #32
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d008      	beq.n	8006d42 <HAL_UART_IRQHandler+0x14e>
 8006d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d34:	f003 0320 	and.w	r3, r3, #32
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fb7d 	bl	800743c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4c:	2b40      	cmp	r3, #64	@ 0x40
 8006d4e:	bf0c      	ite	eq
 8006d50:	2301      	moveq	r3, #1
 8006d52:	2300      	movne	r3, #0
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d103      	bne.n	8006d6e <HAL_UART_IRQHandler+0x17a>
 8006d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d04f      	beq.n	8006e0e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 fa85 	bl	800727e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d7e:	2b40      	cmp	r3, #64	@ 0x40
 8006d80:	d141      	bne.n	8006e06 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	3314      	adds	r3, #20
 8006d88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006d90:	e853 3f00 	ldrex	r3, [r3]
 8006d94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006da0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3314      	adds	r3, #20
 8006daa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006dae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006db2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006dba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006dbe:	e841 2300 	strex	r3, r2, [r1]
 8006dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1d9      	bne.n	8006d82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d013      	beq.n	8006dfe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dda:	4a7e      	ldr	r2, [pc, #504]	@ (8006fd4 <HAL_UART_IRQHandler+0x3e0>)
 8006ddc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de2:	4618      	mov	r0, r3
 8006de4:	f7fc fbb3 	bl	800354e <HAL_DMA_Abort_IT>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d016      	beq.n	8006e1c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006df8:	4610      	mov	r0, r2
 8006dfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dfc:	e00e      	b.n	8006e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f994 	bl	800712c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e04:	e00a      	b.n	8006e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f990 	bl	800712c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e0c:	e006      	b.n	8006e1c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 f98c 	bl	800712c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006e1a:	e175      	b.n	8007108 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e1c:	bf00      	nop
    return;
 8006e1e:	e173      	b.n	8007108 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	f040 814f 	bne.w	80070c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e2e:	f003 0310 	and.w	r3, r3, #16
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	f000 8148 	beq.w	80070c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e3c:	f003 0310 	and.w	r3, r3, #16
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 8141 	beq.w	80070c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e46:	2300      	movs	r3, #0
 8006e48:	60bb      	str	r3, [r7, #8]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	60bb      	str	r3, [r7, #8]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	60bb      	str	r3, [r7, #8]
 8006e5a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e66:	2b40      	cmp	r3, #64	@ 0x40
 8006e68:	f040 80b6 	bne.w	8006fd8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006e78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8145 	beq.w	800710c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006e86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	f080 813e 	bcs.w	800710c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006e96:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ea2:	f000 8088 	beq.w	8006fb6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	330c      	adds	r3, #12
 8006eac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006eb4:	e853 3f00 	ldrex	r3, [r3]
 8006eb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006ebc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006ec0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ec4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	330c      	adds	r3, #12
 8006ece:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006ed2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ed6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eda:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006ee2:	e841 2300 	strex	r3, r2, [r1]
 8006ee6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006eea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1d9      	bne.n	8006ea6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3314      	adds	r3, #20
 8006ef8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006f02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f04:	f023 0301 	bic.w	r3, r3, #1
 8006f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3314      	adds	r3, #20
 8006f12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006f16:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006f1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006f1e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006f22:	e841 2300 	strex	r3, r2, [r1]
 8006f26:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006f28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1e1      	bne.n	8006ef2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	3314      	adds	r3, #20
 8006f34:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f36:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006f38:	e853 3f00 	ldrex	r3, [r3]
 8006f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006f3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	3314      	adds	r3, #20
 8006f4e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006f52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006f54:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006f58:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006f60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e3      	bne.n	8006f2e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	330c      	adds	r3, #12
 8006f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006f84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f86:	f023 0310 	bic.w	r3, r3, #16
 8006f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	330c      	adds	r3, #12
 8006f94:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006f98:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006f9a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006f9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006fa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e3      	bne.n	8006f74 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fc fa5c 	bl	800346e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2202      	movs	r2, #2
 8006fba:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f8b7 	bl	8007140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fd2:	e09b      	b.n	800710c <HAL_UART_IRQHandler+0x518>
 8006fd4:	08007345 	.word	0x08007345
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f000 808e 	beq.w	8007110 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006ff4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 8089 	beq.w	8007110 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	330c      	adds	r3, #12
 8007004:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800700e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007010:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007014:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	330c      	adds	r3, #12
 800701e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007022:	647a      	str	r2, [r7, #68]	@ 0x44
 8007024:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007028:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e3      	bne.n	8006ffe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3314      	adds	r3, #20
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	623b      	str	r3, [r7, #32]
   return(result);
 8007046:	6a3b      	ldr	r3, [r7, #32]
 8007048:	f023 0301 	bic.w	r3, r3, #1
 800704c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	3314      	adds	r3, #20
 8007056:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800705a:	633a      	str	r2, [r7, #48]	@ 0x30
 800705c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e3      	bne.n	8007036 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	330c      	adds	r3, #12
 8007082:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	e853 3f00 	ldrex	r3, [r3]
 800708a:	60fb      	str	r3, [r7, #12]
   return(result);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f023 0310 	bic.w	r3, r3, #16
 8007092:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	330c      	adds	r3, #12
 800709c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80070a0:	61fa      	str	r2, [r7, #28]
 80070a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a4:	69b9      	ldr	r1, [r7, #24]
 80070a6:	69fa      	ldr	r2, [r7, #28]
 80070a8:	e841 2300 	strex	r3, r2, [r1]
 80070ac:	617b      	str	r3, [r7, #20]
   return(result);
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1e3      	bne.n	800707c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80070be:	4619      	mov	r1, r3
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f83d 	bl	8007140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070c6:	e023      	b.n	8007110 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80070c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d009      	beq.n	80070e8 <HAL_UART_IRQHandler+0x4f4>
 80070d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f943 	bl	800736c <UART_Transmit_IT>
    return;
 80070e6:	e014      	b.n	8007112 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80070e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00e      	beq.n	8007112 <HAL_UART_IRQHandler+0x51e>
 80070f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d008      	beq.n	8007112 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 f983 	bl	800740c <UART_EndTransmit_IT>
    return;
 8007106:	e004      	b.n	8007112 <HAL_UART_IRQHandler+0x51e>
    return;
 8007108:	bf00      	nop
 800710a:	e002      	b.n	8007112 <HAL_UART_IRQHandler+0x51e>
      return;
 800710c:	bf00      	nop
 800710e:	e000      	b.n	8007112 <HAL_UART_IRQHandler+0x51e>
      return;
 8007110:	bf00      	nop
  }
}
 8007112:	37e8      	adds	r7, #232	@ 0xe8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	4613      	mov	r3, r2
 8007166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007168:	e03b      	b.n	80071e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d037      	beq.n	80071e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007172:	f7fc f83b 	bl	80031ec <HAL_GetTick>
 8007176:	4602      	mov	r2, r0
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	6a3a      	ldr	r2, [r7, #32]
 800717e:	429a      	cmp	r2, r3
 8007180:	d302      	bcc.n	8007188 <UART_WaitOnFlagUntilTimeout+0x30>
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d101      	bne.n	800718c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007188:	2303      	movs	r3, #3
 800718a:	e03a      	b.n	8007202 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f003 0304 	and.w	r3, r3, #4
 8007196:	2b00      	cmp	r3, #0
 8007198:	d023      	beq.n	80071e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	2b80      	cmp	r3, #128	@ 0x80
 800719e:	d020      	beq.n	80071e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b40      	cmp	r3, #64	@ 0x40
 80071a4:	d01d      	beq.n	80071e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0308 	and.w	r3, r3, #8
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d116      	bne.n	80071e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80071b4:	2300      	movs	r3, #0
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	617b      	str	r3, [r7, #20]
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	617b      	str	r3, [r7, #20]
 80071c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f000 f857 	bl	800727e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2208      	movs	r2, #8
 80071d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2200      	movs	r2, #0
 80071da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e00f      	b.n	8007202 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	4013      	ands	r3, r2
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	bf0c      	ite	eq
 80071f2:	2301      	moveq	r3, #1
 80071f4:	2300      	movne	r3, #0
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	461a      	mov	r2, r3
 80071fa:	79fb      	ldrb	r3, [r7, #7]
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d0b4      	beq.n	800716a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800720a:	b480      	push	{r7}
 800720c:	b085      	sub	sp, #20
 800720e:	af00      	add	r7, sp, #0
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	60b9      	str	r1, [r7, #8]
 8007214:	4613      	mov	r3, r2
 8007216:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	88fa      	ldrh	r2, [r7, #6]
 8007222:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	88fa      	ldrh	r2, [r7, #6]
 8007228:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2222      	movs	r2, #34	@ 0x22
 8007234:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68da      	ldr	r2, [r3, #12]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800724e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	695a      	ldr	r2, [r3, #20]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f042 0201 	orr.w	r2, r2, #1
 800725e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0220 	orr.w	r2, r2, #32
 800726e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800727e:	b480      	push	{r7}
 8007280:	b095      	sub	sp, #84	@ 0x54
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	330c      	adds	r3, #12
 800728c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007298:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800729c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	330c      	adds	r3, #12
 80072a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80072a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80072a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072ae:	e841 2300 	strex	r3, r2, [r1]
 80072b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d1e5      	bne.n	8007286 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	3314      	adds	r3, #20
 80072c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c2:	6a3b      	ldr	r3, [r7, #32]
 80072c4:	e853 3f00 	ldrex	r3, [r3]
 80072c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	f023 0301 	bic.w	r3, r3, #1
 80072d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3314      	adds	r3, #20
 80072d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072e2:	e841 2300 	strex	r3, r2, [r1]
 80072e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d1e5      	bne.n	80072ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d119      	bne.n	800732a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	330c      	adds	r3, #12
 80072fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	e853 3f00 	ldrex	r3, [r3]
 8007304:	60bb      	str	r3, [r7, #8]
   return(result);
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f023 0310 	bic.w	r3, r3, #16
 800730c:	647b      	str	r3, [r7, #68]	@ 0x44
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	330c      	adds	r3, #12
 8007314:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007316:	61ba      	str	r2, [r7, #24]
 8007318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	6979      	ldr	r1, [r7, #20]
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	e841 2300 	strex	r3, r2, [r1]
 8007322:	613b      	str	r3, [r7, #16]
   return(result);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1e5      	bne.n	80072f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2220      	movs	r2, #32
 800732e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2200      	movs	r2, #0
 8007336:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007338:	bf00      	nop
 800733a:	3754      	adds	r7, #84	@ 0x54
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007350:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f7ff fee4 	bl	800712c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007364:	bf00      	nop
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b21      	cmp	r3, #33	@ 0x21
 800737e:	d13e      	bne.n	80073fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007388:	d114      	bne.n	80073b4 <UART_Transmit_IT+0x48>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d110      	bne.n	80073b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	461a      	mov	r2, r3
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	1c9a      	adds	r2, r3, #2
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	621a      	str	r2, [r3, #32]
 80073b2:	e008      	b.n	80073c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	1c59      	adds	r1, r3, #1
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6211      	str	r1, [r2, #32]
 80073be:	781a      	ldrb	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	3b01      	subs	r3, #1
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	4619      	mov	r1, r3
 80073d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10f      	bne.n	80073fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68da      	ldr	r2, [r3, #12]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	e000      	b.n	8007400 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80073fe:	2302      	movs	r3, #2
  }
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007422:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f7ff fe73 	bl	8007118 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3708      	adds	r7, #8
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b08c      	sub	sp, #48	@ 0x30
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b22      	cmp	r3, #34	@ 0x22
 800744e:	f040 80ae 	bne.w	80075ae <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800745a:	d117      	bne.n	800748c <UART_Receive_IT+0x50>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	691b      	ldr	r3, [r3, #16]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d113      	bne.n	800748c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007464:	2300      	movs	r3, #0
 8007466:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800746c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	b29b      	uxth	r3, r3
 8007476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800747a:	b29a      	uxth	r2, r3
 800747c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007484:	1c9a      	adds	r2, r3, #2
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	629a      	str	r2, [r3, #40]	@ 0x28
 800748a:	e026      	b.n	80074da <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007490:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800749e:	d007      	beq.n	80074b0 <UART_Receive_IT+0x74>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10a      	bne.n	80074be <UART_Receive_IT+0x82>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d106      	bne.n	80074be <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	e008      	b.n	80074d0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ce:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	4619      	mov	r1, r3
 80074e8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d15d      	bne.n	80075aa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68da      	ldr	r2, [r3, #12]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f022 0220 	bic.w	r2, r2, #32
 80074fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68da      	ldr	r2, [r3, #12]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800750c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	695a      	ldr	r2, [r3, #20]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 0201 	bic.w	r2, r2, #1
 800751c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2220      	movs	r2, #32
 8007522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007530:	2b01      	cmp	r3, #1
 8007532:	d135      	bne.n	80075a0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	330c      	adds	r3, #12
 8007540:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	e853 3f00 	ldrex	r3, [r3]
 8007548:	613b      	str	r3, [r7, #16]
   return(result);
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	f023 0310 	bic.w	r3, r3, #16
 8007550:	627b      	str	r3, [r7, #36]	@ 0x24
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	330c      	adds	r3, #12
 8007558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800755a:	623a      	str	r2, [r7, #32]
 800755c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755e:	69f9      	ldr	r1, [r7, #28]
 8007560:	6a3a      	ldr	r2, [r7, #32]
 8007562:	e841 2300 	strex	r3, r2, [r1]
 8007566:	61bb      	str	r3, [r7, #24]
   return(result);
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d1e5      	bne.n	800753a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0310 	and.w	r3, r3, #16
 8007578:	2b10      	cmp	r3, #16
 800757a:	d10a      	bne.n	8007592 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800757c:	2300      	movs	r3, #0
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007596:	4619      	mov	r1, r3
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7ff fdd1 	bl	8007140 <HAL_UARTEx_RxEventCallback>
 800759e:	e002      	b.n	80075a6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7fb fcbd 	bl	8002f20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	e002      	b.n	80075b0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80075aa:	2300      	movs	r3, #0
 80075ac:	e000      	b.n	80075b0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80075ae:	2302      	movs	r3, #2
  }
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3730      	adds	r7, #48	@ 0x30
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075bc:	b0c0      	sub	sp, #256	@ 0x100
 80075be:	af00      	add	r7, sp, #0
 80075c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80075d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075d4:	68d9      	ldr	r1, [r3, #12]
 80075d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	ea40 0301 	orr.w	r3, r0, r1
 80075e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ec:	691b      	ldr	r3, [r3, #16]
 80075ee:	431a      	orrs	r2, r3
 80075f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	431a      	orrs	r2, r3
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	4313      	orrs	r3, r2
 8007600:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007610:	f021 010c 	bic.w	r1, r1, #12
 8007614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800761e:	430b      	orrs	r3, r1
 8007620:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800762e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007632:	6999      	ldr	r1, [r3, #24]
 8007634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007638:	681a      	ldr	r2, [r3, #0]
 800763a:	ea40 0301 	orr.w	r3, r0, r1
 800763e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	4b8f      	ldr	r3, [pc, #572]	@ (8007884 <UART_SetConfig+0x2cc>)
 8007648:	429a      	cmp	r2, r3
 800764a:	d005      	beq.n	8007658 <UART_SetConfig+0xa0>
 800764c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	4b8d      	ldr	r3, [pc, #564]	@ (8007888 <UART_SetConfig+0x2d0>)
 8007654:	429a      	cmp	r2, r3
 8007656:	d104      	bne.n	8007662 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007658:	f7fd ff28 	bl	80054ac <HAL_RCC_GetPCLK2Freq>
 800765c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007660:	e003      	b.n	800766a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007662:	f7fd ff0f 	bl	8005484 <HAL_RCC_GetPCLK1Freq>
 8007666:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800766a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800766e:	69db      	ldr	r3, [r3, #28]
 8007670:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007674:	f040 810c 	bne.w	8007890 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800767c:	2200      	movs	r2, #0
 800767e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007682:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007686:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800768a:	4622      	mov	r2, r4
 800768c:	462b      	mov	r3, r5
 800768e:	1891      	adds	r1, r2, r2
 8007690:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007692:	415b      	adcs	r3, r3
 8007694:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007696:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800769a:	4621      	mov	r1, r4
 800769c:	eb12 0801 	adds.w	r8, r2, r1
 80076a0:	4629      	mov	r1, r5
 80076a2:	eb43 0901 	adc.w	r9, r3, r1
 80076a6:	f04f 0200 	mov.w	r2, #0
 80076aa:	f04f 0300 	mov.w	r3, #0
 80076ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076ba:	4690      	mov	r8, r2
 80076bc:	4699      	mov	r9, r3
 80076be:	4623      	mov	r3, r4
 80076c0:	eb18 0303 	adds.w	r3, r8, r3
 80076c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80076c8:	462b      	mov	r3, r5
 80076ca:	eb49 0303 	adc.w	r3, r9, r3
 80076ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80076de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80076e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80076e6:	460b      	mov	r3, r1
 80076e8:	18db      	adds	r3, r3, r3
 80076ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80076ec:	4613      	mov	r3, r2
 80076ee:	eb42 0303 	adc.w	r3, r2, r3
 80076f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80076f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80076f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80076fc:	f7f8 fdb8 	bl	8000270 <__aeabi_uldivmod>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4b61      	ldr	r3, [pc, #388]	@ (800788c <UART_SetConfig+0x2d4>)
 8007706:	fba3 2302 	umull	r2, r3, r3, r2
 800770a:	095b      	lsrs	r3, r3, #5
 800770c:	011c      	lsls	r4, r3, #4
 800770e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007712:	2200      	movs	r2, #0
 8007714:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007718:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800771c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007720:	4642      	mov	r2, r8
 8007722:	464b      	mov	r3, r9
 8007724:	1891      	adds	r1, r2, r2
 8007726:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007728:	415b      	adcs	r3, r3
 800772a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800772c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007730:	4641      	mov	r1, r8
 8007732:	eb12 0a01 	adds.w	sl, r2, r1
 8007736:	4649      	mov	r1, r9
 8007738:	eb43 0b01 	adc.w	fp, r3, r1
 800773c:	f04f 0200 	mov.w	r2, #0
 8007740:	f04f 0300 	mov.w	r3, #0
 8007744:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007748:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800774c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007750:	4692      	mov	sl, r2
 8007752:	469b      	mov	fp, r3
 8007754:	4643      	mov	r3, r8
 8007756:	eb1a 0303 	adds.w	r3, sl, r3
 800775a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800775e:	464b      	mov	r3, r9
 8007760:	eb4b 0303 	adc.w	r3, fp, r3
 8007764:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007774:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007778:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800777c:	460b      	mov	r3, r1
 800777e:	18db      	adds	r3, r3, r3
 8007780:	643b      	str	r3, [r7, #64]	@ 0x40
 8007782:	4613      	mov	r3, r2
 8007784:	eb42 0303 	adc.w	r3, r2, r3
 8007788:	647b      	str	r3, [r7, #68]	@ 0x44
 800778a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800778e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007792:	f7f8 fd6d 	bl	8000270 <__aeabi_uldivmod>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	4611      	mov	r1, r2
 800779c:	4b3b      	ldr	r3, [pc, #236]	@ (800788c <UART_SetConfig+0x2d4>)
 800779e:	fba3 2301 	umull	r2, r3, r3, r1
 80077a2:	095b      	lsrs	r3, r3, #5
 80077a4:	2264      	movs	r2, #100	@ 0x64
 80077a6:	fb02 f303 	mul.w	r3, r2, r3
 80077aa:	1acb      	subs	r3, r1, r3
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80077b2:	4b36      	ldr	r3, [pc, #216]	@ (800788c <UART_SetConfig+0x2d4>)
 80077b4:	fba3 2302 	umull	r2, r3, r3, r2
 80077b8:	095b      	lsrs	r3, r3, #5
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80077c0:	441c      	add	r4, r3
 80077c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80077cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80077d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80077d4:	4642      	mov	r2, r8
 80077d6:	464b      	mov	r3, r9
 80077d8:	1891      	adds	r1, r2, r2
 80077da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80077dc:	415b      	adcs	r3, r3
 80077de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80077e4:	4641      	mov	r1, r8
 80077e6:	1851      	adds	r1, r2, r1
 80077e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80077ea:	4649      	mov	r1, r9
 80077ec:	414b      	adcs	r3, r1
 80077ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80077fc:	4659      	mov	r1, fp
 80077fe:	00cb      	lsls	r3, r1, #3
 8007800:	4651      	mov	r1, sl
 8007802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007806:	4651      	mov	r1, sl
 8007808:	00ca      	lsls	r2, r1, #3
 800780a:	4610      	mov	r0, r2
 800780c:	4619      	mov	r1, r3
 800780e:	4603      	mov	r3, r0
 8007810:	4642      	mov	r2, r8
 8007812:	189b      	adds	r3, r3, r2
 8007814:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007818:	464b      	mov	r3, r9
 800781a:	460a      	mov	r2, r1
 800781c:	eb42 0303 	adc.w	r3, r2, r3
 8007820:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007830:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007834:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007838:	460b      	mov	r3, r1
 800783a:	18db      	adds	r3, r3, r3
 800783c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800783e:	4613      	mov	r3, r2
 8007840:	eb42 0303 	adc.w	r3, r2, r3
 8007844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007846:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800784a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800784e:	f7f8 fd0f 	bl	8000270 <__aeabi_uldivmod>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4b0d      	ldr	r3, [pc, #52]	@ (800788c <UART_SetConfig+0x2d4>)
 8007858:	fba3 1302 	umull	r1, r3, r3, r2
 800785c:	095b      	lsrs	r3, r3, #5
 800785e:	2164      	movs	r1, #100	@ 0x64
 8007860:	fb01 f303 	mul.w	r3, r1, r3
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	00db      	lsls	r3, r3, #3
 8007868:	3332      	adds	r3, #50	@ 0x32
 800786a:	4a08      	ldr	r2, [pc, #32]	@ (800788c <UART_SetConfig+0x2d4>)
 800786c:	fba2 2303 	umull	r2, r3, r2, r3
 8007870:	095b      	lsrs	r3, r3, #5
 8007872:	f003 0207 	and.w	r2, r3, #7
 8007876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4422      	add	r2, r4
 800787e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007880:	e106      	b.n	8007a90 <UART_SetConfig+0x4d8>
 8007882:	bf00      	nop
 8007884:	40011000 	.word	0x40011000
 8007888:	40011400 	.word	0x40011400
 800788c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007894:	2200      	movs	r2, #0
 8007896:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800789a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800789e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80078a2:	4642      	mov	r2, r8
 80078a4:	464b      	mov	r3, r9
 80078a6:	1891      	adds	r1, r2, r2
 80078a8:	6239      	str	r1, [r7, #32]
 80078aa:	415b      	adcs	r3, r3
 80078ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078b2:	4641      	mov	r1, r8
 80078b4:	1854      	adds	r4, r2, r1
 80078b6:	4649      	mov	r1, r9
 80078b8:	eb43 0501 	adc.w	r5, r3, r1
 80078bc:	f04f 0200 	mov.w	r2, #0
 80078c0:	f04f 0300 	mov.w	r3, #0
 80078c4:	00eb      	lsls	r3, r5, #3
 80078c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078ca:	00e2      	lsls	r2, r4, #3
 80078cc:	4614      	mov	r4, r2
 80078ce:	461d      	mov	r5, r3
 80078d0:	4643      	mov	r3, r8
 80078d2:	18e3      	adds	r3, r4, r3
 80078d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078d8:	464b      	mov	r3, r9
 80078da:	eb45 0303 	adc.w	r3, r5, r3
 80078de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80078ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80078f2:	f04f 0200 	mov.w	r2, #0
 80078f6:	f04f 0300 	mov.w	r3, #0
 80078fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80078fe:	4629      	mov	r1, r5
 8007900:	008b      	lsls	r3, r1, #2
 8007902:	4621      	mov	r1, r4
 8007904:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007908:	4621      	mov	r1, r4
 800790a:	008a      	lsls	r2, r1, #2
 800790c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007910:	f7f8 fcae 	bl	8000270 <__aeabi_uldivmod>
 8007914:	4602      	mov	r2, r0
 8007916:	460b      	mov	r3, r1
 8007918:	4b60      	ldr	r3, [pc, #384]	@ (8007a9c <UART_SetConfig+0x4e4>)
 800791a:	fba3 2302 	umull	r2, r3, r3, r2
 800791e:	095b      	lsrs	r3, r3, #5
 8007920:	011c      	lsls	r4, r3, #4
 8007922:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007926:	2200      	movs	r2, #0
 8007928:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800792c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007930:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007934:	4642      	mov	r2, r8
 8007936:	464b      	mov	r3, r9
 8007938:	1891      	adds	r1, r2, r2
 800793a:	61b9      	str	r1, [r7, #24]
 800793c:	415b      	adcs	r3, r3
 800793e:	61fb      	str	r3, [r7, #28]
 8007940:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007944:	4641      	mov	r1, r8
 8007946:	1851      	adds	r1, r2, r1
 8007948:	6139      	str	r1, [r7, #16]
 800794a:	4649      	mov	r1, r9
 800794c:	414b      	adcs	r3, r1
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	f04f 0200 	mov.w	r2, #0
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800795c:	4659      	mov	r1, fp
 800795e:	00cb      	lsls	r3, r1, #3
 8007960:	4651      	mov	r1, sl
 8007962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007966:	4651      	mov	r1, sl
 8007968:	00ca      	lsls	r2, r1, #3
 800796a:	4610      	mov	r0, r2
 800796c:	4619      	mov	r1, r3
 800796e:	4603      	mov	r3, r0
 8007970:	4642      	mov	r2, r8
 8007972:	189b      	adds	r3, r3, r2
 8007974:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007978:	464b      	mov	r3, r9
 800797a:	460a      	mov	r2, r1
 800797c:	eb42 0303 	adc.w	r3, r2, r3
 8007980:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800798e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007990:	f04f 0200 	mov.w	r2, #0
 8007994:	f04f 0300 	mov.w	r3, #0
 8007998:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800799c:	4649      	mov	r1, r9
 800799e:	008b      	lsls	r3, r1, #2
 80079a0:	4641      	mov	r1, r8
 80079a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079a6:	4641      	mov	r1, r8
 80079a8:	008a      	lsls	r2, r1, #2
 80079aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80079ae:	f7f8 fc5f 	bl	8000270 <__aeabi_uldivmod>
 80079b2:	4602      	mov	r2, r0
 80079b4:	460b      	mov	r3, r1
 80079b6:	4611      	mov	r1, r2
 80079b8:	4b38      	ldr	r3, [pc, #224]	@ (8007a9c <UART_SetConfig+0x4e4>)
 80079ba:	fba3 2301 	umull	r2, r3, r3, r1
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	2264      	movs	r2, #100	@ 0x64
 80079c2:	fb02 f303 	mul.w	r3, r2, r3
 80079c6:	1acb      	subs	r3, r1, r3
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	3332      	adds	r3, #50	@ 0x32
 80079cc:	4a33      	ldr	r2, [pc, #204]	@ (8007a9c <UART_SetConfig+0x4e4>)
 80079ce:	fba2 2303 	umull	r2, r3, r2, r3
 80079d2:	095b      	lsrs	r3, r3, #5
 80079d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80079d8:	441c      	add	r4, r3
 80079da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079de:	2200      	movs	r2, #0
 80079e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80079e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80079e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80079e8:	4642      	mov	r2, r8
 80079ea:	464b      	mov	r3, r9
 80079ec:	1891      	adds	r1, r2, r2
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	415b      	adcs	r3, r3
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079f8:	4641      	mov	r1, r8
 80079fa:	1851      	adds	r1, r2, r1
 80079fc:	6039      	str	r1, [r7, #0]
 80079fe:	4649      	mov	r1, r9
 8007a00:	414b      	adcs	r3, r1
 8007a02:	607b      	str	r3, [r7, #4]
 8007a04:	f04f 0200 	mov.w	r2, #0
 8007a08:	f04f 0300 	mov.w	r3, #0
 8007a0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a10:	4659      	mov	r1, fp
 8007a12:	00cb      	lsls	r3, r1, #3
 8007a14:	4651      	mov	r1, sl
 8007a16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a1a:	4651      	mov	r1, sl
 8007a1c:	00ca      	lsls	r2, r1, #3
 8007a1e:	4610      	mov	r0, r2
 8007a20:	4619      	mov	r1, r3
 8007a22:	4603      	mov	r3, r0
 8007a24:	4642      	mov	r2, r8
 8007a26:	189b      	adds	r3, r3, r2
 8007a28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a2a:	464b      	mov	r3, r9
 8007a2c:	460a      	mov	r2, r1
 8007a2e:	eb42 0303 	adc.w	r3, r2, r3
 8007a32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007a40:	f04f 0200 	mov.w	r2, #0
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	008b      	lsls	r3, r1, #2
 8007a50:	4641      	mov	r1, r8
 8007a52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a56:	4641      	mov	r1, r8
 8007a58:	008a      	lsls	r2, r1, #2
 8007a5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007a5e:	f7f8 fc07 	bl	8000270 <__aeabi_uldivmod>
 8007a62:	4602      	mov	r2, r0
 8007a64:	460b      	mov	r3, r1
 8007a66:	4b0d      	ldr	r3, [pc, #52]	@ (8007a9c <UART_SetConfig+0x4e4>)
 8007a68:	fba3 1302 	umull	r1, r3, r3, r2
 8007a6c:	095b      	lsrs	r3, r3, #5
 8007a6e:	2164      	movs	r1, #100	@ 0x64
 8007a70:	fb01 f303 	mul.w	r3, r1, r3
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	3332      	adds	r3, #50	@ 0x32
 8007a7a:	4a08      	ldr	r2, [pc, #32]	@ (8007a9c <UART_SetConfig+0x4e4>)
 8007a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007a80:	095b      	lsrs	r3, r3, #5
 8007a82:	f003 020f 	and.w	r2, r3, #15
 8007a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4422      	add	r2, r4
 8007a8e:	609a      	str	r2, [r3, #8]
}
 8007a90:	bf00      	nop
 8007a92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007a96:	46bd      	mov	sp, r7
 8007a98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a9c:	51eb851f 	.word	0x51eb851f

08007aa0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ab4:	683a      	ldr	r2, [r7, #0]
 8007ab6:	6812      	ldr	r2, [r2, #0]
 8007ab8:	f023 0101 	bic.w	r1, r3, #1
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	2b08      	cmp	r3, #8
 8007ac8:	d102      	bne.n	8007ad0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007aca:	2340      	movs	r3, #64	@ 0x40
 8007acc:	617b      	str	r3, [r7, #20]
 8007ace:	e001      	b.n	8007ad4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007ae0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007ae6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007aec:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007af2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8007af8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8007afe:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8007b04:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8007b0a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8007b10:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8007b16:	4313      	orrs	r3, r2
 8007b18:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8007b2e:	4b10      	ldr	r3, [pc, #64]	@ (8007b70 <FSMC_NORSRAM_Init+0xd0>)
 8007b30:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b38:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8007b40:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	43db      	mvns	r3, r3
 8007b50:	ea02 0103 	and.w	r1, r2, r3
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	4319      	orrs	r1, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	371c      	adds	r7, #28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	0008fb7f 	.word	0x0008fb7f

08007b74 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	1c5a      	adds	r2, r3, #1
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8a:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	011b      	lsls	r3, r3, #4
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	041b      	lsls	r3, r3, #16
 8007ba8:	431a      	orrs	r2, r3
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	3b01      	subs	r3, #1
 8007bb0:	051b      	lsls	r3, r3, #20
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	3b02      	subs	r3, #2
 8007bba:	061b      	lsls	r3, r3, #24
 8007bbc:	431a      	orrs	r2, r3
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	3201      	adds	r2, #1
 8007bc8:	4319      	orrs	r1, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
	...

08007be0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bf4:	d11d      	bne.n	8007c32 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007bfe:	4b13      	ldr	r3, [pc, #76]	@ (8007c4c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	6811      	ldr	r1, [r2, #0]
 8007c06:	68ba      	ldr	r2, [r7, #8]
 8007c08:	6852      	ldr	r2, [r2, #4]
 8007c0a:	0112      	lsls	r2, r2, #4
 8007c0c:	4311      	orrs	r1, r2
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	6892      	ldr	r2, [r2, #8]
 8007c12:	0212      	lsls	r2, r2, #8
 8007c14:	4311      	orrs	r1, r2
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	6992      	ldr	r2, [r2, #24]
 8007c1a:	4311      	orrs	r1, r2
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	68d2      	ldr	r2, [r2, #12]
 8007c20:	0412      	lsls	r2, r2, #16
 8007c22:	430a      	orrs	r2, r1
 8007c24:	ea43 0102 	orr.w	r1, r3, r2
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007c30:	e005      	b.n	8007c3e <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8007c3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8007c3e:	2300      	movs	r3, #0
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	cff00000 	.word	0xcff00000

08007c50 <siprintf>:
 8007c50:	b40e      	push	{r1, r2, r3}
 8007c52:	b500      	push	{lr}
 8007c54:	b09c      	sub	sp, #112	@ 0x70
 8007c56:	ab1d      	add	r3, sp, #116	@ 0x74
 8007c58:	9002      	str	r0, [sp, #8]
 8007c5a:	9006      	str	r0, [sp, #24]
 8007c5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007c60:	4809      	ldr	r0, [pc, #36]	@ (8007c88 <siprintf+0x38>)
 8007c62:	9107      	str	r1, [sp, #28]
 8007c64:	9104      	str	r1, [sp, #16]
 8007c66:	4909      	ldr	r1, [pc, #36]	@ (8007c8c <siprintf+0x3c>)
 8007c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c6c:	9105      	str	r1, [sp, #20]
 8007c6e:	6800      	ldr	r0, [r0, #0]
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	a902      	add	r1, sp, #8
 8007c74:	f000 f994 	bl	8007fa0 <_svfiprintf_r>
 8007c78:	9b02      	ldr	r3, [sp, #8]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	701a      	strb	r2, [r3, #0]
 8007c7e:	b01c      	add	sp, #112	@ 0x70
 8007c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c84:	b003      	add	sp, #12
 8007c86:	4770      	bx	lr
 8007c88:	20000014 	.word	0x20000014
 8007c8c:	ffff0208 	.word	0xffff0208

08007c90 <memset>:
 8007c90:	4402      	add	r2, r0
 8007c92:	4603      	mov	r3, r0
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d100      	bne.n	8007c9a <memset+0xa>
 8007c98:	4770      	bx	lr
 8007c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9e:	e7f9      	b.n	8007c94 <memset+0x4>

08007ca0 <__errno>:
 8007ca0:	4b01      	ldr	r3, [pc, #4]	@ (8007ca8 <__errno+0x8>)
 8007ca2:	6818      	ldr	r0, [r3, #0]
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	20000014 	.word	0x20000014

08007cac <__libc_init_array>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	4d0d      	ldr	r5, [pc, #52]	@ (8007ce4 <__libc_init_array+0x38>)
 8007cb0:	4c0d      	ldr	r4, [pc, #52]	@ (8007ce8 <__libc_init_array+0x3c>)
 8007cb2:	1b64      	subs	r4, r4, r5
 8007cb4:	10a4      	asrs	r4, r4, #2
 8007cb6:	2600      	movs	r6, #0
 8007cb8:	42a6      	cmp	r6, r4
 8007cba:	d109      	bne.n	8007cd0 <__libc_init_array+0x24>
 8007cbc:	4d0b      	ldr	r5, [pc, #44]	@ (8007cec <__libc_init_array+0x40>)
 8007cbe:	4c0c      	ldr	r4, [pc, #48]	@ (8007cf0 <__libc_init_array+0x44>)
 8007cc0:	f000 fc66 	bl	8008590 <_init>
 8007cc4:	1b64      	subs	r4, r4, r5
 8007cc6:	10a4      	asrs	r4, r4, #2
 8007cc8:	2600      	movs	r6, #0
 8007cca:	42a6      	cmp	r6, r4
 8007ccc:	d105      	bne.n	8007cda <__libc_init_array+0x2e>
 8007cce:	bd70      	pop	{r4, r5, r6, pc}
 8007cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd4:	4798      	blx	r3
 8007cd6:	3601      	adds	r6, #1
 8007cd8:	e7ee      	b.n	8007cb8 <__libc_init_array+0xc>
 8007cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cde:	4798      	blx	r3
 8007ce0:	3601      	adds	r6, #1
 8007ce2:	e7f2      	b.n	8007cca <__libc_init_array+0x1e>
 8007ce4:	0800b638 	.word	0x0800b638
 8007ce8:	0800b638 	.word	0x0800b638
 8007cec:	0800b638 	.word	0x0800b638
 8007cf0:	0800b63c 	.word	0x0800b63c

08007cf4 <__retarget_lock_acquire_recursive>:
 8007cf4:	4770      	bx	lr

08007cf6 <__retarget_lock_release_recursive>:
 8007cf6:	4770      	bx	lr

08007cf8 <_free_r>:
 8007cf8:	b538      	push	{r3, r4, r5, lr}
 8007cfa:	4605      	mov	r5, r0
 8007cfc:	2900      	cmp	r1, #0
 8007cfe:	d041      	beq.n	8007d84 <_free_r+0x8c>
 8007d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d04:	1f0c      	subs	r4, r1, #4
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bfb8      	it	lt
 8007d0a:	18e4      	addlt	r4, r4, r3
 8007d0c:	f000 f8e0 	bl	8007ed0 <__malloc_lock>
 8007d10:	4a1d      	ldr	r2, [pc, #116]	@ (8007d88 <_free_r+0x90>)
 8007d12:	6813      	ldr	r3, [r2, #0]
 8007d14:	b933      	cbnz	r3, 8007d24 <_free_r+0x2c>
 8007d16:	6063      	str	r3, [r4, #4]
 8007d18:	6014      	str	r4, [r2, #0]
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d20:	f000 b8dc 	b.w	8007edc <__malloc_unlock>
 8007d24:	42a3      	cmp	r3, r4
 8007d26:	d908      	bls.n	8007d3a <_free_r+0x42>
 8007d28:	6820      	ldr	r0, [r4, #0]
 8007d2a:	1821      	adds	r1, r4, r0
 8007d2c:	428b      	cmp	r3, r1
 8007d2e:	bf01      	itttt	eq
 8007d30:	6819      	ldreq	r1, [r3, #0]
 8007d32:	685b      	ldreq	r3, [r3, #4]
 8007d34:	1809      	addeq	r1, r1, r0
 8007d36:	6021      	streq	r1, [r4, #0]
 8007d38:	e7ed      	b.n	8007d16 <_free_r+0x1e>
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	b10b      	cbz	r3, 8007d44 <_free_r+0x4c>
 8007d40:	42a3      	cmp	r3, r4
 8007d42:	d9fa      	bls.n	8007d3a <_free_r+0x42>
 8007d44:	6811      	ldr	r1, [r2, #0]
 8007d46:	1850      	adds	r0, r2, r1
 8007d48:	42a0      	cmp	r0, r4
 8007d4a:	d10b      	bne.n	8007d64 <_free_r+0x6c>
 8007d4c:	6820      	ldr	r0, [r4, #0]
 8007d4e:	4401      	add	r1, r0
 8007d50:	1850      	adds	r0, r2, r1
 8007d52:	4283      	cmp	r3, r0
 8007d54:	6011      	str	r1, [r2, #0]
 8007d56:	d1e0      	bne.n	8007d1a <_free_r+0x22>
 8007d58:	6818      	ldr	r0, [r3, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	6053      	str	r3, [r2, #4]
 8007d5e:	4408      	add	r0, r1
 8007d60:	6010      	str	r0, [r2, #0]
 8007d62:	e7da      	b.n	8007d1a <_free_r+0x22>
 8007d64:	d902      	bls.n	8007d6c <_free_r+0x74>
 8007d66:	230c      	movs	r3, #12
 8007d68:	602b      	str	r3, [r5, #0]
 8007d6a:	e7d6      	b.n	8007d1a <_free_r+0x22>
 8007d6c:	6820      	ldr	r0, [r4, #0]
 8007d6e:	1821      	adds	r1, r4, r0
 8007d70:	428b      	cmp	r3, r1
 8007d72:	bf04      	itt	eq
 8007d74:	6819      	ldreq	r1, [r3, #0]
 8007d76:	685b      	ldreq	r3, [r3, #4]
 8007d78:	6063      	str	r3, [r4, #4]
 8007d7a:	bf04      	itt	eq
 8007d7c:	1809      	addeq	r1, r1, r0
 8007d7e:	6021      	streq	r1, [r4, #0]
 8007d80:	6054      	str	r4, [r2, #4]
 8007d82:	e7ca      	b.n	8007d1a <_free_r+0x22>
 8007d84:	bd38      	pop	{r3, r4, r5, pc}
 8007d86:	bf00      	nop
 8007d88:	20000418 	.word	0x20000418

08007d8c <sbrk_aligned>:
 8007d8c:	b570      	push	{r4, r5, r6, lr}
 8007d8e:	4e0f      	ldr	r6, [pc, #60]	@ (8007dcc <sbrk_aligned+0x40>)
 8007d90:	460c      	mov	r4, r1
 8007d92:	6831      	ldr	r1, [r6, #0]
 8007d94:	4605      	mov	r5, r0
 8007d96:	b911      	cbnz	r1, 8007d9e <sbrk_aligned+0x12>
 8007d98:	f000 fba6 	bl	80084e8 <_sbrk_r>
 8007d9c:	6030      	str	r0, [r6, #0]
 8007d9e:	4621      	mov	r1, r4
 8007da0:	4628      	mov	r0, r5
 8007da2:	f000 fba1 	bl	80084e8 <_sbrk_r>
 8007da6:	1c43      	adds	r3, r0, #1
 8007da8:	d103      	bne.n	8007db2 <sbrk_aligned+0x26>
 8007daa:	f04f 34ff 	mov.w	r4, #4294967295
 8007dae:	4620      	mov	r0, r4
 8007db0:	bd70      	pop	{r4, r5, r6, pc}
 8007db2:	1cc4      	adds	r4, r0, #3
 8007db4:	f024 0403 	bic.w	r4, r4, #3
 8007db8:	42a0      	cmp	r0, r4
 8007dba:	d0f8      	beq.n	8007dae <sbrk_aligned+0x22>
 8007dbc:	1a21      	subs	r1, r4, r0
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	f000 fb92 	bl	80084e8 <_sbrk_r>
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	d1f2      	bne.n	8007dae <sbrk_aligned+0x22>
 8007dc8:	e7ef      	b.n	8007daa <sbrk_aligned+0x1e>
 8007dca:	bf00      	nop
 8007dcc:	20000414 	.word	0x20000414

08007dd0 <_malloc_r>:
 8007dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dd4:	1ccd      	adds	r5, r1, #3
 8007dd6:	f025 0503 	bic.w	r5, r5, #3
 8007dda:	3508      	adds	r5, #8
 8007ddc:	2d0c      	cmp	r5, #12
 8007dde:	bf38      	it	cc
 8007de0:	250c      	movcc	r5, #12
 8007de2:	2d00      	cmp	r5, #0
 8007de4:	4606      	mov	r6, r0
 8007de6:	db01      	blt.n	8007dec <_malloc_r+0x1c>
 8007de8:	42a9      	cmp	r1, r5
 8007dea:	d904      	bls.n	8007df6 <_malloc_r+0x26>
 8007dec:	230c      	movs	r3, #12
 8007dee:	6033      	str	r3, [r6, #0]
 8007df0:	2000      	movs	r0, #0
 8007df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007df6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ecc <_malloc_r+0xfc>
 8007dfa:	f000 f869 	bl	8007ed0 <__malloc_lock>
 8007dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8007e02:	461c      	mov	r4, r3
 8007e04:	bb44      	cbnz	r4, 8007e58 <_malloc_r+0x88>
 8007e06:	4629      	mov	r1, r5
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f7ff ffbf 	bl	8007d8c <sbrk_aligned>
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	4604      	mov	r4, r0
 8007e12:	d158      	bne.n	8007ec6 <_malloc_r+0xf6>
 8007e14:	f8d8 4000 	ldr.w	r4, [r8]
 8007e18:	4627      	mov	r7, r4
 8007e1a:	2f00      	cmp	r7, #0
 8007e1c:	d143      	bne.n	8007ea6 <_malloc_r+0xd6>
 8007e1e:	2c00      	cmp	r4, #0
 8007e20:	d04b      	beq.n	8007eba <_malloc_r+0xea>
 8007e22:	6823      	ldr	r3, [r4, #0]
 8007e24:	4639      	mov	r1, r7
 8007e26:	4630      	mov	r0, r6
 8007e28:	eb04 0903 	add.w	r9, r4, r3
 8007e2c:	f000 fb5c 	bl	80084e8 <_sbrk_r>
 8007e30:	4581      	cmp	r9, r0
 8007e32:	d142      	bne.n	8007eba <_malloc_r+0xea>
 8007e34:	6821      	ldr	r1, [r4, #0]
 8007e36:	1a6d      	subs	r5, r5, r1
 8007e38:	4629      	mov	r1, r5
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	f7ff ffa6 	bl	8007d8c <sbrk_aligned>
 8007e40:	3001      	adds	r0, #1
 8007e42:	d03a      	beq.n	8007eba <_malloc_r+0xea>
 8007e44:	6823      	ldr	r3, [r4, #0]
 8007e46:	442b      	add	r3, r5
 8007e48:	6023      	str	r3, [r4, #0]
 8007e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	bb62      	cbnz	r2, 8007eac <_malloc_r+0xdc>
 8007e52:	f8c8 7000 	str.w	r7, [r8]
 8007e56:	e00f      	b.n	8007e78 <_malloc_r+0xa8>
 8007e58:	6822      	ldr	r2, [r4, #0]
 8007e5a:	1b52      	subs	r2, r2, r5
 8007e5c:	d420      	bmi.n	8007ea0 <_malloc_r+0xd0>
 8007e5e:	2a0b      	cmp	r2, #11
 8007e60:	d917      	bls.n	8007e92 <_malloc_r+0xc2>
 8007e62:	1961      	adds	r1, r4, r5
 8007e64:	42a3      	cmp	r3, r4
 8007e66:	6025      	str	r5, [r4, #0]
 8007e68:	bf18      	it	ne
 8007e6a:	6059      	strne	r1, [r3, #4]
 8007e6c:	6863      	ldr	r3, [r4, #4]
 8007e6e:	bf08      	it	eq
 8007e70:	f8c8 1000 	streq.w	r1, [r8]
 8007e74:	5162      	str	r2, [r4, r5]
 8007e76:	604b      	str	r3, [r1, #4]
 8007e78:	4630      	mov	r0, r6
 8007e7a:	f000 f82f 	bl	8007edc <__malloc_unlock>
 8007e7e:	f104 000b 	add.w	r0, r4, #11
 8007e82:	1d23      	adds	r3, r4, #4
 8007e84:	f020 0007 	bic.w	r0, r0, #7
 8007e88:	1ac2      	subs	r2, r0, r3
 8007e8a:	bf1c      	itt	ne
 8007e8c:	1a1b      	subne	r3, r3, r0
 8007e8e:	50a3      	strne	r3, [r4, r2]
 8007e90:	e7af      	b.n	8007df2 <_malloc_r+0x22>
 8007e92:	6862      	ldr	r2, [r4, #4]
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	bf0c      	ite	eq
 8007e98:	f8c8 2000 	streq.w	r2, [r8]
 8007e9c:	605a      	strne	r2, [r3, #4]
 8007e9e:	e7eb      	b.n	8007e78 <_malloc_r+0xa8>
 8007ea0:	4623      	mov	r3, r4
 8007ea2:	6864      	ldr	r4, [r4, #4]
 8007ea4:	e7ae      	b.n	8007e04 <_malloc_r+0x34>
 8007ea6:	463c      	mov	r4, r7
 8007ea8:	687f      	ldr	r7, [r7, #4]
 8007eaa:	e7b6      	b.n	8007e1a <_malloc_r+0x4a>
 8007eac:	461a      	mov	r2, r3
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	42a3      	cmp	r3, r4
 8007eb2:	d1fb      	bne.n	8007eac <_malloc_r+0xdc>
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	6053      	str	r3, [r2, #4]
 8007eb8:	e7de      	b.n	8007e78 <_malloc_r+0xa8>
 8007eba:	230c      	movs	r3, #12
 8007ebc:	6033      	str	r3, [r6, #0]
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	f000 f80c 	bl	8007edc <__malloc_unlock>
 8007ec4:	e794      	b.n	8007df0 <_malloc_r+0x20>
 8007ec6:	6005      	str	r5, [r0, #0]
 8007ec8:	e7d6      	b.n	8007e78 <_malloc_r+0xa8>
 8007eca:	bf00      	nop
 8007ecc:	20000418 	.word	0x20000418

08007ed0 <__malloc_lock>:
 8007ed0:	4801      	ldr	r0, [pc, #4]	@ (8007ed8 <__malloc_lock+0x8>)
 8007ed2:	f7ff bf0f 	b.w	8007cf4 <__retarget_lock_acquire_recursive>
 8007ed6:	bf00      	nop
 8007ed8:	20000410 	.word	0x20000410

08007edc <__malloc_unlock>:
 8007edc:	4801      	ldr	r0, [pc, #4]	@ (8007ee4 <__malloc_unlock+0x8>)
 8007ede:	f7ff bf0a 	b.w	8007cf6 <__retarget_lock_release_recursive>
 8007ee2:	bf00      	nop
 8007ee4:	20000410 	.word	0x20000410

08007ee8 <__ssputs_r>:
 8007ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007eec:	688e      	ldr	r6, [r1, #8]
 8007eee:	461f      	mov	r7, r3
 8007ef0:	42be      	cmp	r6, r7
 8007ef2:	680b      	ldr	r3, [r1, #0]
 8007ef4:	4682      	mov	sl, r0
 8007ef6:	460c      	mov	r4, r1
 8007ef8:	4690      	mov	r8, r2
 8007efa:	d82d      	bhi.n	8007f58 <__ssputs_r+0x70>
 8007efc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f04:	d026      	beq.n	8007f54 <__ssputs_r+0x6c>
 8007f06:	6965      	ldr	r5, [r4, #20]
 8007f08:	6909      	ldr	r1, [r1, #16]
 8007f0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f0e:	eba3 0901 	sub.w	r9, r3, r1
 8007f12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f16:	1c7b      	adds	r3, r7, #1
 8007f18:	444b      	add	r3, r9
 8007f1a:	106d      	asrs	r5, r5, #1
 8007f1c:	429d      	cmp	r5, r3
 8007f1e:	bf38      	it	cc
 8007f20:	461d      	movcc	r5, r3
 8007f22:	0553      	lsls	r3, r2, #21
 8007f24:	d527      	bpl.n	8007f76 <__ssputs_r+0x8e>
 8007f26:	4629      	mov	r1, r5
 8007f28:	f7ff ff52 	bl	8007dd0 <_malloc_r>
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	b360      	cbz	r0, 8007f8a <__ssputs_r+0xa2>
 8007f30:	6921      	ldr	r1, [r4, #16]
 8007f32:	464a      	mov	r2, r9
 8007f34:	f000 fae8 	bl	8008508 <memcpy>
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f42:	81a3      	strh	r3, [r4, #12]
 8007f44:	6126      	str	r6, [r4, #16]
 8007f46:	6165      	str	r5, [r4, #20]
 8007f48:	444e      	add	r6, r9
 8007f4a:	eba5 0509 	sub.w	r5, r5, r9
 8007f4e:	6026      	str	r6, [r4, #0]
 8007f50:	60a5      	str	r5, [r4, #8]
 8007f52:	463e      	mov	r6, r7
 8007f54:	42be      	cmp	r6, r7
 8007f56:	d900      	bls.n	8007f5a <__ssputs_r+0x72>
 8007f58:	463e      	mov	r6, r7
 8007f5a:	6820      	ldr	r0, [r4, #0]
 8007f5c:	4632      	mov	r2, r6
 8007f5e:	4641      	mov	r1, r8
 8007f60:	f000 faa8 	bl	80084b4 <memmove>
 8007f64:	68a3      	ldr	r3, [r4, #8]
 8007f66:	1b9b      	subs	r3, r3, r6
 8007f68:	60a3      	str	r3, [r4, #8]
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	4433      	add	r3, r6
 8007f6e:	6023      	str	r3, [r4, #0]
 8007f70:	2000      	movs	r0, #0
 8007f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f76:	462a      	mov	r2, r5
 8007f78:	f000 fad4 	bl	8008524 <_realloc_r>
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d1e0      	bne.n	8007f44 <__ssputs_r+0x5c>
 8007f82:	6921      	ldr	r1, [r4, #16]
 8007f84:	4650      	mov	r0, sl
 8007f86:	f7ff feb7 	bl	8007cf8 <_free_r>
 8007f8a:	230c      	movs	r3, #12
 8007f8c:	f8ca 3000 	str.w	r3, [sl]
 8007f90:	89a3      	ldrh	r3, [r4, #12]
 8007f92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f96:	81a3      	strh	r3, [r4, #12]
 8007f98:	f04f 30ff 	mov.w	r0, #4294967295
 8007f9c:	e7e9      	b.n	8007f72 <__ssputs_r+0x8a>
	...

08007fa0 <_svfiprintf_r>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	4698      	mov	r8, r3
 8007fa6:	898b      	ldrh	r3, [r1, #12]
 8007fa8:	061b      	lsls	r3, r3, #24
 8007faa:	b09d      	sub	sp, #116	@ 0x74
 8007fac:	4607      	mov	r7, r0
 8007fae:	460d      	mov	r5, r1
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	d510      	bpl.n	8007fd6 <_svfiprintf_r+0x36>
 8007fb4:	690b      	ldr	r3, [r1, #16]
 8007fb6:	b973      	cbnz	r3, 8007fd6 <_svfiprintf_r+0x36>
 8007fb8:	2140      	movs	r1, #64	@ 0x40
 8007fba:	f7ff ff09 	bl	8007dd0 <_malloc_r>
 8007fbe:	6028      	str	r0, [r5, #0]
 8007fc0:	6128      	str	r0, [r5, #16]
 8007fc2:	b930      	cbnz	r0, 8007fd2 <_svfiprintf_r+0x32>
 8007fc4:	230c      	movs	r3, #12
 8007fc6:	603b      	str	r3, [r7, #0]
 8007fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fcc:	b01d      	add	sp, #116	@ 0x74
 8007fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd2:	2340      	movs	r3, #64	@ 0x40
 8007fd4:	616b      	str	r3, [r5, #20]
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fda:	2320      	movs	r3, #32
 8007fdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fe0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fe4:	2330      	movs	r3, #48	@ 0x30
 8007fe6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008184 <_svfiprintf_r+0x1e4>
 8007fea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fee:	f04f 0901 	mov.w	r9, #1
 8007ff2:	4623      	mov	r3, r4
 8007ff4:	469a      	mov	sl, r3
 8007ff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ffa:	b10a      	cbz	r2, 8008000 <_svfiprintf_r+0x60>
 8007ffc:	2a25      	cmp	r2, #37	@ 0x25
 8007ffe:	d1f9      	bne.n	8007ff4 <_svfiprintf_r+0x54>
 8008000:	ebba 0b04 	subs.w	fp, sl, r4
 8008004:	d00b      	beq.n	800801e <_svfiprintf_r+0x7e>
 8008006:	465b      	mov	r3, fp
 8008008:	4622      	mov	r2, r4
 800800a:	4629      	mov	r1, r5
 800800c:	4638      	mov	r0, r7
 800800e:	f7ff ff6b 	bl	8007ee8 <__ssputs_r>
 8008012:	3001      	adds	r0, #1
 8008014:	f000 80a7 	beq.w	8008166 <_svfiprintf_r+0x1c6>
 8008018:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800801a:	445a      	add	r2, fp
 800801c:	9209      	str	r2, [sp, #36]	@ 0x24
 800801e:	f89a 3000 	ldrb.w	r3, [sl]
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 809f 	beq.w	8008166 <_svfiprintf_r+0x1c6>
 8008028:	2300      	movs	r3, #0
 800802a:	f04f 32ff 	mov.w	r2, #4294967295
 800802e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008032:	f10a 0a01 	add.w	sl, sl, #1
 8008036:	9304      	str	r3, [sp, #16]
 8008038:	9307      	str	r3, [sp, #28]
 800803a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800803e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008040:	4654      	mov	r4, sl
 8008042:	2205      	movs	r2, #5
 8008044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008048:	484e      	ldr	r0, [pc, #312]	@ (8008184 <_svfiprintf_r+0x1e4>)
 800804a:	f7f8 f8c1 	bl	80001d0 <memchr>
 800804e:	9a04      	ldr	r2, [sp, #16]
 8008050:	b9d8      	cbnz	r0, 800808a <_svfiprintf_r+0xea>
 8008052:	06d0      	lsls	r0, r2, #27
 8008054:	bf44      	itt	mi
 8008056:	2320      	movmi	r3, #32
 8008058:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800805c:	0711      	lsls	r1, r2, #28
 800805e:	bf44      	itt	mi
 8008060:	232b      	movmi	r3, #43	@ 0x2b
 8008062:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008066:	f89a 3000 	ldrb.w	r3, [sl]
 800806a:	2b2a      	cmp	r3, #42	@ 0x2a
 800806c:	d015      	beq.n	800809a <_svfiprintf_r+0xfa>
 800806e:	9a07      	ldr	r2, [sp, #28]
 8008070:	4654      	mov	r4, sl
 8008072:	2000      	movs	r0, #0
 8008074:	f04f 0c0a 	mov.w	ip, #10
 8008078:	4621      	mov	r1, r4
 800807a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800807e:	3b30      	subs	r3, #48	@ 0x30
 8008080:	2b09      	cmp	r3, #9
 8008082:	d94b      	bls.n	800811c <_svfiprintf_r+0x17c>
 8008084:	b1b0      	cbz	r0, 80080b4 <_svfiprintf_r+0x114>
 8008086:	9207      	str	r2, [sp, #28]
 8008088:	e014      	b.n	80080b4 <_svfiprintf_r+0x114>
 800808a:	eba0 0308 	sub.w	r3, r0, r8
 800808e:	fa09 f303 	lsl.w	r3, r9, r3
 8008092:	4313      	orrs	r3, r2
 8008094:	9304      	str	r3, [sp, #16]
 8008096:	46a2      	mov	sl, r4
 8008098:	e7d2      	b.n	8008040 <_svfiprintf_r+0xa0>
 800809a:	9b03      	ldr	r3, [sp, #12]
 800809c:	1d19      	adds	r1, r3, #4
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	9103      	str	r1, [sp, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	bfbb      	ittet	lt
 80080a6:	425b      	neglt	r3, r3
 80080a8:	f042 0202 	orrlt.w	r2, r2, #2
 80080ac:	9307      	strge	r3, [sp, #28]
 80080ae:	9307      	strlt	r3, [sp, #28]
 80080b0:	bfb8      	it	lt
 80080b2:	9204      	strlt	r2, [sp, #16]
 80080b4:	7823      	ldrb	r3, [r4, #0]
 80080b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80080b8:	d10a      	bne.n	80080d0 <_svfiprintf_r+0x130>
 80080ba:	7863      	ldrb	r3, [r4, #1]
 80080bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80080be:	d132      	bne.n	8008126 <_svfiprintf_r+0x186>
 80080c0:	9b03      	ldr	r3, [sp, #12]
 80080c2:	1d1a      	adds	r2, r3, #4
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	9203      	str	r2, [sp, #12]
 80080c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080cc:	3402      	adds	r4, #2
 80080ce:	9305      	str	r3, [sp, #20]
 80080d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008194 <_svfiprintf_r+0x1f4>
 80080d4:	7821      	ldrb	r1, [r4, #0]
 80080d6:	2203      	movs	r2, #3
 80080d8:	4650      	mov	r0, sl
 80080da:	f7f8 f879 	bl	80001d0 <memchr>
 80080de:	b138      	cbz	r0, 80080f0 <_svfiprintf_r+0x150>
 80080e0:	9b04      	ldr	r3, [sp, #16]
 80080e2:	eba0 000a 	sub.w	r0, r0, sl
 80080e6:	2240      	movs	r2, #64	@ 0x40
 80080e8:	4082      	lsls	r2, r0
 80080ea:	4313      	orrs	r3, r2
 80080ec:	3401      	adds	r4, #1
 80080ee:	9304      	str	r3, [sp, #16]
 80080f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080f4:	4824      	ldr	r0, [pc, #144]	@ (8008188 <_svfiprintf_r+0x1e8>)
 80080f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080fa:	2206      	movs	r2, #6
 80080fc:	f7f8 f868 	bl	80001d0 <memchr>
 8008100:	2800      	cmp	r0, #0
 8008102:	d036      	beq.n	8008172 <_svfiprintf_r+0x1d2>
 8008104:	4b21      	ldr	r3, [pc, #132]	@ (800818c <_svfiprintf_r+0x1ec>)
 8008106:	bb1b      	cbnz	r3, 8008150 <_svfiprintf_r+0x1b0>
 8008108:	9b03      	ldr	r3, [sp, #12]
 800810a:	3307      	adds	r3, #7
 800810c:	f023 0307 	bic.w	r3, r3, #7
 8008110:	3308      	adds	r3, #8
 8008112:	9303      	str	r3, [sp, #12]
 8008114:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008116:	4433      	add	r3, r6
 8008118:	9309      	str	r3, [sp, #36]	@ 0x24
 800811a:	e76a      	b.n	8007ff2 <_svfiprintf_r+0x52>
 800811c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008120:	460c      	mov	r4, r1
 8008122:	2001      	movs	r0, #1
 8008124:	e7a8      	b.n	8008078 <_svfiprintf_r+0xd8>
 8008126:	2300      	movs	r3, #0
 8008128:	3401      	adds	r4, #1
 800812a:	9305      	str	r3, [sp, #20]
 800812c:	4619      	mov	r1, r3
 800812e:	f04f 0c0a 	mov.w	ip, #10
 8008132:	4620      	mov	r0, r4
 8008134:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008138:	3a30      	subs	r2, #48	@ 0x30
 800813a:	2a09      	cmp	r2, #9
 800813c:	d903      	bls.n	8008146 <_svfiprintf_r+0x1a6>
 800813e:	2b00      	cmp	r3, #0
 8008140:	d0c6      	beq.n	80080d0 <_svfiprintf_r+0x130>
 8008142:	9105      	str	r1, [sp, #20]
 8008144:	e7c4      	b.n	80080d0 <_svfiprintf_r+0x130>
 8008146:	fb0c 2101 	mla	r1, ip, r1, r2
 800814a:	4604      	mov	r4, r0
 800814c:	2301      	movs	r3, #1
 800814e:	e7f0      	b.n	8008132 <_svfiprintf_r+0x192>
 8008150:	ab03      	add	r3, sp, #12
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	462a      	mov	r2, r5
 8008156:	4b0e      	ldr	r3, [pc, #56]	@ (8008190 <_svfiprintf_r+0x1f0>)
 8008158:	a904      	add	r1, sp, #16
 800815a:	4638      	mov	r0, r7
 800815c:	f3af 8000 	nop.w
 8008160:	1c42      	adds	r2, r0, #1
 8008162:	4606      	mov	r6, r0
 8008164:	d1d6      	bne.n	8008114 <_svfiprintf_r+0x174>
 8008166:	89ab      	ldrh	r3, [r5, #12]
 8008168:	065b      	lsls	r3, r3, #25
 800816a:	f53f af2d 	bmi.w	8007fc8 <_svfiprintf_r+0x28>
 800816e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008170:	e72c      	b.n	8007fcc <_svfiprintf_r+0x2c>
 8008172:	ab03      	add	r3, sp, #12
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	462a      	mov	r2, r5
 8008178:	4b05      	ldr	r3, [pc, #20]	@ (8008190 <_svfiprintf_r+0x1f0>)
 800817a:	a904      	add	r1, sp, #16
 800817c:	4638      	mov	r0, r7
 800817e:	f000 f879 	bl	8008274 <_printf_i>
 8008182:	e7ed      	b.n	8008160 <_svfiprintf_r+0x1c0>
 8008184:	0800b5fc 	.word	0x0800b5fc
 8008188:	0800b606 	.word	0x0800b606
 800818c:	00000000 	.word	0x00000000
 8008190:	08007ee9 	.word	0x08007ee9
 8008194:	0800b602 	.word	0x0800b602

08008198 <_printf_common>:
 8008198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800819c:	4616      	mov	r6, r2
 800819e:	4698      	mov	r8, r3
 80081a0:	688a      	ldr	r2, [r1, #8]
 80081a2:	690b      	ldr	r3, [r1, #16]
 80081a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80081a8:	4293      	cmp	r3, r2
 80081aa:	bfb8      	it	lt
 80081ac:	4613      	movlt	r3, r2
 80081ae:	6033      	str	r3, [r6, #0]
 80081b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80081b4:	4607      	mov	r7, r0
 80081b6:	460c      	mov	r4, r1
 80081b8:	b10a      	cbz	r2, 80081be <_printf_common+0x26>
 80081ba:	3301      	adds	r3, #1
 80081bc:	6033      	str	r3, [r6, #0]
 80081be:	6823      	ldr	r3, [r4, #0]
 80081c0:	0699      	lsls	r1, r3, #26
 80081c2:	bf42      	ittt	mi
 80081c4:	6833      	ldrmi	r3, [r6, #0]
 80081c6:	3302      	addmi	r3, #2
 80081c8:	6033      	strmi	r3, [r6, #0]
 80081ca:	6825      	ldr	r5, [r4, #0]
 80081cc:	f015 0506 	ands.w	r5, r5, #6
 80081d0:	d106      	bne.n	80081e0 <_printf_common+0x48>
 80081d2:	f104 0a19 	add.w	sl, r4, #25
 80081d6:	68e3      	ldr	r3, [r4, #12]
 80081d8:	6832      	ldr	r2, [r6, #0]
 80081da:	1a9b      	subs	r3, r3, r2
 80081dc:	42ab      	cmp	r3, r5
 80081de:	dc26      	bgt.n	800822e <_printf_common+0x96>
 80081e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081e4:	6822      	ldr	r2, [r4, #0]
 80081e6:	3b00      	subs	r3, #0
 80081e8:	bf18      	it	ne
 80081ea:	2301      	movne	r3, #1
 80081ec:	0692      	lsls	r2, r2, #26
 80081ee:	d42b      	bmi.n	8008248 <_printf_common+0xb0>
 80081f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081f4:	4641      	mov	r1, r8
 80081f6:	4638      	mov	r0, r7
 80081f8:	47c8      	blx	r9
 80081fa:	3001      	adds	r0, #1
 80081fc:	d01e      	beq.n	800823c <_printf_common+0xa4>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	6922      	ldr	r2, [r4, #16]
 8008202:	f003 0306 	and.w	r3, r3, #6
 8008206:	2b04      	cmp	r3, #4
 8008208:	bf02      	ittt	eq
 800820a:	68e5      	ldreq	r5, [r4, #12]
 800820c:	6833      	ldreq	r3, [r6, #0]
 800820e:	1aed      	subeq	r5, r5, r3
 8008210:	68a3      	ldr	r3, [r4, #8]
 8008212:	bf0c      	ite	eq
 8008214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008218:	2500      	movne	r5, #0
 800821a:	4293      	cmp	r3, r2
 800821c:	bfc4      	itt	gt
 800821e:	1a9b      	subgt	r3, r3, r2
 8008220:	18ed      	addgt	r5, r5, r3
 8008222:	2600      	movs	r6, #0
 8008224:	341a      	adds	r4, #26
 8008226:	42b5      	cmp	r5, r6
 8008228:	d11a      	bne.n	8008260 <_printf_common+0xc8>
 800822a:	2000      	movs	r0, #0
 800822c:	e008      	b.n	8008240 <_printf_common+0xa8>
 800822e:	2301      	movs	r3, #1
 8008230:	4652      	mov	r2, sl
 8008232:	4641      	mov	r1, r8
 8008234:	4638      	mov	r0, r7
 8008236:	47c8      	blx	r9
 8008238:	3001      	adds	r0, #1
 800823a:	d103      	bne.n	8008244 <_printf_common+0xac>
 800823c:	f04f 30ff 	mov.w	r0, #4294967295
 8008240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008244:	3501      	adds	r5, #1
 8008246:	e7c6      	b.n	80081d6 <_printf_common+0x3e>
 8008248:	18e1      	adds	r1, r4, r3
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	2030      	movs	r0, #48	@ 0x30
 800824e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008252:	4422      	add	r2, r4
 8008254:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008258:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800825c:	3302      	adds	r3, #2
 800825e:	e7c7      	b.n	80081f0 <_printf_common+0x58>
 8008260:	2301      	movs	r3, #1
 8008262:	4622      	mov	r2, r4
 8008264:	4641      	mov	r1, r8
 8008266:	4638      	mov	r0, r7
 8008268:	47c8      	blx	r9
 800826a:	3001      	adds	r0, #1
 800826c:	d0e6      	beq.n	800823c <_printf_common+0xa4>
 800826e:	3601      	adds	r6, #1
 8008270:	e7d9      	b.n	8008226 <_printf_common+0x8e>
	...

08008274 <_printf_i>:
 8008274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008278:	7e0f      	ldrb	r7, [r1, #24]
 800827a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800827c:	2f78      	cmp	r7, #120	@ 0x78
 800827e:	4691      	mov	r9, r2
 8008280:	4680      	mov	r8, r0
 8008282:	460c      	mov	r4, r1
 8008284:	469a      	mov	sl, r3
 8008286:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800828a:	d807      	bhi.n	800829c <_printf_i+0x28>
 800828c:	2f62      	cmp	r7, #98	@ 0x62
 800828e:	d80a      	bhi.n	80082a6 <_printf_i+0x32>
 8008290:	2f00      	cmp	r7, #0
 8008292:	f000 80d2 	beq.w	800843a <_printf_i+0x1c6>
 8008296:	2f58      	cmp	r7, #88	@ 0x58
 8008298:	f000 80b9 	beq.w	800840e <_printf_i+0x19a>
 800829c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082a4:	e03a      	b.n	800831c <_printf_i+0xa8>
 80082a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80082aa:	2b15      	cmp	r3, #21
 80082ac:	d8f6      	bhi.n	800829c <_printf_i+0x28>
 80082ae:	a101      	add	r1, pc, #4	@ (adr r1, 80082b4 <_printf_i+0x40>)
 80082b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80082b4:	0800830d 	.word	0x0800830d
 80082b8:	08008321 	.word	0x08008321
 80082bc:	0800829d 	.word	0x0800829d
 80082c0:	0800829d 	.word	0x0800829d
 80082c4:	0800829d 	.word	0x0800829d
 80082c8:	0800829d 	.word	0x0800829d
 80082cc:	08008321 	.word	0x08008321
 80082d0:	0800829d 	.word	0x0800829d
 80082d4:	0800829d 	.word	0x0800829d
 80082d8:	0800829d 	.word	0x0800829d
 80082dc:	0800829d 	.word	0x0800829d
 80082e0:	08008421 	.word	0x08008421
 80082e4:	0800834b 	.word	0x0800834b
 80082e8:	080083db 	.word	0x080083db
 80082ec:	0800829d 	.word	0x0800829d
 80082f0:	0800829d 	.word	0x0800829d
 80082f4:	08008443 	.word	0x08008443
 80082f8:	0800829d 	.word	0x0800829d
 80082fc:	0800834b 	.word	0x0800834b
 8008300:	0800829d 	.word	0x0800829d
 8008304:	0800829d 	.word	0x0800829d
 8008308:	080083e3 	.word	0x080083e3
 800830c:	6833      	ldr	r3, [r6, #0]
 800830e:	1d1a      	adds	r2, r3, #4
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	6032      	str	r2, [r6, #0]
 8008314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008318:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800831c:	2301      	movs	r3, #1
 800831e:	e09d      	b.n	800845c <_printf_i+0x1e8>
 8008320:	6833      	ldr	r3, [r6, #0]
 8008322:	6820      	ldr	r0, [r4, #0]
 8008324:	1d19      	adds	r1, r3, #4
 8008326:	6031      	str	r1, [r6, #0]
 8008328:	0606      	lsls	r6, r0, #24
 800832a:	d501      	bpl.n	8008330 <_printf_i+0xbc>
 800832c:	681d      	ldr	r5, [r3, #0]
 800832e:	e003      	b.n	8008338 <_printf_i+0xc4>
 8008330:	0645      	lsls	r5, r0, #25
 8008332:	d5fb      	bpl.n	800832c <_printf_i+0xb8>
 8008334:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008338:	2d00      	cmp	r5, #0
 800833a:	da03      	bge.n	8008344 <_printf_i+0xd0>
 800833c:	232d      	movs	r3, #45	@ 0x2d
 800833e:	426d      	negs	r5, r5
 8008340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008344:	4859      	ldr	r0, [pc, #356]	@ (80084ac <_printf_i+0x238>)
 8008346:	230a      	movs	r3, #10
 8008348:	e011      	b.n	800836e <_printf_i+0xfa>
 800834a:	6821      	ldr	r1, [r4, #0]
 800834c:	6833      	ldr	r3, [r6, #0]
 800834e:	0608      	lsls	r0, r1, #24
 8008350:	f853 5b04 	ldr.w	r5, [r3], #4
 8008354:	d402      	bmi.n	800835c <_printf_i+0xe8>
 8008356:	0649      	lsls	r1, r1, #25
 8008358:	bf48      	it	mi
 800835a:	b2ad      	uxthmi	r5, r5
 800835c:	2f6f      	cmp	r7, #111	@ 0x6f
 800835e:	4853      	ldr	r0, [pc, #332]	@ (80084ac <_printf_i+0x238>)
 8008360:	6033      	str	r3, [r6, #0]
 8008362:	bf14      	ite	ne
 8008364:	230a      	movne	r3, #10
 8008366:	2308      	moveq	r3, #8
 8008368:	2100      	movs	r1, #0
 800836a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800836e:	6866      	ldr	r6, [r4, #4]
 8008370:	60a6      	str	r6, [r4, #8]
 8008372:	2e00      	cmp	r6, #0
 8008374:	bfa2      	ittt	ge
 8008376:	6821      	ldrge	r1, [r4, #0]
 8008378:	f021 0104 	bicge.w	r1, r1, #4
 800837c:	6021      	strge	r1, [r4, #0]
 800837e:	b90d      	cbnz	r5, 8008384 <_printf_i+0x110>
 8008380:	2e00      	cmp	r6, #0
 8008382:	d04b      	beq.n	800841c <_printf_i+0x1a8>
 8008384:	4616      	mov	r6, r2
 8008386:	fbb5 f1f3 	udiv	r1, r5, r3
 800838a:	fb03 5711 	mls	r7, r3, r1, r5
 800838e:	5dc7      	ldrb	r7, [r0, r7]
 8008390:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008394:	462f      	mov	r7, r5
 8008396:	42bb      	cmp	r3, r7
 8008398:	460d      	mov	r5, r1
 800839a:	d9f4      	bls.n	8008386 <_printf_i+0x112>
 800839c:	2b08      	cmp	r3, #8
 800839e:	d10b      	bne.n	80083b8 <_printf_i+0x144>
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	07df      	lsls	r7, r3, #31
 80083a4:	d508      	bpl.n	80083b8 <_printf_i+0x144>
 80083a6:	6923      	ldr	r3, [r4, #16]
 80083a8:	6861      	ldr	r1, [r4, #4]
 80083aa:	4299      	cmp	r1, r3
 80083ac:	bfde      	ittt	le
 80083ae:	2330      	movle	r3, #48	@ 0x30
 80083b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80083b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80083b8:	1b92      	subs	r2, r2, r6
 80083ba:	6122      	str	r2, [r4, #16]
 80083bc:	f8cd a000 	str.w	sl, [sp]
 80083c0:	464b      	mov	r3, r9
 80083c2:	aa03      	add	r2, sp, #12
 80083c4:	4621      	mov	r1, r4
 80083c6:	4640      	mov	r0, r8
 80083c8:	f7ff fee6 	bl	8008198 <_printf_common>
 80083cc:	3001      	adds	r0, #1
 80083ce:	d14a      	bne.n	8008466 <_printf_i+0x1f2>
 80083d0:	f04f 30ff 	mov.w	r0, #4294967295
 80083d4:	b004      	add	sp, #16
 80083d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	f043 0320 	orr.w	r3, r3, #32
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	4833      	ldr	r0, [pc, #204]	@ (80084b0 <_printf_i+0x23c>)
 80083e4:	2778      	movs	r7, #120	@ 0x78
 80083e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	6831      	ldr	r1, [r6, #0]
 80083ee:	061f      	lsls	r7, r3, #24
 80083f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80083f4:	d402      	bmi.n	80083fc <_printf_i+0x188>
 80083f6:	065f      	lsls	r7, r3, #25
 80083f8:	bf48      	it	mi
 80083fa:	b2ad      	uxthmi	r5, r5
 80083fc:	6031      	str	r1, [r6, #0]
 80083fe:	07d9      	lsls	r1, r3, #31
 8008400:	bf44      	itt	mi
 8008402:	f043 0320 	orrmi.w	r3, r3, #32
 8008406:	6023      	strmi	r3, [r4, #0]
 8008408:	b11d      	cbz	r5, 8008412 <_printf_i+0x19e>
 800840a:	2310      	movs	r3, #16
 800840c:	e7ac      	b.n	8008368 <_printf_i+0xf4>
 800840e:	4827      	ldr	r0, [pc, #156]	@ (80084ac <_printf_i+0x238>)
 8008410:	e7e9      	b.n	80083e6 <_printf_i+0x172>
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	f023 0320 	bic.w	r3, r3, #32
 8008418:	6023      	str	r3, [r4, #0]
 800841a:	e7f6      	b.n	800840a <_printf_i+0x196>
 800841c:	4616      	mov	r6, r2
 800841e:	e7bd      	b.n	800839c <_printf_i+0x128>
 8008420:	6833      	ldr	r3, [r6, #0]
 8008422:	6825      	ldr	r5, [r4, #0]
 8008424:	6961      	ldr	r1, [r4, #20]
 8008426:	1d18      	adds	r0, r3, #4
 8008428:	6030      	str	r0, [r6, #0]
 800842a:	062e      	lsls	r6, r5, #24
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	d501      	bpl.n	8008434 <_printf_i+0x1c0>
 8008430:	6019      	str	r1, [r3, #0]
 8008432:	e002      	b.n	800843a <_printf_i+0x1c6>
 8008434:	0668      	lsls	r0, r5, #25
 8008436:	d5fb      	bpl.n	8008430 <_printf_i+0x1bc>
 8008438:	8019      	strh	r1, [r3, #0]
 800843a:	2300      	movs	r3, #0
 800843c:	6123      	str	r3, [r4, #16]
 800843e:	4616      	mov	r6, r2
 8008440:	e7bc      	b.n	80083bc <_printf_i+0x148>
 8008442:	6833      	ldr	r3, [r6, #0]
 8008444:	1d1a      	adds	r2, r3, #4
 8008446:	6032      	str	r2, [r6, #0]
 8008448:	681e      	ldr	r6, [r3, #0]
 800844a:	6862      	ldr	r2, [r4, #4]
 800844c:	2100      	movs	r1, #0
 800844e:	4630      	mov	r0, r6
 8008450:	f7f7 febe 	bl	80001d0 <memchr>
 8008454:	b108      	cbz	r0, 800845a <_printf_i+0x1e6>
 8008456:	1b80      	subs	r0, r0, r6
 8008458:	6060      	str	r0, [r4, #4]
 800845a:	6863      	ldr	r3, [r4, #4]
 800845c:	6123      	str	r3, [r4, #16]
 800845e:	2300      	movs	r3, #0
 8008460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008464:	e7aa      	b.n	80083bc <_printf_i+0x148>
 8008466:	6923      	ldr	r3, [r4, #16]
 8008468:	4632      	mov	r2, r6
 800846a:	4649      	mov	r1, r9
 800846c:	4640      	mov	r0, r8
 800846e:	47d0      	blx	sl
 8008470:	3001      	adds	r0, #1
 8008472:	d0ad      	beq.n	80083d0 <_printf_i+0x15c>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	079b      	lsls	r3, r3, #30
 8008478:	d413      	bmi.n	80084a2 <_printf_i+0x22e>
 800847a:	68e0      	ldr	r0, [r4, #12]
 800847c:	9b03      	ldr	r3, [sp, #12]
 800847e:	4298      	cmp	r0, r3
 8008480:	bfb8      	it	lt
 8008482:	4618      	movlt	r0, r3
 8008484:	e7a6      	b.n	80083d4 <_printf_i+0x160>
 8008486:	2301      	movs	r3, #1
 8008488:	4632      	mov	r2, r6
 800848a:	4649      	mov	r1, r9
 800848c:	4640      	mov	r0, r8
 800848e:	47d0      	blx	sl
 8008490:	3001      	adds	r0, #1
 8008492:	d09d      	beq.n	80083d0 <_printf_i+0x15c>
 8008494:	3501      	adds	r5, #1
 8008496:	68e3      	ldr	r3, [r4, #12]
 8008498:	9903      	ldr	r1, [sp, #12]
 800849a:	1a5b      	subs	r3, r3, r1
 800849c:	42ab      	cmp	r3, r5
 800849e:	dcf2      	bgt.n	8008486 <_printf_i+0x212>
 80084a0:	e7eb      	b.n	800847a <_printf_i+0x206>
 80084a2:	2500      	movs	r5, #0
 80084a4:	f104 0619 	add.w	r6, r4, #25
 80084a8:	e7f5      	b.n	8008496 <_printf_i+0x222>
 80084aa:	bf00      	nop
 80084ac:	0800b60d 	.word	0x0800b60d
 80084b0:	0800b61e 	.word	0x0800b61e

080084b4 <memmove>:
 80084b4:	4288      	cmp	r0, r1
 80084b6:	b510      	push	{r4, lr}
 80084b8:	eb01 0402 	add.w	r4, r1, r2
 80084bc:	d902      	bls.n	80084c4 <memmove+0x10>
 80084be:	4284      	cmp	r4, r0
 80084c0:	4623      	mov	r3, r4
 80084c2:	d807      	bhi.n	80084d4 <memmove+0x20>
 80084c4:	1e43      	subs	r3, r0, #1
 80084c6:	42a1      	cmp	r1, r4
 80084c8:	d008      	beq.n	80084dc <memmove+0x28>
 80084ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084d2:	e7f8      	b.n	80084c6 <memmove+0x12>
 80084d4:	4402      	add	r2, r0
 80084d6:	4601      	mov	r1, r0
 80084d8:	428a      	cmp	r2, r1
 80084da:	d100      	bne.n	80084de <memmove+0x2a>
 80084dc:	bd10      	pop	{r4, pc}
 80084de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084e6:	e7f7      	b.n	80084d8 <memmove+0x24>

080084e8 <_sbrk_r>:
 80084e8:	b538      	push	{r3, r4, r5, lr}
 80084ea:	4d06      	ldr	r5, [pc, #24]	@ (8008504 <_sbrk_r+0x1c>)
 80084ec:	2300      	movs	r3, #0
 80084ee:	4604      	mov	r4, r0
 80084f0:	4608      	mov	r0, r1
 80084f2:	602b      	str	r3, [r5, #0]
 80084f4:	f7fa fbdc 	bl	8002cb0 <_sbrk>
 80084f8:	1c43      	adds	r3, r0, #1
 80084fa:	d102      	bne.n	8008502 <_sbrk_r+0x1a>
 80084fc:	682b      	ldr	r3, [r5, #0]
 80084fe:	b103      	cbz	r3, 8008502 <_sbrk_r+0x1a>
 8008500:	6023      	str	r3, [r4, #0]
 8008502:	bd38      	pop	{r3, r4, r5, pc}
 8008504:	2000040c 	.word	0x2000040c

08008508 <memcpy>:
 8008508:	440a      	add	r2, r1
 800850a:	4291      	cmp	r1, r2
 800850c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008510:	d100      	bne.n	8008514 <memcpy+0xc>
 8008512:	4770      	bx	lr
 8008514:	b510      	push	{r4, lr}
 8008516:	f811 4b01 	ldrb.w	r4, [r1], #1
 800851a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800851e:	4291      	cmp	r1, r2
 8008520:	d1f9      	bne.n	8008516 <memcpy+0xe>
 8008522:	bd10      	pop	{r4, pc}

08008524 <_realloc_r>:
 8008524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008528:	4680      	mov	r8, r0
 800852a:	4615      	mov	r5, r2
 800852c:	460c      	mov	r4, r1
 800852e:	b921      	cbnz	r1, 800853a <_realloc_r+0x16>
 8008530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008534:	4611      	mov	r1, r2
 8008536:	f7ff bc4b 	b.w	8007dd0 <_malloc_r>
 800853a:	b92a      	cbnz	r2, 8008548 <_realloc_r+0x24>
 800853c:	f7ff fbdc 	bl	8007cf8 <_free_r>
 8008540:	2400      	movs	r4, #0
 8008542:	4620      	mov	r0, r4
 8008544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008548:	f000 f81a 	bl	8008580 <_malloc_usable_size_r>
 800854c:	4285      	cmp	r5, r0
 800854e:	4606      	mov	r6, r0
 8008550:	d802      	bhi.n	8008558 <_realloc_r+0x34>
 8008552:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008556:	d8f4      	bhi.n	8008542 <_realloc_r+0x1e>
 8008558:	4629      	mov	r1, r5
 800855a:	4640      	mov	r0, r8
 800855c:	f7ff fc38 	bl	8007dd0 <_malloc_r>
 8008560:	4607      	mov	r7, r0
 8008562:	2800      	cmp	r0, #0
 8008564:	d0ec      	beq.n	8008540 <_realloc_r+0x1c>
 8008566:	42b5      	cmp	r5, r6
 8008568:	462a      	mov	r2, r5
 800856a:	4621      	mov	r1, r4
 800856c:	bf28      	it	cs
 800856e:	4632      	movcs	r2, r6
 8008570:	f7ff ffca 	bl	8008508 <memcpy>
 8008574:	4621      	mov	r1, r4
 8008576:	4640      	mov	r0, r8
 8008578:	f7ff fbbe 	bl	8007cf8 <_free_r>
 800857c:	463c      	mov	r4, r7
 800857e:	e7e0      	b.n	8008542 <_realloc_r+0x1e>

08008580 <_malloc_usable_size_r>:
 8008580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008584:	1f18      	subs	r0, r3, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	bfbc      	itt	lt
 800858a:	580b      	ldrlt	r3, [r1, r0]
 800858c:	18c0      	addlt	r0, r0, r3
 800858e:	4770      	bx	lr

08008590 <_init>:
 8008590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008592:	bf00      	nop
 8008594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008596:	bc08      	pop	{r3}
 8008598:	469e      	mov	lr, r3
 800859a:	4770      	bx	lr

0800859c <_fini>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	bf00      	nop
 80085a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085a2:	bc08      	pop	{r3}
 80085a4:	469e      	mov	lr, r3
 80085a6:	4770      	bx	lr
